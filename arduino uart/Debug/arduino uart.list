
arduino uart.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001bc  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000754c  080001bc  080001bc  000101bc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000a0  08007708  08007708  00017708  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080077a8  080077a8  00020190  2**0
                  CONTENTS
  4 .ARM          00000000  080077a8  080077a8  00020190  2**0
                  CONTENTS
  5 .preinit_array 00000000  080077a8  080077a8  00020190  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080077a8  080077a8  000177a8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080077ac  080077ac  000177ac  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000190  20000000  080077b0  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00001b68  20000190  08007940  00020190  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20001cf8  08007940  00021cf8  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020190  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001dbe8  00000000  00000000  000201c0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00003a5c  00000000  00000000  0003dda8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000013c8  00000000  00000000  00041808  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00001230  00000000  00000000  00042bd0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0002da32  00000000  00000000  00043e00  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   000182c7  00000000  00000000  00071832  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0010994f  00000000  00000000  00089af9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  00193448  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000515c  00000000  00000000  0019349c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001bc <__do_global_dtors_aux>:
 80001bc:	b510      	push	{r4, lr}
 80001be:	4c05      	ldr	r4, [pc, #20]	; (80001d4 <__do_global_dtors_aux+0x18>)
 80001c0:	7823      	ldrb	r3, [r4, #0]
 80001c2:	b933      	cbnz	r3, 80001d2 <__do_global_dtors_aux+0x16>
 80001c4:	4b04      	ldr	r3, [pc, #16]	; (80001d8 <__do_global_dtors_aux+0x1c>)
 80001c6:	b113      	cbz	r3, 80001ce <__do_global_dtors_aux+0x12>
 80001c8:	4804      	ldr	r0, [pc, #16]	; (80001dc <__do_global_dtors_aux+0x20>)
 80001ca:	f3af 8000 	nop.w
 80001ce:	2301      	movs	r3, #1
 80001d0:	7023      	strb	r3, [r4, #0]
 80001d2:	bd10      	pop	{r4, pc}
 80001d4:	20000190 	.word	0x20000190
 80001d8:	00000000 	.word	0x00000000
 80001dc:	080076f0 	.word	0x080076f0

080001e0 <frame_dummy>:
 80001e0:	b508      	push	{r3, lr}
 80001e2:	4b03      	ldr	r3, [pc, #12]	; (80001f0 <frame_dummy+0x10>)
 80001e4:	b11b      	cbz	r3, 80001ee <frame_dummy+0xe>
 80001e6:	4903      	ldr	r1, [pc, #12]	; (80001f4 <frame_dummy+0x14>)
 80001e8:	4803      	ldr	r0, [pc, #12]	; (80001f8 <frame_dummy+0x18>)
 80001ea:	f3af 8000 	nop.w
 80001ee:	bd08      	pop	{r3, pc}
 80001f0:	00000000 	.word	0x00000000
 80001f4:	20000194 	.word	0x20000194
 80001f8:	080076f0 	.word	0x080076f0

080001fc <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 80001fc:	b480      	push	{r7}
 80001fe:	b083      	sub	sp, #12
 8000200:	af00      	add	r7, sp, #0

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000202:	4b0f      	ldr	r3, [pc, #60]	; (8000240 <MX_GPIO_Init+0x44>)
 8000204:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000206:	4a0e      	ldr	r2, [pc, #56]	; (8000240 <MX_GPIO_Init+0x44>)
 8000208:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800020c:	64d3      	str	r3, [r2, #76]	; 0x4c
 800020e:	4b0c      	ldr	r3, [pc, #48]	; (8000240 <MX_GPIO_Init+0x44>)
 8000210:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000212:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000216:	607b      	str	r3, [r7, #4]
 8000218:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800021a:	4b09      	ldr	r3, [pc, #36]	; (8000240 <MX_GPIO_Init+0x44>)
 800021c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800021e:	4a08      	ldr	r2, [pc, #32]	; (8000240 <MX_GPIO_Init+0x44>)
 8000220:	f043 0301 	orr.w	r3, r3, #1
 8000224:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000226:	4b06      	ldr	r3, [pc, #24]	; (8000240 <MX_GPIO_Init+0x44>)
 8000228:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800022a:	f003 0301 	and.w	r3, r3, #1
 800022e:	603b      	str	r3, [r7, #0]
 8000230:	683b      	ldr	r3, [r7, #0]

}
 8000232:	bf00      	nop
 8000234:	370c      	adds	r7, #12
 8000236:	46bd      	mov	sp, r7
 8000238:	f85d 7b04 	ldr.w	r7, [sp], #4
 800023c:	4770      	bx	lr
 800023e:	bf00      	nop
 8000240:	40021000 	.word	0x40021000

08000244 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000244:	b590      	push	{r4, r7, lr}
 8000246:	b085      	sub	sp, #20
 8000248:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800024a:	f000 f976 	bl	800053a <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800024e:	f000 f819 	bl	8000284 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000252:	f7ff ffd3 	bl	80001fc <MX_GPIO_Init>
  MX_USB_DEVICE_Init();
 8000256:	f006 fbc5 	bl	80069e4 <MX_USB_DEVICE_Init>
  /* USER CODE BEGIN 2 */
  uint8_t text[] = "Hello World!\n\r";
 800025a:	4b09      	ldr	r3, [pc, #36]	; (8000280 <main+0x3c>)
 800025c:	463c      	mov	r4, r7
 800025e:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8000260:	c407      	stmia	r4!, {r0, r1, r2}
 8000262:	8023      	strh	r3, [r4, #0]
 8000264:	3402      	adds	r4, #2
 8000266:	0c1b      	lsrs	r3, r3, #16
 8000268:	7023      	strb	r3, [r4, #0]

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  CDC_Transmit_FS(text, sizeof(text));
 800026a:	463b      	mov	r3, r7
 800026c:	210f      	movs	r1, #15
 800026e:	4618      	mov	r0, r3
 8000270:	f006 fc76 	bl	8006b60 <CDC_Transmit_FS>
	  HAL_Delay(500);
 8000274:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8000278:	f000 f998 	bl	80005ac <HAL_Delay>
	  CDC_Transmit_FS(text, sizeof(text));
 800027c:	e7f5      	b.n	800026a <main+0x26>
 800027e:	bf00      	nop
 8000280:	08007708 	.word	0x08007708

08000284 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000284:	b580      	push	{r7, lr}
 8000286:	b096      	sub	sp, #88	; 0x58
 8000288:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800028a:	f107 0314 	add.w	r3, r7, #20
 800028e:	2244      	movs	r2, #68	; 0x44
 8000290:	2100      	movs	r1, #0
 8000292:	4618      	mov	r0, r3
 8000294:	f007 fa24 	bl	80076e0 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000298:	463b      	mov	r3, r7
 800029a:	2200      	movs	r2, #0
 800029c:	601a      	str	r2, [r3, #0]
 800029e:	605a      	str	r2, [r3, #4]
 80002a0:	609a      	str	r2, [r3, #8]
 80002a2:	60da      	str	r2, [r3, #12]
 80002a4:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1_BOOST) != HAL_OK)
 80002a6:	2000      	movs	r0, #0
 80002a8:	f001 fccc 	bl	8001c44 <HAL_PWREx_ControlVoltageScaling>
 80002ac:	4603      	mov	r3, r0
 80002ae:	2b00      	cmp	r3, #0
 80002b0:	d001      	beq.n	80002b6 <SystemClock_Config+0x32>
  {
    Error_Handler();
 80002b2:	f000 f847 	bl	8000344 <Error_Handler>
  }
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80002b6:	2301      	movs	r3, #1
 80002b8:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80002ba:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80002be:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80002c0:	2302      	movs	r3, #2
 80002c2:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80002c4:	2303      	movs	r3, #3
 80002c6:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLM = 1;
 80002c8:	2301      	movs	r3, #1
 80002ca:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLN = 30;
 80002cc:	231e      	movs	r3, #30
 80002ce:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80002d0:	2302      	movs	r3, #2
 80002d2:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 80002d4:	2302      	movs	r3, #2
 80002d6:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 80002d8:	2302      	movs	r3, #2
 80002da:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80002dc:	f107 0314 	add.w	r3, r7, #20
 80002e0:	4618      	mov	r0, r3
 80002e2:	f001 fd63 	bl	8001dac <HAL_RCC_OscConfig>
 80002e6:	4603      	mov	r3, r0
 80002e8:	2b00      	cmp	r3, #0
 80002ea:	d001      	beq.n	80002f0 <SystemClock_Config+0x6c>
  {
    Error_Handler();
 80002ec:	f000 f82a 	bl	8000344 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80002f0:	230f      	movs	r3, #15
 80002f2:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80002f4:	2303      	movs	r3, #3
 80002f6:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80002f8:	2300      	movs	r3, #0
 80002fa:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80002fc:	2300      	movs	r3, #0
 80002fe:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000300:	2300      	movs	r3, #0
 8000302:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8000304:	463b      	mov	r3, r7
 8000306:	2105      	movs	r1, #5
 8000308:	4618      	mov	r0, r3
 800030a:	f002 f975 	bl	80025f8 <HAL_RCC_ClockConfig>
 800030e:	4603      	mov	r3, r0
 8000310:	2b00      	cmp	r3, #0
 8000312:	d001      	beq.n	8000318 <SystemClock_Config+0x94>
  {
    Error_Handler();
 8000314:	f000 f816 	bl	8000344 <Error_Handler>
  }
}
 8000318:	bf00      	nop
 800031a:	3758      	adds	r7, #88	; 0x58
 800031c:	46bd      	mov	sp, r7
 800031e:	bd80      	pop	{r7, pc}

08000320 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8000320:	b580      	push	{r7, lr}
 8000322:	b082      	sub	sp, #8
 8000324:	af00      	add	r7, sp, #0
 8000326:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM1) {
 8000328:	687b      	ldr	r3, [r7, #4]
 800032a:	681b      	ldr	r3, [r3, #0]
 800032c:	4a04      	ldr	r2, [pc, #16]	; (8000340 <HAL_TIM_PeriodElapsedCallback+0x20>)
 800032e:	4293      	cmp	r3, r2
 8000330:	d101      	bne.n	8000336 <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8000332:	f000 f91b 	bl	800056c <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8000336:	bf00      	nop
 8000338:	3708      	adds	r7, #8
 800033a:	46bd      	mov	sp, r7
 800033c:	bd80      	pop	{r7, pc}
 800033e:	bf00      	nop
 8000340:	40012c00 	.word	0x40012c00

08000344 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000344:	b480      	push	{r7}
 8000346:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000348:	b672      	cpsid	i
}
 800034a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 800034c:	e7fe      	b.n	800034c <Error_Handler+0x8>
	...

08000350 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000350:	b480      	push	{r7}
 8000352:	b083      	sub	sp, #12
 8000354:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000356:	4b0f      	ldr	r3, [pc, #60]	; (8000394 <HAL_MspInit+0x44>)
 8000358:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800035a:	4a0e      	ldr	r2, [pc, #56]	; (8000394 <HAL_MspInit+0x44>)
 800035c:	f043 0301 	orr.w	r3, r3, #1
 8000360:	6613      	str	r3, [r2, #96]	; 0x60
 8000362:	4b0c      	ldr	r3, [pc, #48]	; (8000394 <HAL_MspInit+0x44>)
 8000364:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000366:	f003 0301 	and.w	r3, r3, #1
 800036a:	607b      	str	r3, [r7, #4]
 800036c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800036e:	4b09      	ldr	r3, [pc, #36]	; (8000394 <HAL_MspInit+0x44>)
 8000370:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000372:	4a08      	ldr	r2, [pc, #32]	; (8000394 <HAL_MspInit+0x44>)
 8000374:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000378:	6593      	str	r3, [r2, #88]	; 0x58
 800037a:	4b06      	ldr	r3, [pc, #24]	; (8000394 <HAL_MspInit+0x44>)
 800037c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800037e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000382:	603b      	str	r3, [r7, #0]
 8000384:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000386:	bf00      	nop
 8000388:	370c      	adds	r7, #12
 800038a:	46bd      	mov	sp, r7
 800038c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000390:	4770      	bx	lr
 8000392:	bf00      	nop
 8000394:	40021000 	.word	0x40021000

08000398 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000398:	b580      	push	{r7, lr}
 800039a:	b08c      	sub	sp, #48	; 0x30
 800039c:	af00      	add	r7, sp, #0
 800039e:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0;
 80003a0:	2300      	movs	r3, #0
 80003a2:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t              uwPrescalerValue = 0;
 80003a4:	2300      	movs	r3, #0
 80003a6:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  /*Configure the TIM1 IRQ priority */
  HAL_NVIC_SetPriority(TIM1_UP_TIM16_IRQn, TickPriority ,0);
 80003a8:	2200      	movs	r2, #0
 80003aa:	6879      	ldr	r1, [r7, #4]
 80003ac:	2019      	movs	r0, #25
 80003ae:	f000 f9d9 	bl	8000764 <HAL_NVIC_SetPriority>

  /* Enable the TIM1 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM1_UP_TIM16_IRQn);
 80003b2:	2019      	movs	r0, #25
 80003b4:	f000 f9f2 	bl	800079c <HAL_NVIC_EnableIRQ>

  /* Enable TIM1 clock */
  __HAL_RCC_TIM1_CLK_ENABLE();
 80003b8:	4b1e      	ldr	r3, [pc, #120]	; (8000434 <HAL_InitTick+0x9c>)
 80003ba:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80003bc:	4a1d      	ldr	r2, [pc, #116]	; (8000434 <HAL_InitTick+0x9c>)
 80003be:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 80003c2:	6613      	str	r3, [r2, #96]	; 0x60
 80003c4:	4b1b      	ldr	r3, [pc, #108]	; (8000434 <HAL_InitTick+0x9c>)
 80003c6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80003c8:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80003cc:	60fb      	str	r3, [r7, #12]
 80003ce:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 80003d0:	f107 0210 	add.w	r2, r7, #16
 80003d4:	f107 0314 	add.w	r3, r7, #20
 80003d8:	4611      	mov	r1, r2
 80003da:	4618      	mov	r0, r3
 80003dc:	f002 fae6 	bl	80029ac <HAL_RCC_GetClockConfig>

  /* Compute TIM1 clock */
  uwTimclock = HAL_RCC_GetPCLK2Freq();
 80003e0:	f002 face 	bl	8002980 <HAL_RCC_GetPCLK2Freq>
 80003e4:	62f8      	str	r0, [r7, #44]	; 0x2c
  /* Compute the prescaler value to have TIM1 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 80003e6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80003e8:	4a13      	ldr	r2, [pc, #76]	; (8000438 <HAL_InitTick+0xa0>)
 80003ea:	fba2 2303 	umull	r2, r3, r2, r3
 80003ee:	0c9b      	lsrs	r3, r3, #18
 80003f0:	3b01      	subs	r3, #1
 80003f2:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Initialize TIM1 */
  htim1.Instance = TIM1;
 80003f4:	4b11      	ldr	r3, [pc, #68]	; (800043c <HAL_InitTick+0xa4>)
 80003f6:	4a12      	ldr	r2, [pc, #72]	; (8000440 <HAL_InitTick+0xa8>)
 80003f8:	601a      	str	r2, [r3, #0]
  + Period = [(TIM1CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim1.Init.Period = (1000000U / 1000U) - 1U;
 80003fa:	4b10      	ldr	r3, [pc, #64]	; (800043c <HAL_InitTick+0xa4>)
 80003fc:	f240 32e7 	movw	r2, #999	; 0x3e7
 8000400:	60da      	str	r2, [r3, #12]
  htim1.Init.Prescaler = uwPrescalerValue;
 8000402:	4a0e      	ldr	r2, [pc, #56]	; (800043c <HAL_InitTick+0xa4>)
 8000404:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000406:	6053      	str	r3, [r2, #4]
  htim1.Init.ClockDivision = 0;
 8000408:	4b0c      	ldr	r3, [pc, #48]	; (800043c <HAL_InitTick+0xa4>)
 800040a:	2200      	movs	r2, #0
 800040c:	611a      	str	r2, [r3, #16]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 800040e:	4b0b      	ldr	r3, [pc, #44]	; (800043c <HAL_InitTick+0xa4>)
 8000410:	2200      	movs	r2, #0
 8000412:	609a      	str	r2, [r3, #8]

  if(HAL_TIM_Base_Init(&htim1) == HAL_OK)
 8000414:	4809      	ldr	r0, [pc, #36]	; (800043c <HAL_InitTick+0xa4>)
 8000416:	f003 f8d5 	bl	80035c4 <HAL_TIM_Base_Init>
 800041a:	4603      	mov	r3, r0
 800041c:	2b00      	cmp	r3, #0
 800041e:	d104      	bne.n	800042a <HAL_InitTick+0x92>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim1);
 8000420:	4806      	ldr	r0, [pc, #24]	; (800043c <HAL_InitTick+0xa4>)
 8000422:	f003 f931 	bl	8003688 <HAL_TIM_Base_Start_IT>
 8000426:	4603      	mov	r3, r0
 8000428:	e000      	b.n	800042c <HAL_InitTick+0x94>
  }

  /* Return function status */
  return HAL_ERROR;
 800042a:	2301      	movs	r3, #1
}
 800042c:	4618      	mov	r0, r3
 800042e:	3730      	adds	r7, #48	; 0x30
 8000430:	46bd      	mov	sp, r7
 8000432:	bd80      	pop	{r7, pc}
 8000434:	40021000 	.word	0x40021000
 8000438:	431bde83 	.word	0x431bde83
 800043c:	200003d0 	.word	0x200003d0
 8000440:	40012c00 	.word	0x40012c00

08000444 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000444:	b480      	push	{r7}
 8000446:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000448:	e7fe      	b.n	8000448 <NMI_Handler+0x4>

0800044a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800044a:	b480      	push	{r7}
 800044c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800044e:	e7fe      	b.n	800044e <HardFault_Handler+0x4>

08000450 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000450:	b480      	push	{r7}
 8000452:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000454:	e7fe      	b.n	8000454 <MemManage_Handler+0x4>

08000456 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000456:	b480      	push	{r7}
 8000458:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800045a:	e7fe      	b.n	800045a <BusFault_Handler+0x4>

0800045c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800045c:	b480      	push	{r7}
 800045e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000460:	e7fe      	b.n	8000460 <UsageFault_Handler+0x4>

08000462 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000462:	b480      	push	{r7}
 8000464:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000466:	bf00      	nop
 8000468:	46bd      	mov	sp, r7
 800046a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800046e:	4770      	bx	lr

08000470 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000470:	b480      	push	{r7}
 8000472:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000474:	bf00      	nop
 8000476:	46bd      	mov	sp, r7
 8000478:	f85d 7b04 	ldr.w	r7, [sp], #4
 800047c:	4770      	bx	lr

0800047e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800047e:	b480      	push	{r7}
 8000480:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000482:	bf00      	nop
 8000484:	46bd      	mov	sp, r7
 8000486:	f85d 7b04 	ldr.w	r7, [sp], #4
 800048a:	4770      	bx	lr

0800048c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800048c:	b480      	push	{r7}
 800048e:	af00      	add	r7, sp, #0
  /* USER CODE END SysTick_IRQn 0 */

  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000490:	bf00      	nop
 8000492:	46bd      	mov	sp, r7
 8000494:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000498:	4770      	bx	lr
	...

0800049c <TIM1_UP_TIM16_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt and TIM16 global interrupt.
  */
void TIM1_UP_TIM16_IRQHandler(void)
{
 800049c:	b580      	push	{r7, lr}
 800049e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM16_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM16_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 80004a0:	4802      	ldr	r0, [pc, #8]	; (80004ac <TIM1_UP_TIM16_IRQHandler+0x10>)
 80004a2:	f003 f961 	bl	8003768 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM16_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM16_IRQn 1 */
}
 80004a6:	bf00      	nop
 80004a8:	bd80      	pop	{r7, pc}
 80004aa:	bf00      	nop
 80004ac:	200003d0 	.word	0x200003d0

080004b0 <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB OTG FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 80004b0:	b580      	push	{r7, lr}
 80004b2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_OTG_FS);
 80004b4:	4802      	ldr	r0, [pc, #8]	; (80004c0 <OTG_FS_IRQHandler+0x10>)
 80004b6:	f000 fc64 	bl	8000d82 <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 80004ba:	bf00      	nop
 80004bc:	bd80      	pop	{r7, pc}
 80004be:	bf00      	nop
 80004c0:	200018f0 	.word	0x200018f0

080004c4 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 80004c4:	b480      	push	{r7}
 80004c6:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 80004c8:	4b06      	ldr	r3, [pc, #24]	; (80004e4 <SystemInit+0x20>)
 80004ca:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80004ce:	4a05      	ldr	r2, [pc, #20]	; (80004e4 <SystemInit+0x20>)
 80004d0:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80004d4:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
#endif
}
 80004d8:	bf00      	nop
 80004da:	46bd      	mov	sp, r7
 80004dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80004e0:	4770      	bx	lr
 80004e2:	bf00      	nop
 80004e4:	e000ed00 	.word	0xe000ed00

080004e8 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 80004e8:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000520 <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 80004ec:	f7ff ffea 	bl	80004c4 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80004f0:	480c      	ldr	r0, [pc, #48]	; (8000524 <LoopForever+0x6>)
  ldr r1, =_edata
 80004f2:	490d      	ldr	r1, [pc, #52]	; (8000528 <LoopForever+0xa>)
  ldr r2, =_sidata
 80004f4:	4a0d      	ldr	r2, [pc, #52]	; (800052c <LoopForever+0xe>)
  movs r3, #0
 80004f6:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80004f8:	e002      	b.n	8000500 <LoopCopyDataInit>

080004fa <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80004fa:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80004fc:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80004fe:	3304      	adds	r3, #4

08000500 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000500:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000502:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000504:	d3f9      	bcc.n	80004fa <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000506:	4a0a      	ldr	r2, [pc, #40]	; (8000530 <LoopForever+0x12>)
  ldr r4, =_ebss
 8000508:	4c0a      	ldr	r4, [pc, #40]	; (8000534 <LoopForever+0x16>)
  movs r3, #0
 800050a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800050c:	e001      	b.n	8000512 <LoopFillZerobss>

0800050e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800050e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000510:	3204      	adds	r2, #4

08000512 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000512:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000514:	d3fb      	bcc.n	800050e <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000516:	f007 f8bf 	bl	8007698 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 800051a:	f7ff fe93 	bl	8000244 <main>

0800051e <LoopForever>:

LoopForever:
    b LoopForever
 800051e:	e7fe      	b.n	800051e <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 8000520:	200a0000 	.word	0x200a0000
  ldr r0, =_sdata
 8000524:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000528:	20000190 	.word	0x20000190
  ldr r2, =_sidata
 800052c:	080077b0 	.word	0x080077b0
  ldr r2, =_sbss
 8000530:	20000190 	.word	0x20000190
  ldr r4, =_ebss
 8000534:	20001cf8 	.word	0x20001cf8

08000538 <ADC1_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8000538:	e7fe      	b.n	8000538 <ADC1_IRQHandler>

0800053a <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800053a:	b580      	push	{r7, lr}
 800053c:	b082      	sub	sp, #8
 800053e:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8000540:	2300      	movs	r3, #0
 8000542:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000544:	2003      	movs	r0, #3
 8000546:	f000 f902 	bl	800074e <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 800054a:	200f      	movs	r0, #15
 800054c:	f7ff ff24 	bl	8000398 <HAL_InitTick>
 8000550:	4603      	mov	r3, r0
 8000552:	2b00      	cmp	r3, #0
 8000554:	d002      	beq.n	800055c <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 8000556:	2301      	movs	r3, #1
 8000558:	71fb      	strb	r3, [r7, #7]
 800055a:	e001      	b.n	8000560 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 800055c:	f7ff fef8 	bl	8000350 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8000560:	79fb      	ldrb	r3, [r7, #7]
}
 8000562:	4618      	mov	r0, r3
 8000564:	3708      	adds	r7, #8
 8000566:	46bd      	mov	sp, r7
 8000568:	bd80      	pop	{r7, pc}
	...

0800056c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800056c:	b480      	push	{r7}
 800056e:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8000570:	4b06      	ldr	r3, [pc, #24]	; (800058c <HAL_IncTick+0x20>)
 8000572:	781b      	ldrb	r3, [r3, #0]
 8000574:	461a      	mov	r2, r3
 8000576:	4b06      	ldr	r3, [pc, #24]	; (8000590 <HAL_IncTick+0x24>)
 8000578:	681b      	ldr	r3, [r3, #0]
 800057a:	4413      	add	r3, r2
 800057c:	4a04      	ldr	r2, [pc, #16]	; (8000590 <HAL_IncTick+0x24>)
 800057e:	6013      	str	r3, [r2, #0]
}
 8000580:	bf00      	nop
 8000582:	46bd      	mov	sp, r7
 8000584:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000588:	4770      	bx	lr
 800058a:	bf00      	nop
 800058c:	20000008 	.word	0x20000008
 8000590:	2000041c 	.word	0x2000041c

08000594 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000594:	b480      	push	{r7}
 8000596:	af00      	add	r7, sp, #0
  return uwTick;
 8000598:	4b03      	ldr	r3, [pc, #12]	; (80005a8 <HAL_GetTick+0x14>)
 800059a:	681b      	ldr	r3, [r3, #0]
}
 800059c:	4618      	mov	r0, r3
 800059e:	46bd      	mov	sp, r7
 80005a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005a4:	4770      	bx	lr
 80005a6:	bf00      	nop
 80005a8:	2000041c 	.word	0x2000041c

080005ac <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80005ac:	b580      	push	{r7, lr}
 80005ae:	b084      	sub	sp, #16
 80005b0:	af00      	add	r7, sp, #0
 80005b2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80005b4:	f7ff ffee 	bl	8000594 <HAL_GetTick>
 80005b8:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80005ba:	687b      	ldr	r3, [r7, #4]
 80005bc:	60fb      	str	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 80005be:	68fb      	ldr	r3, [r7, #12]
 80005c0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80005c4:	d005      	beq.n	80005d2 <HAL_Delay+0x26>
  {
    wait += (uint32_t)uwTickFreq;
 80005c6:	4b0a      	ldr	r3, [pc, #40]	; (80005f0 <HAL_Delay+0x44>)
 80005c8:	781b      	ldrb	r3, [r3, #0]
 80005ca:	461a      	mov	r2, r3
 80005cc:	68fb      	ldr	r3, [r7, #12]
 80005ce:	4413      	add	r3, r2
 80005d0:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80005d2:	bf00      	nop
 80005d4:	f7ff ffde 	bl	8000594 <HAL_GetTick>
 80005d8:	4602      	mov	r2, r0
 80005da:	68bb      	ldr	r3, [r7, #8]
 80005dc:	1ad3      	subs	r3, r2, r3
 80005de:	68fa      	ldr	r2, [r7, #12]
 80005e0:	429a      	cmp	r2, r3
 80005e2:	d8f7      	bhi.n	80005d4 <HAL_Delay+0x28>
  {
  }
}
 80005e4:	bf00      	nop
 80005e6:	bf00      	nop
 80005e8:	3710      	adds	r7, #16
 80005ea:	46bd      	mov	sp, r7
 80005ec:	bd80      	pop	{r7, pc}
 80005ee:	bf00      	nop
 80005f0:	20000008 	.word	0x20000008

080005f4 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80005f4:	b480      	push	{r7}
 80005f6:	b085      	sub	sp, #20
 80005f8:	af00      	add	r7, sp, #0
 80005fa:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80005fc:	687b      	ldr	r3, [r7, #4]
 80005fe:	f003 0307 	and.w	r3, r3, #7
 8000602:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000604:	4b0c      	ldr	r3, [pc, #48]	; (8000638 <__NVIC_SetPriorityGrouping+0x44>)
 8000606:	68db      	ldr	r3, [r3, #12]
 8000608:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800060a:	68ba      	ldr	r2, [r7, #8]
 800060c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000610:	4013      	ands	r3, r2
 8000612:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000614:	68fb      	ldr	r3, [r7, #12]
 8000616:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000618:	68bb      	ldr	r3, [r7, #8]
 800061a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 800061c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000620:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000624:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000626:	4a04      	ldr	r2, [pc, #16]	; (8000638 <__NVIC_SetPriorityGrouping+0x44>)
 8000628:	68bb      	ldr	r3, [r7, #8]
 800062a:	60d3      	str	r3, [r2, #12]
}
 800062c:	bf00      	nop
 800062e:	3714      	adds	r7, #20
 8000630:	46bd      	mov	sp, r7
 8000632:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000636:	4770      	bx	lr
 8000638:	e000ed00 	.word	0xe000ed00

0800063c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800063c:	b480      	push	{r7}
 800063e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000640:	4b04      	ldr	r3, [pc, #16]	; (8000654 <__NVIC_GetPriorityGrouping+0x18>)
 8000642:	68db      	ldr	r3, [r3, #12]
 8000644:	0a1b      	lsrs	r3, r3, #8
 8000646:	f003 0307 	and.w	r3, r3, #7
}
 800064a:	4618      	mov	r0, r3
 800064c:	46bd      	mov	sp, r7
 800064e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000652:	4770      	bx	lr
 8000654:	e000ed00 	.word	0xe000ed00

08000658 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000658:	b480      	push	{r7}
 800065a:	b083      	sub	sp, #12
 800065c:	af00      	add	r7, sp, #0
 800065e:	4603      	mov	r3, r0
 8000660:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000662:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000666:	2b00      	cmp	r3, #0
 8000668:	db0b      	blt.n	8000682 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800066a:	79fb      	ldrb	r3, [r7, #7]
 800066c:	f003 021f 	and.w	r2, r3, #31
 8000670:	4907      	ldr	r1, [pc, #28]	; (8000690 <__NVIC_EnableIRQ+0x38>)
 8000672:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000676:	095b      	lsrs	r3, r3, #5
 8000678:	2001      	movs	r0, #1
 800067a:	fa00 f202 	lsl.w	r2, r0, r2
 800067e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8000682:	bf00      	nop
 8000684:	370c      	adds	r7, #12
 8000686:	46bd      	mov	sp, r7
 8000688:	f85d 7b04 	ldr.w	r7, [sp], #4
 800068c:	4770      	bx	lr
 800068e:	bf00      	nop
 8000690:	e000e100 	.word	0xe000e100

08000694 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000694:	b480      	push	{r7}
 8000696:	b083      	sub	sp, #12
 8000698:	af00      	add	r7, sp, #0
 800069a:	4603      	mov	r3, r0
 800069c:	6039      	str	r1, [r7, #0]
 800069e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80006a0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80006a4:	2b00      	cmp	r3, #0
 80006a6:	db0a      	blt.n	80006be <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80006a8:	683b      	ldr	r3, [r7, #0]
 80006aa:	b2da      	uxtb	r2, r3
 80006ac:	490c      	ldr	r1, [pc, #48]	; (80006e0 <__NVIC_SetPriority+0x4c>)
 80006ae:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80006b2:	0112      	lsls	r2, r2, #4
 80006b4:	b2d2      	uxtb	r2, r2
 80006b6:	440b      	add	r3, r1
 80006b8:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80006bc:	e00a      	b.n	80006d4 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80006be:	683b      	ldr	r3, [r7, #0]
 80006c0:	b2da      	uxtb	r2, r3
 80006c2:	4908      	ldr	r1, [pc, #32]	; (80006e4 <__NVIC_SetPriority+0x50>)
 80006c4:	79fb      	ldrb	r3, [r7, #7]
 80006c6:	f003 030f 	and.w	r3, r3, #15
 80006ca:	3b04      	subs	r3, #4
 80006cc:	0112      	lsls	r2, r2, #4
 80006ce:	b2d2      	uxtb	r2, r2
 80006d0:	440b      	add	r3, r1
 80006d2:	761a      	strb	r2, [r3, #24]
}
 80006d4:	bf00      	nop
 80006d6:	370c      	adds	r7, #12
 80006d8:	46bd      	mov	sp, r7
 80006da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006de:	4770      	bx	lr
 80006e0:	e000e100 	.word	0xe000e100
 80006e4:	e000ed00 	.word	0xe000ed00

080006e8 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80006e8:	b480      	push	{r7}
 80006ea:	b089      	sub	sp, #36	; 0x24
 80006ec:	af00      	add	r7, sp, #0
 80006ee:	60f8      	str	r0, [r7, #12]
 80006f0:	60b9      	str	r1, [r7, #8]
 80006f2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80006f4:	68fb      	ldr	r3, [r7, #12]
 80006f6:	f003 0307 	and.w	r3, r3, #7
 80006fa:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80006fc:	69fb      	ldr	r3, [r7, #28]
 80006fe:	f1c3 0307 	rsb	r3, r3, #7
 8000702:	2b04      	cmp	r3, #4
 8000704:	bf28      	it	cs
 8000706:	2304      	movcs	r3, #4
 8000708:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800070a:	69fb      	ldr	r3, [r7, #28]
 800070c:	3304      	adds	r3, #4
 800070e:	2b06      	cmp	r3, #6
 8000710:	d902      	bls.n	8000718 <NVIC_EncodePriority+0x30>
 8000712:	69fb      	ldr	r3, [r7, #28]
 8000714:	3b03      	subs	r3, #3
 8000716:	e000      	b.n	800071a <NVIC_EncodePriority+0x32>
 8000718:	2300      	movs	r3, #0
 800071a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800071c:	f04f 32ff 	mov.w	r2, #4294967295
 8000720:	69bb      	ldr	r3, [r7, #24]
 8000722:	fa02 f303 	lsl.w	r3, r2, r3
 8000726:	43da      	mvns	r2, r3
 8000728:	68bb      	ldr	r3, [r7, #8]
 800072a:	401a      	ands	r2, r3
 800072c:	697b      	ldr	r3, [r7, #20]
 800072e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000730:	f04f 31ff 	mov.w	r1, #4294967295
 8000734:	697b      	ldr	r3, [r7, #20]
 8000736:	fa01 f303 	lsl.w	r3, r1, r3
 800073a:	43d9      	mvns	r1, r3
 800073c:	687b      	ldr	r3, [r7, #4]
 800073e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000740:	4313      	orrs	r3, r2
         );
}
 8000742:	4618      	mov	r0, r3
 8000744:	3724      	adds	r7, #36	; 0x24
 8000746:	46bd      	mov	sp, r7
 8000748:	f85d 7b04 	ldr.w	r7, [sp], #4
 800074c:	4770      	bx	lr

0800074e <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800074e:	b580      	push	{r7, lr}
 8000750:	b082      	sub	sp, #8
 8000752:	af00      	add	r7, sp, #0
 8000754:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000756:	6878      	ldr	r0, [r7, #4]
 8000758:	f7ff ff4c 	bl	80005f4 <__NVIC_SetPriorityGrouping>
}
 800075c:	bf00      	nop
 800075e:	3708      	adds	r7, #8
 8000760:	46bd      	mov	sp, r7
 8000762:	bd80      	pop	{r7, pc}

08000764 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000764:	b580      	push	{r7, lr}
 8000766:	b086      	sub	sp, #24
 8000768:	af00      	add	r7, sp, #0
 800076a:	4603      	mov	r3, r0
 800076c:	60b9      	str	r1, [r7, #8]
 800076e:	607a      	str	r2, [r7, #4]
 8000770:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8000772:	2300      	movs	r3, #0
 8000774:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8000776:	f7ff ff61 	bl	800063c <__NVIC_GetPriorityGrouping>
 800077a:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800077c:	687a      	ldr	r2, [r7, #4]
 800077e:	68b9      	ldr	r1, [r7, #8]
 8000780:	6978      	ldr	r0, [r7, #20]
 8000782:	f7ff ffb1 	bl	80006e8 <NVIC_EncodePriority>
 8000786:	4602      	mov	r2, r0
 8000788:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800078c:	4611      	mov	r1, r2
 800078e:	4618      	mov	r0, r3
 8000790:	f7ff ff80 	bl	8000694 <__NVIC_SetPriority>
}
 8000794:	bf00      	nop
 8000796:	3718      	adds	r7, #24
 8000798:	46bd      	mov	sp, r7
 800079a:	bd80      	pop	{r7, pc}

0800079c <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800079c:	b580      	push	{r7, lr}
 800079e:	b082      	sub	sp, #8
 80007a0:	af00      	add	r7, sp, #0
 80007a2:	4603      	mov	r3, r0
 80007a4:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80007a6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80007aa:	4618      	mov	r0, r3
 80007ac:	f7ff ff54 	bl	8000658 <__NVIC_EnableIRQ>
}
 80007b0:	bf00      	nop
 80007b2:	3708      	adds	r7, #8
 80007b4:	46bd      	mov	sp, r7
 80007b6:	bd80      	pop	{r7, pc}

080007b8 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80007b8:	b480      	push	{r7}
 80007ba:	b087      	sub	sp, #28
 80007bc:	af00      	add	r7, sp, #0
 80007be:	6078      	str	r0, [r7, #4]
 80007c0:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80007c2:	2300      	movs	r3, #0
 80007c4:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80007c6:	e166      	b.n	8000a96 <HAL_GPIO_Init+0x2de>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 80007c8:	683b      	ldr	r3, [r7, #0]
 80007ca:	681a      	ldr	r2, [r3, #0]
 80007cc:	2101      	movs	r1, #1
 80007ce:	697b      	ldr	r3, [r7, #20]
 80007d0:	fa01 f303 	lsl.w	r3, r1, r3
 80007d4:	4013      	ands	r3, r2
 80007d6:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 80007d8:	68fb      	ldr	r3, [r7, #12]
 80007da:	2b00      	cmp	r3, #0
 80007dc:	f000 8158 	beq.w	8000a90 <HAL_GPIO_Init+0x2d8>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 80007e0:	683b      	ldr	r3, [r7, #0]
 80007e2:	685b      	ldr	r3, [r3, #4]
 80007e4:	f003 0303 	and.w	r3, r3, #3
 80007e8:	2b01      	cmp	r3, #1
 80007ea:	d005      	beq.n	80007f8 <HAL_GPIO_Init+0x40>
 80007ec:	683b      	ldr	r3, [r7, #0]
 80007ee:	685b      	ldr	r3, [r3, #4]
 80007f0:	f003 0303 	and.w	r3, r3, #3
 80007f4:	2b02      	cmp	r3, #2
 80007f6:	d130      	bne.n	800085a <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80007f8:	687b      	ldr	r3, [r7, #4]
 80007fa:	689b      	ldr	r3, [r3, #8]
 80007fc:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 80007fe:	697b      	ldr	r3, [r7, #20]
 8000800:	005b      	lsls	r3, r3, #1
 8000802:	2203      	movs	r2, #3
 8000804:	fa02 f303 	lsl.w	r3, r2, r3
 8000808:	43db      	mvns	r3, r3
 800080a:	693a      	ldr	r2, [r7, #16]
 800080c:	4013      	ands	r3, r2
 800080e:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8000810:	683b      	ldr	r3, [r7, #0]
 8000812:	68da      	ldr	r2, [r3, #12]
 8000814:	697b      	ldr	r3, [r7, #20]
 8000816:	005b      	lsls	r3, r3, #1
 8000818:	fa02 f303 	lsl.w	r3, r2, r3
 800081c:	693a      	ldr	r2, [r7, #16]
 800081e:	4313      	orrs	r3, r2
 8000820:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8000822:	687b      	ldr	r3, [r7, #4]
 8000824:	693a      	ldr	r2, [r7, #16]
 8000826:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8000828:	687b      	ldr	r3, [r7, #4]
 800082a:	685b      	ldr	r3, [r3, #4]
 800082c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 800082e:	2201      	movs	r2, #1
 8000830:	697b      	ldr	r3, [r7, #20]
 8000832:	fa02 f303 	lsl.w	r3, r2, r3
 8000836:	43db      	mvns	r3, r3
 8000838:	693a      	ldr	r2, [r7, #16]
 800083a:	4013      	ands	r3, r2
 800083c:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800083e:	683b      	ldr	r3, [r7, #0]
 8000840:	685b      	ldr	r3, [r3, #4]
 8000842:	091b      	lsrs	r3, r3, #4
 8000844:	f003 0201 	and.w	r2, r3, #1
 8000848:	697b      	ldr	r3, [r7, #20]
 800084a:	fa02 f303 	lsl.w	r3, r2, r3
 800084e:	693a      	ldr	r2, [r7, #16]
 8000850:	4313      	orrs	r3, r2
 8000852:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8000854:	687b      	ldr	r3, [r7, #4]
 8000856:	693a      	ldr	r2, [r7, #16]
 8000858:	605a      	str	r2, [r3, #4]
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800085a:	683b      	ldr	r3, [r7, #0]
 800085c:	685b      	ldr	r3, [r3, #4]
 800085e:	f003 0303 	and.w	r3, r3, #3
 8000862:	2b03      	cmp	r3, #3
 8000864:	d017      	beq.n	8000896 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        temp = GPIOx->PUPDR;
 8000866:	687b      	ldr	r3, [r7, #4]
 8000868:	68db      	ldr	r3, [r3, #12]
 800086a:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 800086c:	697b      	ldr	r3, [r7, #20]
 800086e:	005b      	lsls	r3, r3, #1
 8000870:	2203      	movs	r2, #3
 8000872:	fa02 f303 	lsl.w	r3, r2, r3
 8000876:	43db      	mvns	r3, r3
 8000878:	693a      	ldr	r2, [r7, #16]
 800087a:	4013      	ands	r3, r2
 800087c:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 800087e:	683b      	ldr	r3, [r7, #0]
 8000880:	689a      	ldr	r2, [r3, #8]
 8000882:	697b      	ldr	r3, [r7, #20]
 8000884:	005b      	lsls	r3, r3, #1
 8000886:	fa02 f303 	lsl.w	r3, r2, r3
 800088a:	693a      	ldr	r2, [r7, #16]
 800088c:	4313      	orrs	r3, r2
 800088e:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8000890:	687b      	ldr	r3, [r7, #4]
 8000892:	693a      	ldr	r2, [r7, #16]
 8000894:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000896:	683b      	ldr	r3, [r7, #0]
 8000898:	685b      	ldr	r3, [r3, #4]
 800089a:	f003 0303 	and.w	r3, r3, #3
 800089e:	2b02      	cmp	r3, #2
 80008a0:	d123      	bne.n	80008ea <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 80008a2:	697b      	ldr	r3, [r7, #20]
 80008a4:	08da      	lsrs	r2, r3, #3
 80008a6:	687b      	ldr	r3, [r7, #4]
 80008a8:	3208      	adds	r2, #8
 80008aa:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80008ae:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 80008b0:	697b      	ldr	r3, [r7, #20]
 80008b2:	f003 0307 	and.w	r3, r3, #7
 80008b6:	009b      	lsls	r3, r3, #2
 80008b8:	220f      	movs	r2, #15
 80008ba:	fa02 f303 	lsl.w	r3, r2, r3
 80008be:	43db      	mvns	r3, r3
 80008c0:	693a      	ldr	r2, [r7, #16]
 80008c2:	4013      	ands	r3, r2
 80008c4:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 80008c6:	683b      	ldr	r3, [r7, #0]
 80008c8:	691a      	ldr	r2, [r3, #16]
 80008ca:	697b      	ldr	r3, [r7, #20]
 80008cc:	f003 0307 	and.w	r3, r3, #7
 80008d0:	009b      	lsls	r3, r3, #2
 80008d2:	fa02 f303 	lsl.w	r3, r2, r3
 80008d6:	693a      	ldr	r2, [r7, #16]
 80008d8:	4313      	orrs	r3, r2
 80008da:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 80008dc:	697b      	ldr	r3, [r7, #20]
 80008de:	08da      	lsrs	r2, r3, #3
 80008e0:	687b      	ldr	r3, [r7, #4]
 80008e2:	3208      	adds	r2, #8
 80008e4:	6939      	ldr	r1, [r7, #16]
 80008e6:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80008ea:	687b      	ldr	r3, [r7, #4]
 80008ec:	681b      	ldr	r3, [r3, #0]
 80008ee:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 80008f0:	697b      	ldr	r3, [r7, #20]
 80008f2:	005b      	lsls	r3, r3, #1
 80008f4:	2203      	movs	r2, #3
 80008f6:	fa02 f303 	lsl.w	r3, r2, r3
 80008fa:	43db      	mvns	r3, r3
 80008fc:	693a      	ldr	r2, [r7, #16]
 80008fe:	4013      	ands	r3, r2
 8000900:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8000902:	683b      	ldr	r3, [r7, #0]
 8000904:	685b      	ldr	r3, [r3, #4]
 8000906:	f003 0203 	and.w	r2, r3, #3
 800090a:	697b      	ldr	r3, [r7, #20]
 800090c:	005b      	lsls	r3, r3, #1
 800090e:	fa02 f303 	lsl.w	r3, r2, r3
 8000912:	693a      	ldr	r2, [r7, #16]
 8000914:	4313      	orrs	r3, r2
 8000916:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8000918:	687b      	ldr	r3, [r7, #4]
 800091a:	693a      	ldr	r2, [r7, #16]
 800091c:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 800091e:	683b      	ldr	r3, [r7, #0]
 8000920:	685b      	ldr	r3, [r3, #4]
 8000922:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8000926:	2b00      	cmp	r3, #0
 8000928:	f000 80b2 	beq.w	8000a90 <HAL_GPIO_Init+0x2d8>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800092c:	4b61      	ldr	r3, [pc, #388]	; (8000ab4 <HAL_GPIO_Init+0x2fc>)
 800092e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000930:	4a60      	ldr	r2, [pc, #384]	; (8000ab4 <HAL_GPIO_Init+0x2fc>)
 8000932:	f043 0301 	orr.w	r3, r3, #1
 8000936:	6613      	str	r3, [r2, #96]	; 0x60
 8000938:	4b5e      	ldr	r3, [pc, #376]	; (8000ab4 <HAL_GPIO_Init+0x2fc>)
 800093a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800093c:	f003 0301 	and.w	r3, r3, #1
 8000940:	60bb      	str	r3, [r7, #8]
 8000942:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8000944:	4a5c      	ldr	r2, [pc, #368]	; (8000ab8 <HAL_GPIO_Init+0x300>)
 8000946:	697b      	ldr	r3, [r7, #20]
 8000948:	089b      	lsrs	r3, r3, #2
 800094a:	3302      	adds	r3, #2
 800094c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000950:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8000952:	697b      	ldr	r3, [r7, #20]
 8000954:	f003 0303 	and.w	r3, r3, #3
 8000958:	009b      	lsls	r3, r3, #2
 800095a:	220f      	movs	r2, #15
 800095c:	fa02 f303 	lsl.w	r3, r2, r3
 8000960:	43db      	mvns	r3, r3
 8000962:	693a      	ldr	r2, [r7, #16]
 8000964:	4013      	ands	r3, r2
 8000966:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8000968:	687b      	ldr	r3, [r7, #4]
 800096a:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 800096e:	d02b      	beq.n	80009c8 <HAL_GPIO_Init+0x210>
 8000970:	687b      	ldr	r3, [r7, #4]
 8000972:	4a52      	ldr	r2, [pc, #328]	; (8000abc <HAL_GPIO_Init+0x304>)
 8000974:	4293      	cmp	r3, r2
 8000976:	d025      	beq.n	80009c4 <HAL_GPIO_Init+0x20c>
 8000978:	687b      	ldr	r3, [r7, #4]
 800097a:	4a51      	ldr	r2, [pc, #324]	; (8000ac0 <HAL_GPIO_Init+0x308>)
 800097c:	4293      	cmp	r3, r2
 800097e:	d01f      	beq.n	80009c0 <HAL_GPIO_Init+0x208>
 8000980:	687b      	ldr	r3, [r7, #4]
 8000982:	4a50      	ldr	r2, [pc, #320]	; (8000ac4 <HAL_GPIO_Init+0x30c>)
 8000984:	4293      	cmp	r3, r2
 8000986:	d019      	beq.n	80009bc <HAL_GPIO_Init+0x204>
 8000988:	687b      	ldr	r3, [r7, #4]
 800098a:	4a4f      	ldr	r2, [pc, #316]	; (8000ac8 <HAL_GPIO_Init+0x310>)
 800098c:	4293      	cmp	r3, r2
 800098e:	d013      	beq.n	80009b8 <HAL_GPIO_Init+0x200>
 8000990:	687b      	ldr	r3, [r7, #4]
 8000992:	4a4e      	ldr	r2, [pc, #312]	; (8000acc <HAL_GPIO_Init+0x314>)
 8000994:	4293      	cmp	r3, r2
 8000996:	d00d      	beq.n	80009b4 <HAL_GPIO_Init+0x1fc>
 8000998:	687b      	ldr	r3, [r7, #4]
 800099a:	4a4d      	ldr	r2, [pc, #308]	; (8000ad0 <HAL_GPIO_Init+0x318>)
 800099c:	4293      	cmp	r3, r2
 800099e:	d007      	beq.n	80009b0 <HAL_GPIO_Init+0x1f8>
 80009a0:	687b      	ldr	r3, [r7, #4]
 80009a2:	4a4c      	ldr	r2, [pc, #304]	; (8000ad4 <HAL_GPIO_Init+0x31c>)
 80009a4:	4293      	cmp	r3, r2
 80009a6:	d101      	bne.n	80009ac <HAL_GPIO_Init+0x1f4>
 80009a8:	2307      	movs	r3, #7
 80009aa:	e00e      	b.n	80009ca <HAL_GPIO_Init+0x212>
 80009ac:	2308      	movs	r3, #8
 80009ae:	e00c      	b.n	80009ca <HAL_GPIO_Init+0x212>
 80009b0:	2306      	movs	r3, #6
 80009b2:	e00a      	b.n	80009ca <HAL_GPIO_Init+0x212>
 80009b4:	2305      	movs	r3, #5
 80009b6:	e008      	b.n	80009ca <HAL_GPIO_Init+0x212>
 80009b8:	2304      	movs	r3, #4
 80009ba:	e006      	b.n	80009ca <HAL_GPIO_Init+0x212>
 80009bc:	2303      	movs	r3, #3
 80009be:	e004      	b.n	80009ca <HAL_GPIO_Init+0x212>
 80009c0:	2302      	movs	r3, #2
 80009c2:	e002      	b.n	80009ca <HAL_GPIO_Init+0x212>
 80009c4:	2301      	movs	r3, #1
 80009c6:	e000      	b.n	80009ca <HAL_GPIO_Init+0x212>
 80009c8:	2300      	movs	r3, #0
 80009ca:	697a      	ldr	r2, [r7, #20]
 80009cc:	f002 0203 	and.w	r2, r2, #3
 80009d0:	0092      	lsls	r2, r2, #2
 80009d2:	4093      	lsls	r3, r2
 80009d4:	693a      	ldr	r2, [r7, #16]
 80009d6:	4313      	orrs	r3, r2
 80009d8:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 80009da:	4937      	ldr	r1, [pc, #220]	; (8000ab8 <HAL_GPIO_Init+0x300>)
 80009dc:	697b      	ldr	r3, [r7, #20]
 80009de:	089b      	lsrs	r3, r3, #2
 80009e0:	3302      	adds	r3, #2
 80009e2:	693a      	ldr	r2, [r7, #16]
 80009e4:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 80009e8:	4b3b      	ldr	r3, [pc, #236]	; (8000ad8 <HAL_GPIO_Init+0x320>)
 80009ea:	689b      	ldr	r3, [r3, #8]
 80009ec:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80009ee:	68fb      	ldr	r3, [r7, #12]
 80009f0:	43db      	mvns	r3, r3
 80009f2:	693a      	ldr	r2, [r7, #16]
 80009f4:	4013      	ands	r3, r2
 80009f6:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 80009f8:	683b      	ldr	r3, [r7, #0]
 80009fa:	685b      	ldr	r3, [r3, #4]
 80009fc:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8000a00:	2b00      	cmp	r3, #0
 8000a02:	d003      	beq.n	8000a0c <HAL_GPIO_Init+0x254>
        {
          temp |= iocurrent;
 8000a04:	693a      	ldr	r2, [r7, #16]
 8000a06:	68fb      	ldr	r3, [r7, #12]
 8000a08:	4313      	orrs	r3, r2
 8000a0a:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8000a0c:	4a32      	ldr	r2, [pc, #200]	; (8000ad8 <HAL_GPIO_Init+0x320>)
 8000a0e:	693b      	ldr	r3, [r7, #16]
 8000a10:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8000a12:	4b31      	ldr	r3, [pc, #196]	; (8000ad8 <HAL_GPIO_Init+0x320>)
 8000a14:	68db      	ldr	r3, [r3, #12]
 8000a16:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000a18:	68fb      	ldr	r3, [r7, #12]
 8000a1a:	43db      	mvns	r3, r3
 8000a1c:	693a      	ldr	r2, [r7, #16]
 8000a1e:	4013      	ands	r3, r2
 8000a20:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8000a22:	683b      	ldr	r3, [r7, #0]
 8000a24:	685b      	ldr	r3, [r3, #4]
 8000a26:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000a2a:	2b00      	cmp	r3, #0
 8000a2c:	d003      	beq.n	8000a36 <HAL_GPIO_Init+0x27e>
        {
          temp |= iocurrent;
 8000a2e:	693a      	ldr	r2, [r7, #16]
 8000a30:	68fb      	ldr	r3, [r7, #12]
 8000a32:	4313      	orrs	r3, r2
 8000a34:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8000a36:	4a28      	ldr	r2, [pc, #160]	; (8000ad8 <HAL_GPIO_Init+0x320>)
 8000a38:	693b      	ldr	r3, [r7, #16]
 8000a3a:	60d3      	str	r3, [r2, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 8000a3c:	4b26      	ldr	r3, [pc, #152]	; (8000ad8 <HAL_GPIO_Init+0x320>)
 8000a3e:	685b      	ldr	r3, [r3, #4]
 8000a40:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000a42:	68fb      	ldr	r3, [r7, #12]
 8000a44:	43db      	mvns	r3, r3
 8000a46:	693a      	ldr	r2, [r7, #16]
 8000a48:	4013      	ands	r3, r2
 8000a4a:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8000a4c:	683b      	ldr	r3, [r7, #0]
 8000a4e:	685b      	ldr	r3, [r3, #4]
 8000a50:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000a54:	2b00      	cmp	r3, #0
 8000a56:	d003      	beq.n	8000a60 <HAL_GPIO_Init+0x2a8>
        {
          temp |= iocurrent;
 8000a58:	693a      	ldr	r2, [r7, #16]
 8000a5a:	68fb      	ldr	r3, [r7, #12]
 8000a5c:	4313      	orrs	r3, r2
 8000a5e:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8000a60:	4a1d      	ldr	r2, [pc, #116]	; (8000ad8 <HAL_GPIO_Init+0x320>)
 8000a62:	693b      	ldr	r3, [r7, #16]
 8000a64:	6053      	str	r3, [r2, #4]

        temp = EXTI->IMR1;
 8000a66:	4b1c      	ldr	r3, [pc, #112]	; (8000ad8 <HAL_GPIO_Init+0x320>)
 8000a68:	681b      	ldr	r3, [r3, #0]
 8000a6a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000a6c:	68fb      	ldr	r3, [r7, #12]
 8000a6e:	43db      	mvns	r3, r3
 8000a70:	693a      	ldr	r2, [r7, #16]
 8000a72:	4013      	ands	r3, r2
 8000a74:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8000a76:	683b      	ldr	r3, [r7, #0]
 8000a78:	685b      	ldr	r3, [r3, #4]
 8000a7a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000a7e:	2b00      	cmp	r3, #0
 8000a80:	d003      	beq.n	8000a8a <HAL_GPIO_Init+0x2d2>
        {
          temp |= iocurrent;
 8000a82:	693a      	ldr	r2, [r7, #16]
 8000a84:	68fb      	ldr	r3, [r7, #12]
 8000a86:	4313      	orrs	r3, r2
 8000a88:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8000a8a:	4a13      	ldr	r2, [pc, #76]	; (8000ad8 <HAL_GPIO_Init+0x320>)
 8000a8c:	693b      	ldr	r3, [r7, #16]
 8000a8e:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8000a90:	697b      	ldr	r3, [r7, #20]
 8000a92:	3301      	adds	r3, #1
 8000a94:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000a96:	683b      	ldr	r3, [r7, #0]
 8000a98:	681a      	ldr	r2, [r3, #0]
 8000a9a:	697b      	ldr	r3, [r7, #20]
 8000a9c:	fa22 f303 	lsr.w	r3, r2, r3
 8000aa0:	2b00      	cmp	r3, #0
 8000aa2:	f47f ae91 	bne.w	80007c8 <HAL_GPIO_Init+0x10>
  }
}
 8000aa6:	bf00      	nop
 8000aa8:	bf00      	nop
 8000aaa:	371c      	adds	r7, #28
 8000aac:	46bd      	mov	sp, r7
 8000aae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ab2:	4770      	bx	lr
 8000ab4:	40021000 	.word	0x40021000
 8000ab8:	40010000 	.word	0x40010000
 8000abc:	48000400 	.word	0x48000400
 8000ac0:	48000800 	.word	0x48000800
 8000ac4:	48000c00 	.word	0x48000c00
 8000ac8:	48001000 	.word	0x48001000
 8000acc:	48001400 	.word	0x48001400
 8000ad0:	48001800 	.word	0x48001800
 8000ad4:	48001c00 	.word	0x48001c00
 8000ad8:	40010400 	.word	0x40010400

08000adc <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8000adc:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000ade:	b08f      	sub	sp, #60	; 0x3c
 8000ae0:	af0a      	add	r7, sp, #40	; 0x28
 8000ae2:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
#endif /* defined (USB_OTG_FS) */
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8000ae4:	687b      	ldr	r3, [r7, #4]
 8000ae6:	2b00      	cmp	r3, #0
 8000ae8:	d101      	bne.n	8000aee <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8000aea:	2301      	movs	r3, #1
 8000aec:	e116      	b.n	8000d1c <HAL_PCD_Init+0x240>

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

#if defined (USB_OTG_FS)
  USBx = hpcd->Instance;
 8000aee:	687b      	ldr	r3, [r7, #4]
 8000af0:	681b      	ldr	r3, [r3, #0]
 8000af2:	60bb      	str	r3, [r7, #8]
#endif /* defined (USB_OTG_FS) */

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8000af4:	687b      	ldr	r3, [r7, #4]
 8000af6:	f893 33bd 	ldrb.w	r3, [r3, #957]	; 0x3bd
 8000afa:	b2db      	uxtb	r3, r3
 8000afc:	2b00      	cmp	r3, #0
 8000afe:	d106      	bne.n	8000b0e <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8000b00:	687b      	ldr	r3, [r7, #4]
 8000b02:	2200      	movs	r2, #0
 8000b04:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8000b08:	6878      	ldr	r0, [r7, #4]
 8000b0a:	f006 f983 	bl	8006e14 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8000b0e:	687b      	ldr	r3, [r7, #4]
 8000b10:	2203      	movs	r2, #3
 8000b12:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd

#if defined (USB_OTG_FS)
  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 8000b16:	68bb      	ldr	r3, [r7, #8]
 8000b18:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8000b1a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8000b1e:	2b00      	cmp	r3, #0
 8000b20:	d102      	bne.n	8000b28 <HAL_PCD_Init+0x4c>
  {
    hpcd->Init.dma_enable = 0U;
 8000b22:	687b      	ldr	r3, [r7, #4]
 8000b24:	2200      	movs	r2, #0
 8000b26:	611a      	str	r2, [r3, #16]
  }
#endif /* defined (USB_OTG_FS) */

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8000b28:	687b      	ldr	r3, [r7, #4]
 8000b2a:	681b      	ldr	r3, [r3, #0]
 8000b2c:	4618      	mov	r0, r3
 8000b2e:	f003 f8f4 	bl	8003d1a <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8000b32:	687b      	ldr	r3, [r7, #4]
 8000b34:	681b      	ldr	r3, [r3, #0]
 8000b36:	603b      	str	r3, [r7, #0]
 8000b38:	687e      	ldr	r6, [r7, #4]
 8000b3a:	466d      	mov	r5, sp
 8000b3c:	f106 0410 	add.w	r4, r6, #16
 8000b40:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8000b42:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8000b44:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8000b46:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8000b48:	e894 0003 	ldmia.w	r4, {r0, r1}
 8000b4c:	e885 0003 	stmia.w	r5, {r0, r1}
 8000b50:	1d33      	adds	r3, r6, #4
 8000b52:	cb0e      	ldmia	r3, {r1, r2, r3}
 8000b54:	6838      	ldr	r0, [r7, #0]
 8000b56:	f003 f807 	bl	8003b68 <USB_CoreInit>
 8000b5a:	4603      	mov	r3, r0
 8000b5c:	2b00      	cmp	r3, #0
 8000b5e:	d005      	beq.n	8000b6c <HAL_PCD_Init+0x90>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8000b60:	687b      	ldr	r3, [r7, #4]
 8000b62:	2202      	movs	r2, #2
 8000b64:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
    return HAL_ERROR;
 8000b68:	2301      	movs	r3, #1
 8000b6a:	e0d7      	b.n	8000d1c <HAL_PCD_Init+0x240>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 8000b6c:	687b      	ldr	r3, [r7, #4]
 8000b6e:	681b      	ldr	r3, [r3, #0]
 8000b70:	2100      	movs	r1, #0
 8000b72:	4618      	mov	r0, r3
 8000b74:	f003 f8e2 	bl	8003d3c <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8000b78:	2300      	movs	r3, #0
 8000b7a:	73fb      	strb	r3, [r7, #15]
 8000b7c:	e04a      	b.n	8000c14 <HAL_PCD_Init+0x138>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8000b7e:	7bfa      	ldrb	r2, [r7, #15]
 8000b80:	6879      	ldr	r1, [r7, #4]
 8000b82:	4613      	mov	r3, r2
 8000b84:	00db      	lsls	r3, r3, #3
 8000b86:	1a9b      	subs	r3, r3, r2
 8000b88:	009b      	lsls	r3, r3, #2
 8000b8a:	440b      	add	r3, r1
 8000b8c:	333d      	adds	r3, #61	; 0x3d
 8000b8e:	2201      	movs	r2, #1
 8000b90:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8000b92:	7bfa      	ldrb	r2, [r7, #15]
 8000b94:	6879      	ldr	r1, [r7, #4]
 8000b96:	4613      	mov	r3, r2
 8000b98:	00db      	lsls	r3, r3, #3
 8000b9a:	1a9b      	subs	r3, r3, r2
 8000b9c:	009b      	lsls	r3, r3, #2
 8000b9e:	440b      	add	r3, r1
 8000ba0:	333c      	adds	r3, #60	; 0x3c
 8000ba2:	7bfa      	ldrb	r2, [r7, #15]
 8000ba4:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 8000ba6:	7bfa      	ldrb	r2, [r7, #15]
 8000ba8:	7bfb      	ldrb	r3, [r7, #15]
 8000baa:	b298      	uxth	r0, r3
 8000bac:	6879      	ldr	r1, [r7, #4]
 8000bae:	4613      	mov	r3, r2
 8000bb0:	00db      	lsls	r3, r3, #3
 8000bb2:	1a9b      	subs	r3, r3, r2
 8000bb4:	009b      	lsls	r3, r3, #2
 8000bb6:	440b      	add	r3, r1
 8000bb8:	3342      	adds	r3, #66	; 0x42
 8000bba:	4602      	mov	r2, r0
 8000bbc:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8000bbe:	7bfa      	ldrb	r2, [r7, #15]
 8000bc0:	6879      	ldr	r1, [r7, #4]
 8000bc2:	4613      	mov	r3, r2
 8000bc4:	00db      	lsls	r3, r3, #3
 8000bc6:	1a9b      	subs	r3, r3, r2
 8000bc8:	009b      	lsls	r3, r3, #2
 8000bca:	440b      	add	r3, r1
 8000bcc:	333f      	adds	r3, #63	; 0x3f
 8000bce:	2200      	movs	r2, #0
 8000bd0:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8000bd2:	7bfa      	ldrb	r2, [r7, #15]
 8000bd4:	6879      	ldr	r1, [r7, #4]
 8000bd6:	4613      	mov	r3, r2
 8000bd8:	00db      	lsls	r3, r3, #3
 8000bda:	1a9b      	subs	r3, r3, r2
 8000bdc:	009b      	lsls	r3, r3, #2
 8000bde:	440b      	add	r3, r1
 8000be0:	3344      	adds	r3, #68	; 0x44
 8000be2:	2200      	movs	r2, #0
 8000be4:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8000be6:	7bfa      	ldrb	r2, [r7, #15]
 8000be8:	6879      	ldr	r1, [r7, #4]
 8000bea:	4613      	mov	r3, r2
 8000bec:	00db      	lsls	r3, r3, #3
 8000bee:	1a9b      	subs	r3, r3, r2
 8000bf0:	009b      	lsls	r3, r3, #2
 8000bf2:	440b      	add	r3, r1
 8000bf4:	3348      	adds	r3, #72	; 0x48
 8000bf6:	2200      	movs	r2, #0
 8000bf8:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8000bfa:	7bfa      	ldrb	r2, [r7, #15]
 8000bfc:	6879      	ldr	r1, [r7, #4]
 8000bfe:	4613      	mov	r3, r2
 8000c00:	00db      	lsls	r3, r3, #3
 8000c02:	1a9b      	subs	r3, r3, r2
 8000c04:	009b      	lsls	r3, r3, #2
 8000c06:	440b      	add	r3, r1
 8000c08:	3350      	adds	r3, #80	; 0x50
 8000c0a:	2200      	movs	r2, #0
 8000c0c:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8000c0e:	7bfb      	ldrb	r3, [r7, #15]
 8000c10:	3301      	adds	r3, #1
 8000c12:	73fb      	strb	r3, [r7, #15]
 8000c14:	7bfa      	ldrb	r2, [r7, #15]
 8000c16:	687b      	ldr	r3, [r7, #4]
 8000c18:	685b      	ldr	r3, [r3, #4]
 8000c1a:	429a      	cmp	r2, r3
 8000c1c:	d3af      	bcc.n	8000b7e <HAL_PCD_Init+0xa2>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8000c1e:	2300      	movs	r3, #0
 8000c20:	73fb      	strb	r3, [r7, #15]
 8000c22:	e044      	b.n	8000cae <HAL_PCD_Init+0x1d2>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8000c24:	7bfa      	ldrb	r2, [r7, #15]
 8000c26:	6879      	ldr	r1, [r7, #4]
 8000c28:	4613      	mov	r3, r2
 8000c2a:	00db      	lsls	r3, r3, #3
 8000c2c:	1a9b      	subs	r3, r3, r2
 8000c2e:	009b      	lsls	r3, r3, #2
 8000c30:	440b      	add	r3, r1
 8000c32:	f203 13fd 	addw	r3, r3, #509	; 0x1fd
 8000c36:	2200      	movs	r2, #0
 8000c38:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8000c3a:	7bfa      	ldrb	r2, [r7, #15]
 8000c3c:	6879      	ldr	r1, [r7, #4]
 8000c3e:	4613      	mov	r3, r2
 8000c40:	00db      	lsls	r3, r3, #3
 8000c42:	1a9b      	subs	r3, r3, r2
 8000c44:	009b      	lsls	r3, r3, #2
 8000c46:	440b      	add	r3, r1
 8000c48:	f503 73fe 	add.w	r3, r3, #508	; 0x1fc
 8000c4c:	7bfa      	ldrb	r2, [r7, #15]
 8000c4e:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8000c50:	7bfa      	ldrb	r2, [r7, #15]
 8000c52:	6879      	ldr	r1, [r7, #4]
 8000c54:	4613      	mov	r3, r2
 8000c56:	00db      	lsls	r3, r3, #3
 8000c58:	1a9b      	subs	r3, r3, r2
 8000c5a:	009b      	lsls	r3, r3, #2
 8000c5c:	440b      	add	r3, r1
 8000c5e:	f203 13ff 	addw	r3, r3, #511	; 0x1ff
 8000c62:	2200      	movs	r2, #0
 8000c64:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8000c66:	7bfa      	ldrb	r2, [r7, #15]
 8000c68:	6879      	ldr	r1, [r7, #4]
 8000c6a:	4613      	mov	r3, r2
 8000c6c:	00db      	lsls	r3, r3, #3
 8000c6e:	1a9b      	subs	r3, r3, r2
 8000c70:	009b      	lsls	r3, r3, #2
 8000c72:	440b      	add	r3, r1
 8000c74:	f503 7301 	add.w	r3, r3, #516	; 0x204
 8000c78:	2200      	movs	r2, #0
 8000c7a:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8000c7c:	7bfa      	ldrb	r2, [r7, #15]
 8000c7e:	6879      	ldr	r1, [r7, #4]
 8000c80:	4613      	mov	r3, r2
 8000c82:	00db      	lsls	r3, r3, #3
 8000c84:	1a9b      	subs	r3, r3, r2
 8000c86:	009b      	lsls	r3, r3, #2
 8000c88:	440b      	add	r3, r1
 8000c8a:	f503 7302 	add.w	r3, r3, #520	; 0x208
 8000c8e:	2200      	movs	r2, #0
 8000c90:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8000c92:	7bfa      	ldrb	r2, [r7, #15]
 8000c94:	6879      	ldr	r1, [r7, #4]
 8000c96:	4613      	mov	r3, r2
 8000c98:	00db      	lsls	r3, r3, #3
 8000c9a:	1a9b      	subs	r3, r3, r2
 8000c9c:	009b      	lsls	r3, r3, #2
 8000c9e:	440b      	add	r3, r1
 8000ca0:	f503 7304 	add.w	r3, r3, #528	; 0x210
 8000ca4:	2200      	movs	r2, #0
 8000ca6:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8000ca8:	7bfb      	ldrb	r3, [r7, #15]
 8000caa:	3301      	adds	r3, #1
 8000cac:	73fb      	strb	r3, [r7, #15]
 8000cae:	7bfa      	ldrb	r2, [r7, #15]
 8000cb0:	687b      	ldr	r3, [r7, #4]
 8000cb2:	685b      	ldr	r3, [r3, #4]
 8000cb4:	429a      	cmp	r2, r3
 8000cb6:	d3b5      	bcc.n	8000c24 <HAL_PCD_Init+0x148>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8000cb8:	687b      	ldr	r3, [r7, #4]
 8000cba:	681b      	ldr	r3, [r3, #0]
 8000cbc:	603b      	str	r3, [r7, #0]
 8000cbe:	687e      	ldr	r6, [r7, #4]
 8000cc0:	466d      	mov	r5, sp
 8000cc2:	f106 0410 	add.w	r4, r6, #16
 8000cc6:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8000cc8:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8000cca:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8000ccc:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8000cce:	e894 0003 	ldmia.w	r4, {r0, r1}
 8000cd2:	e885 0003 	stmia.w	r5, {r0, r1}
 8000cd6:	1d33      	adds	r3, r6, #4
 8000cd8:	cb0e      	ldmia	r3, {r1, r2, r3}
 8000cda:	6838      	ldr	r0, [r7, #0]
 8000cdc:	f003 f87a 	bl	8003dd4 <USB_DevInit>
 8000ce0:	4603      	mov	r3, r0
 8000ce2:	2b00      	cmp	r3, #0
 8000ce4:	d005      	beq.n	8000cf2 <HAL_PCD_Init+0x216>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8000ce6:	687b      	ldr	r3, [r7, #4]
 8000ce8:	2202      	movs	r2, #2
 8000cea:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
    return HAL_ERROR;
 8000cee:	2301      	movs	r3, #1
 8000cf0:	e014      	b.n	8000d1c <HAL_PCD_Init+0x240>
  }

  hpcd->USB_Address = 0U;
 8000cf2:	687b      	ldr	r3, [r7, #4]
 8000cf4:	2200      	movs	r2, #0
 8000cf6:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hpcd->State = HAL_PCD_STATE_READY;
 8000cfa:	687b      	ldr	r3, [r7, #4]
 8000cfc:	2201      	movs	r2, #1
 8000cfe:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd

  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 8000d02:	687b      	ldr	r3, [r7, #4]
 8000d04:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000d06:	2b01      	cmp	r3, #1
 8000d08:	d102      	bne.n	8000d10 <HAL_PCD_Init+0x234>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 8000d0a:	6878      	ldr	r0, [r7, #4]
 8000d0c:	f000 ff56 	bl	8001bbc <HAL_PCDEx_ActivateLPM>
  }

  (void)USB_DevDisconnect(hpcd->Instance);
 8000d10:	687b      	ldr	r3, [r7, #4]
 8000d12:	681b      	ldr	r3, [r3, #0]
 8000d14:	4618      	mov	r0, r3
 8000d16:	f004 f84c 	bl	8004db2 <USB_DevDisconnect>

  return HAL_OK;
 8000d1a:	2300      	movs	r3, #0
}
 8000d1c:	4618      	mov	r0, r3
 8000d1e:	3714      	adds	r7, #20
 8000d20:	46bd      	mov	sp, r7
 8000d22:	bdf0      	pop	{r4, r5, r6, r7, pc}

08000d24 <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 8000d24:	b580      	push	{r7, lr}
 8000d26:	b084      	sub	sp, #16
 8000d28:	af00      	add	r7, sp, #0
 8000d2a:	6078      	str	r0, [r7, #4]
#if defined (USB_OTG_FS)
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8000d2c:	687b      	ldr	r3, [r7, #4]
 8000d2e:	681b      	ldr	r3, [r3, #0]
 8000d30:	60fb      	str	r3, [r7, #12]
#endif /* defined (USB_OTG_FS) */

  __HAL_LOCK(hpcd);
 8000d32:	687b      	ldr	r3, [r7, #4]
 8000d34:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 8000d38:	2b01      	cmp	r3, #1
 8000d3a:	d101      	bne.n	8000d40 <HAL_PCD_Start+0x1c>
 8000d3c:	2302      	movs	r3, #2
 8000d3e:	e01c      	b.n	8000d7a <HAL_PCD_Start+0x56>
 8000d40:	687b      	ldr	r3, [r7, #4]
 8000d42:	2201      	movs	r2, #1
 8000d44:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
#if defined (USB_OTG_FS)
  if (hpcd->Init.battery_charging_enable == 1U)
 8000d48:	687b      	ldr	r3, [r7, #4]
 8000d4a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000d4c:	2b01      	cmp	r3, #1
 8000d4e:	d105      	bne.n	8000d5c <HAL_PCD_Start+0x38>
  {
    /* Enable USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8000d50:	68fb      	ldr	r3, [r7, #12]
 8000d52:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8000d54:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8000d58:	68fb      	ldr	r3, [r7, #12]
 8000d5a:	639a      	str	r2, [r3, #56]	; 0x38
  }
#endif /* defined (USB_OTG_FS) */
  __HAL_PCD_ENABLE(hpcd);
 8000d5c:	687b      	ldr	r3, [r7, #4]
 8000d5e:	681b      	ldr	r3, [r3, #0]
 8000d60:	4618      	mov	r0, r3
 8000d62:	f002 ffc9 	bl	8003cf8 <USB_EnableGlobalInt>
  (void)USB_DevConnect(hpcd->Instance);
 8000d66:	687b      	ldr	r3, [r7, #4]
 8000d68:	681b      	ldr	r3, [r3, #0]
 8000d6a:	4618      	mov	r0, r3
 8000d6c:	f004 f800 	bl	8004d70 <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 8000d70:	687b      	ldr	r3, [r7, #4]
 8000d72:	2200      	movs	r2, #0
 8000d74:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return HAL_OK;
 8000d78:	2300      	movs	r3, #0
}
 8000d7a:	4618      	mov	r0, r3
 8000d7c:	3710      	adds	r7, #16
 8000d7e:	46bd      	mov	sp, r7
 8000d80:	bd80      	pop	{r7, pc}

08000d82 <HAL_PCD_IRQHandler>:
  * @brief  Handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 8000d82:	b590      	push	{r4, r7, lr}
 8000d84:	b08d      	sub	sp, #52	; 0x34
 8000d86:	af00      	add	r7, sp, #0
 8000d88:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8000d8a:	687b      	ldr	r3, [r7, #4]
 8000d8c:	681b      	ldr	r3, [r3, #0]
 8000d8e:	623b      	str	r3, [r7, #32]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8000d90:	6a3b      	ldr	r3, [r7, #32]
 8000d92:	61fb      	str	r3, [r7, #28]
  uint32_t epnum;
  uint32_t fifoemptymsk;
  uint32_t temp;

  /* ensure that we are in device mode */
  if (USB_GetMode(hpcd->Instance) == USB_OTG_MODE_DEVICE)
 8000d94:	687b      	ldr	r3, [r7, #4]
 8000d96:	681b      	ldr	r3, [r3, #0]
 8000d98:	4618      	mov	r0, r3
 8000d9a:	f004 f8be 	bl	8004f1a <USB_GetMode>
 8000d9e:	4603      	mov	r3, r0
 8000da0:	2b00      	cmp	r3, #0
 8000da2:	f040 8384 	bne.w	80014ae <HAL_PCD_IRQHandler+0x72c>
  {
    /* avoid spurious interrupt */
    if (__HAL_PCD_IS_INVALID_INTERRUPT(hpcd))
 8000da6:	687b      	ldr	r3, [r7, #4]
 8000da8:	681b      	ldr	r3, [r3, #0]
 8000daa:	4618      	mov	r0, r3
 8000dac:	f004 f822 	bl	8004df4 <USB_ReadInterrupts>
 8000db0:	4603      	mov	r3, r0
 8000db2:	2b00      	cmp	r3, #0
 8000db4:	f000 837a 	beq.w	80014ac <HAL_PCD_IRQHandler+0x72a>
    {
      return;
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_MMIS))
 8000db8:	687b      	ldr	r3, [r7, #4]
 8000dba:	681b      	ldr	r3, [r3, #0]
 8000dbc:	4618      	mov	r0, r3
 8000dbe:	f004 f819 	bl	8004df4 <USB_ReadInterrupts>
 8000dc2:	4603      	mov	r3, r0
 8000dc4:	f003 0302 	and.w	r3, r3, #2
 8000dc8:	2b02      	cmp	r3, #2
 8000dca:	d107      	bne.n	8000ddc <HAL_PCD_IRQHandler+0x5a>
    {
      /* incorrect mode, acknowledge the interrupt */
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_MMIS);
 8000dcc:	687b      	ldr	r3, [r7, #4]
 8000dce:	681b      	ldr	r3, [r3, #0]
 8000dd0:	695a      	ldr	r2, [r3, #20]
 8000dd2:	687b      	ldr	r3, [r7, #4]
 8000dd4:	681b      	ldr	r3, [r3, #0]
 8000dd6:	f002 0202 	and.w	r2, r2, #2
 8000dda:	615a      	str	r2, [r3, #20]
    }

    /* Handle RxQLevel Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_RXFLVL))
 8000ddc:	687b      	ldr	r3, [r7, #4]
 8000dde:	681b      	ldr	r3, [r3, #0]
 8000de0:	4618      	mov	r0, r3
 8000de2:	f004 f807 	bl	8004df4 <USB_ReadInterrupts>
 8000de6:	4603      	mov	r3, r0
 8000de8:	f003 0310 	and.w	r3, r3, #16
 8000dec:	2b10      	cmp	r3, #16
 8000dee:	d161      	bne.n	8000eb4 <HAL_PCD_IRQHandler+0x132>
    {
      USB_MASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8000df0:	687b      	ldr	r3, [r7, #4]
 8000df2:	681b      	ldr	r3, [r3, #0]
 8000df4:	699a      	ldr	r2, [r3, #24]
 8000df6:	687b      	ldr	r3, [r7, #4]
 8000df8:	681b      	ldr	r3, [r3, #0]
 8000dfa:	f022 0210 	bic.w	r2, r2, #16
 8000dfe:	619a      	str	r2, [r3, #24]

      temp = USBx->GRXSTSP;
 8000e00:	6a3b      	ldr	r3, [r7, #32]
 8000e02:	6a1b      	ldr	r3, [r3, #32]
 8000e04:	61bb      	str	r3, [r7, #24]

      ep = &hpcd->OUT_ep[temp & USB_OTG_GRXSTSP_EPNUM];
 8000e06:	69bb      	ldr	r3, [r7, #24]
 8000e08:	f003 020f 	and.w	r2, r3, #15
 8000e0c:	4613      	mov	r3, r2
 8000e0e:	00db      	lsls	r3, r3, #3
 8000e10:	1a9b      	subs	r3, r3, r2
 8000e12:	009b      	lsls	r3, r3, #2
 8000e14:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 8000e18:	687a      	ldr	r2, [r7, #4]
 8000e1a:	4413      	add	r3, r2
 8000e1c:	3304      	adds	r3, #4
 8000e1e:	617b      	str	r3, [r7, #20]

      if (((temp & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_DATA_UPDT)
 8000e20:	69bb      	ldr	r3, [r7, #24]
 8000e22:	0c5b      	lsrs	r3, r3, #17
 8000e24:	f003 030f 	and.w	r3, r3, #15
 8000e28:	2b02      	cmp	r3, #2
 8000e2a:	d124      	bne.n	8000e76 <HAL_PCD_IRQHandler+0xf4>
      {
        if ((temp & USB_OTG_GRXSTSP_BCNT) != 0U)
 8000e2c:	69ba      	ldr	r2, [r7, #24]
 8000e2e:	f647 73f0 	movw	r3, #32752	; 0x7ff0
 8000e32:	4013      	ands	r3, r2
 8000e34:	2b00      	cmp	r3, #0
 8000e36:	d035      	beq.n	8000ea4 <HAL_PCD_IRQHandler+0x122>
        {
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 8000e38:	697b      	ldr	r3, [r7, #20]
 8000e3a:	68d9      	ldr	r1, [r3, #12]
                               (uint16_t)((temp & USB_OTG_GRXSTSP_BCNT) >> 4));
 8000e3c:	69bb      	ldr	r3, [r7, #24]
 8000e3e:	091b      	lsrs	r3, r3, #4
 8000e40:	b29b      	uxth	r3, r3
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 8000e42:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8000e46:	b29b      	uxth	r3, r3
 8000e48:	461a      	mov	r2, r3
 8000e4a:	6a38      	ldr	r0, [r7, #32]
 8000e4c:	f003 fe3e 	bl	8004acc <USB_ReadPacket>

          ep->xfer_buff += (temp & USB_OTG_GRXSTSP_BCNT) >> 4;
 8000e50:	697b      	ldr	r3, [r7, #20]
 8000e52:	68da      	ldr	r2, [r3, #12]
 8000e54:	69bb      	ldr	r3, [r7, #24]
 8000e56:	091b      	lsrs	r3, r3, #4
 8000e58:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8000e5c:	441a      	add	r2, r3
 8000e5e:	697b      	ldr	r3, [r7, #20]
 8000e60:	60da      	str	r2, [r3, #12]
          ep->xfer_count += (temp & USB_OTG_GRXSTSP_BCNT) >> 4;
 8000e62:	697b      	ldr	r3, [r7, #20]
 8000e64:	699a      	ldr	r2, [r3, #24]
 8000e66:	69bb      	ldr	r3, [r7, #24]
 8000e68:	091b      	lsrs	r3, r3, #4
 8000e6a:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8000e6e:	441a      	add	r2, r3
 8000e70:	697b      	ldr	r3, [r7, #20]
 8000e72:	619a      	str	r2, [r3, #24]
 8000e74:	e016      	b.n	8000ea4 <HAL_PCD_IRQHandler+0x122>
        }
      }
      else if (((temp & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_SETUP_UPDT)
 8000e76:	69bb      	ldr	r3, [r7, #24]
 8000e78:	0c5b      	lsrs	r3, r3, #17
 8000e7a:	f003 030f 	and.w	r3, r3, #15
 8000e7e:	2b06      	cmp	r3, #6
 8000e80:	d110      	bne.n	8000ea4 <HAL_PCD_IRQHandler+0x122>
      {
        (void)USB_ReadPacket(USBx, (uint8_t *)hpcd->Setup, 8U);
 8000e82:	687b      	ldr	r3, [r7, #4]
 8000e84:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 8000e88:	2208      	movs	r2, #8
 8000e8a:	4619      	mov	r1, r3
 8000e8c:	6a38      	ldr	r0, [r7, #32]
 8000e8e:	f003 fe1d 	bl	8004acc <USB_ReadPacket>
        ep->xfer_count += (temp & USB_OTG_GRXSTSP_BCNT) >> 4;
 8000e92:	697b      	ldr	r3, [r7, #20]
 8000e94:	699a      	ldr	r2, [r3, #24]
 8000e96:	69bb      	ldr	r3, [r7, #24]
 8000e98:	091b      	lsrs	r3, r3, #4
 8000e9a:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8000e9e:	441a      	add	r2, r3
 8000ea0:	697b      	ldr	r3, [r7, #20]
 8000ea2:	619a      	str	r2, [r3, #24]
      else
      {
        /* ... */
      }

      USB_UNMASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8000ea4:	687b      	ldr	r3, [r7, #4]
 8000ea6:	681b      	ldr	r3, [r3, #0]
 8000ea8:	699a      	ldr	r2, [r3, #24]
 8000eaa:	687b      	ldr	r3, [r7, #4]
 8000eac:	681b      	ldr	r3, [r3, #0]
 8000eae:	f042 0210 	orr.w	r2, r2, #16
 8000eb2:	619a      	str	r2, [r3, #24]
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OEPINT))
 8000eb4:	687b      	ldr	r3, [r7, #4]
 8000eb6:	681b      	ldr	r3, [r3, #0]
 8000eb8:	4618      	mov	r0, r3
 8000eba:	f003 ff9b 	bl	8004df4 <USB_ReadInterrupts>
 8000ebe:	4603      	mov	r3, r0
 8000ec0:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8000ec4:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8000ec8:	d16e      	bne.n	8000fa8 <HAL_PCD_IRQHandler+0x226>
    {
      epnum = 0U;
 8000eca:	2300      	movs	r3, #0
 8000ecc:	627b      	str	r3, [r7, #36]	; 0x24

      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllOutEpInterrupt(hpcd->Instance);
 8000ece:	687b      	ldr	r3, [r7, #4]
 8000ed0:	681b      	ldr	r3, [r3, #0]
 8000ed2:	4618      	mov	r0, r3
 8000ed4:	f003 ffa1 	bl	8004e1a <USB_ReadDevAllOutEpInterrupt>
 8000ed8:	62b8      	str	r0, [r7, #40]	; 0x28

      while (ep_intr != 0U)
 8000eda:	e062      	b.n	8000fa2 <HAL_PCD_IRQHandler+0x220>
      {
        if ((ep_intr & 0x1U) != 0U)
 8000edc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000ede:	f003 0301 	and.w	r3, r3, #1
 8000ee2:	2b00      	cmp	r3, #0
 8000ee4:	d057      	beq.n	8000f96 <HAL_PCD_IRQHandler+0x214>
        {
          epint = USB_ReadDevOutEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 8000ee6:	687b      	ldr	r3, [r7, #4]
 8000ee8:	681b      	ldr	r3, [r3, #0]
 8000eea:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8000eec:	b2d2      	uxtb	r2, r2
 8000eee:	4611      	mov	r1, r2
 8000ef0:	4618      	mov	r0, r3
 8000ef2:	f003 ffc6 	bl	8004e82 <USB_ReadDevOutEPInterrupt>
 8000ef6:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DOEPINT_XFRC) == USB_OTG_DOEPINT_XFRC)
 8000ef8:	693b      	ldr	r3, [r7, #16]
 8000efa:	f003 0301 	and.w	r3, r3, #1
 8000efe:	2b00      	cmp	r3, #0
 8000f00:	d00c      	beq.n	8000f1c <HAL_PCD_IRQHandler+0x19a>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_XFRC);
 8000f02:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000f04:	015a      	lsls	r2, r3, #5
 8000f06:	69fb      	ldr	r3, [r7, #28]
 8000f08:	4413      	add	r3, r2
 8000f0a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8000f0e:	461a      	mov	r2, r3
 8000f10:	2301      	movs	r3, #1
 8000f12:	6093      	str	r3, [r2, #8]
            (void)PCD_EP_OutXfrComplete_int(hpcd, epnum);
 8000f14:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8000f16:	6878      	ldr	r0, [r7, #4]
 8000f18:	f000 fd76 	bl	8001a08 <PCD_EP_OutXfrComplete_int>
          }

          if ((epint & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP)
 8000f1c:	693b      	ldr	r3, [r7, #16]
 8000f1e:	f003 0308 	and.w	r3, r3, #8
 8000f22:	2b00      	cmp	r3, #0
 8000f24:	d00c      	beq.n	8000f40 <HAL_PCD_IRQHandler+0x1be>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STUP);
 8000f26:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000f28:	015a      	lsls	r2, r3, #5
 8000f2a:	69fb      	ldr	r3, [r7, #28]
 8000f2c:	4413      	add	r3, r2
 8000f2e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8000f32:	461a      	mov	r2, r3
 8000f34:	2308      	movs	r3, #8
 8000f36:	6093      	str	r3, [r2, #8]
            /* Class B setup phase done for previous decoded setup */
            (void)PCD_EP_OutSetupPacket_int(hpcd, epnum);
 8000f38:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8000f3a:	6878      	ldr	r0, [r7, #4]
 8000f3c:	f000 fdb2 	bl	8001aa4 <PCD_EP_OutSetupPacket_int>
          }

          if ((epint & USB_OTG_DOEPINT_OTEPDIS) == USB_OTG_DOEPINT_OTEPDIS)
 8000f40:	693b      	ldr	r3, [r7, #16]
 8000f42:	f003 0310 	and.w	r3, r3, #16
 8000f46:	2b00      	cmp	r3, #0
 8000f48:	d008      	beq.n	8000f5c <HAL_PCD_IRQHandler+0x1da>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPDIS);
 8000f4a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000f4c:	015a      	lsls	r2, r3, #5
 8000f4e:	69fb      	ldr	r3, [r7, #28]
 8000f50:	4413      	add	r3, r2
 8000f52:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8000f56:	461a      	mov	r2, r3
 8000f58:	2310      	movs	r3, #16
 8000f5a:	6093      	str	r3, [r2, #8]
          }

          /* Clear Status Phase Received interrupt */
          if ((epint & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 8000f5c:	693b      	ldr	r3, [r7, #16]
 8000f5e:	f003 0320 	and.w	r3, r3, #32
 8000f62:	2b00      	cmp	r3, #0
 8000f64:	d008      	beq.n	8000f78 <HAL_PCD_IRQHandler+0x1f6>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8000f66:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000f68:	015a      	lsls	r2, r3, #5
 8000f6a:	69fb      	ldr	r3, [r7, #28]
 8000f6c:	4413      	add	r3, r2
 8000f6e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8000f72:	461a      	mov	r2, r3
 8000f74:	2320      	movs	r3, #32
 8000f76:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT NAK interrupt */
          if ((epint & USB_OTG_DOEPINT_NAK) == USB_OTG_DOEPINT_NAK)
 8000f78:	693b      	ldr	r3, [r7, #16]
 8000f7a:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8000f7e:	2b00      	cmp	r3, #0
 8000f80:	d009      	beq.n	8000f96 <HAL_PCD_IRQHandler+0x214>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_NAK);
 8000f82:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000f84:	015a      	lsls	r2, r3, #5
 8000f86:	69fb      	ldr	r3, [r7, #28]
 8000f88:	4413      	add	r3, r2
 8000f8a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8000f8e:	461a      	mov	r2, r3
 8000f90:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000f94:	6093      	str	r3, [r2, #8]
          }
        }
        epnum++;
 8000f96:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000f98:	3301      	adds	r3, #1
 8000f9a:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 8000f9c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000f9e:	085b      	lsrs	r3, r3, #1
 8000fa0:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 8000fa2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000fa4:	2b00      	cmp	r3, #0
 8000fa6:	d199      	bne.n	8000edc <HAL_PCD_IRQHandler+0x15a>
      }
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IEPINT))
 8000fa8:	687b      	ldr	r3, [r7, #4]
 8000faa:	681b      	ldr	r3, [r3, #0]
 8000fac:	4618      	mov	r0, r3
 8000fae:	f003 ff21 	bl	8004df4 <USB_ReadInterrupts>
 8000fb2:	4603      	mov	r3, r0
 8000fb4:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8000fb8:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8000fbc:	f040 808c 	bne.w	80010d8 <HAL_PCD_IRQHandler+0x356>
    {
      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllInEpInterrupt(hpcd->Instance);
 8000fc0:	687b      	ldr	r3, [r7, #4]
 8000fc2:	681b      	ldr	r3, [r3, #0]
 8000fc4:	4618      	mov	r0, r3
 8000fc6:	f003 ff42 	bl	8004e4e <USB_ReadDevAllInEpInterrupt>
 8000fca:	62b8      	str	r0, [r7, #40]	; 0x28

      epnum = 0U;
 8000fcc:	2300      	movs	r3, #0
 8000fce:	627b      	str	r3, [r7, #36]	; 0x24

      while (ep_intr != 0U)
 8000fd0:	e07e      	b.n	80010d0 <HAL_PCD_IRQHandler+0x34e>
      {
        if ((ep_intr & 0x1U) != 0U) /* In ITR */
 8000fd2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000fd4:	f003 0301 	and.w	r3, r3, #1
 8000fd8:	2b00      	cmp	r3, #0
 8000fda:	d073      	beq.n	80010c4 <HAL_PCD_IRQHandler+0x342>
        {
          epint = USB_ReadDevInEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 8000fdc:	687b      	ldr	r3, [r7, #4]
 8000fde:	681b      	ldr	r3, [r3, #0]
 8000fe0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8000fe2:	b2d2      	uxtb	r2, r2
 8000fe4:	4611      	mov	r1, r2
 8000fe6:	4618      	mov	r0, r3
 8000fe8:	f003 ff69 	bl	8004ebe <USB_ReadDevInEPInterrupt>
 8000fec:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DIEPINT_XFRC) == USB_OTG_DIEPINT_XFRC)
 8000fee:	693b      	ldr	r3, [r7, #16]
 8000ff0:	f003 0301 	and.w	r3, r3, #1
 8000ff4:	2b00      	cmp	r3, #0
 8000ff6:	d020      	beq.n	800103a <HAL_PCD_IRQHandler+0x2b8>
          {
            fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 8000ff8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000ffa:	f003 030f 	and.w	r3, r3, #15
 8000ffe:	2201      	movs	r2, #1
 8001000:	fa02 f303 	lsl.w	r3, r2, r3
 8001004:	60fb      	str	r3, [r7, #12]
            USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 8001006:	69fb      	ldr	r3, [r7, #28]
 8001008:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800100c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800100e:	68fb      	ldr	r3, [r7, #12]
 8001010:	43db      	mvns	r3, r3
 8001012:	69f9      	ldr	r1, [r7, #28]
 8001014:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8001018:	4013      	ands	r3, r2
 800101a:	634b      	str	r3, [r1, #52]	; 0x34

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_XFRC);
 800101c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800101e:	015a      	lsls	r2, r3, #5
 8001020:	69fb      	ldr	r3, [r7, #28]
 8001022:	4413      	add	r3, r2
 8001024:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8001028:	461a      	mov	r2, r3
 800102a:	2301      	movs	r3, #1
 800102c:	6093      	str	r3, [r2, #8]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataInStageCallback(hpcd, (uint8_t)epnum);
#else
            HAL_PCD_DataInStageCallback(hpcd, (uint8_t)epnum);
 800102e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001030:	b2db      	uxtb	r3, r3
 8001032:	4619      	mov	r1, r3
 8001034:	6878      	ldr	r0, [r7, #4]
 8001036:	f005 ffac 	bl	8006f92 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }
          if ((epint & USB_OTG_DIEPINT_TOC) == USB_OTG_DIEPINT_TOC)
 800103a:	693b      	ldr	r3, [r7, #16]
 800103c:	f003 0308 	and.w	r3, r3, #8
 8001040:	2b00      	cmp	r3, #0
 8001042:	d008      	beq.n	8001056 <HAL_PCD_IRQHandler+0x2d4>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_TOC);
 8001044:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001046:	015a      	lsls	r2, r3, #5
 8001048:	69fb      	ldr	r3, [r7, #28]
 800104a:	4413      	add	r3, r2
 800104c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8001050:	461a      	mov	r2, r3
 8001052:	2308      	movs	r3, #8
 8001054:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_ITTXFE) == USB_OTG_DIEPINT_ITTXFE)
 8001056:	693b      	ldr	r3, [r7, #16]
 8001058:	f003 0310 	and.w	r3, r3, #16
 800105c:	2b00      	cmp	r3, #0
 800105e:	d008      	beq.n	8001072 <HAL_PCD_IRQHandler+0x2f0>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_ITTXFE);
 8001060:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001062:	015a      	lsls	r2, r3, #5
 8001064:	69fb      	ldr	r3, [r7, #28]
 8001066:	4413      	add	r3, r2
 8001068:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800106c:	461a      	mov	r2, r3
 800106e:	2310      	movs	r3, #16
 8001070:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_INEPNE) == USB_OTG_DIEPINT_INEPNE)
 8001072:	693b      	ldr	r3, [r7, #16]
 8001074:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001078:	2b00      	cmp	r3, #0
 800107a:	d008      	beq.n	800108e <HAL_PCD_IRQHandler+0x30c>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_INEPNE);
 800107c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800107e:	015a      	lsls	r2, r3, #5
 8001080:	69fb      	ldr	r3, [r7, #28]
 8001082:	4413      	add	r3, r2
 8001084:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8001088:	461a      	mov	r2, r3
 800108a:	2340      	movs	r3, #64	; 0x40
 800108c:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_EPDISD) == USB_OTG_DIEPINT_EPDISD)
 800108e:	693b      	ldr	r3, [r7, #16]
 8001090:	f003 0302 	and.w	r3, r3, #2
 8001094:	2b00      	cmp	r3, #0
 8001096:	d00c      	beq.n	80010b2 <HAL_PCD_IRQHandler+0x330>
          {
            (void)USB_FlushTxFifo(USBx, epnum);
 8001098:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800109a:	6a38      	ldr	r0, [r7, #32]
 800109c:	f002 ffe6 	bl	800406c <USB_FlushTxFifo>
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_EPDISD);
 80010a0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80010a2:	015a      	lsls	r2, r3, #5
 80010a4:	69fb      	ldr	r3, [r7, #28]
 80010a6:	4413      	add	r3, r2
 80010a8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80010ac:	461a      	mov	r2, r3
 80010ae:	2302      	movs	r3, #2
 80010b0:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_TXFE) == USB_OTG_DIEPINT_TXFE)
 80010b2:	693b      	ldr	r3, [r7, #16]
 80010b4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80010b8:	2b00      	cmp	r3, #0
 80010ba:	d003      	beq.n	80010c4 <HAL_PCD_IRQHandler+0x342>
          {
            (void)PCD_WriteEmptyTxFifo(hpcd, epnum);
 80010bc:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80010be:	6878      	ldr	r0, [r7, #4]
 80010c0:	f000 fc1a 	bl	80018f8 <PCD_WriteEmptyTxFifo>
          }
        }
        epnum++;
 80010c4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80010c6:	3301      	adds	r3, #1
 80010c8:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 80010ca:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80010cc:	085b      	lsrs	r3, r3, #1
 80010ce:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 80010d0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80010d2:	2b00      	cmp	r3, #0
 80010d4:	f47f af7d 	bne.w	8000fd2 <HAL_PCD_IRQHandler+0x250>
      }
    }

    /* Handle Resume Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT))
 80010d8:	687b      	ldr	r3, [r7, #4]
 80010da:	681b      	ldr	r3, [r3, #0]
 80010dc:	4618      	mov	r0, r3
 80010de:	f003 fe89 	bl	8004df4 <USB_ReadInterrupts>
 80010e2:	4603      	mov	r3, r0
 80010e4:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80010e8:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80010ec:	d122      	bne.n	8001134 <HAL_PCD_IRQHandler+0x3b2>
    {
      /* Clear the Remote Wake-up Signaling */
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 80010ee:	69fb      	ldr	r3, [r7, #28]
 80010f0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80010f4:	685b      	ldr	r3, [r3, #4]
 80010f6:	69fa      	ldr	r2, [r7, #28]
 80010f8:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80010fc:	f023 0301 	bic.w	r3, r3, #1
 8001100:	6053      	str	r3, [r2, #4]

      if (hpcd->LPM_State == LPM_L1)
 8001102:	687b      	ldr	r3, [r7, #4]
 8001104:	f893 33f4 	ldrb.w	r3, [r3, #1012]	; 0x3f4
 8001108:	2b01      	cmp	r3, #1
 800110a:	d108      	bne.n	800111e <HAL_PCD_IRQHandler+0x39c>
      {
        hpcd->LPM_State = LPM_L0;
 800110c:	687b      	ldr	r3, [r7, #4]
 800110e:	2200      	movs	r2, #0
 8001110:	f883 23f4 	strb.w	r2, [r3, #1012]	; 0x3f4

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L0_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 8001114:	2100      	movs	r1, #0
 8001116:	6878      	ldr	r0, [r7, #4]
 8001118:	f006 fa52 	bl	80075c0 <HAL_PCDEx_LPM_Callback>
 800111c:	e002      	b.n	8001124 <HAL_PCD_IRQHandler+0x3a2>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->ResumeCallback(hpcd);
#else
        HAL_PCD_ResumeCallback(hpcd);
 800111e:	6878      	ldr	r0, [r7, #4]
 8001120:	f005 ffa4 	bl	800706c <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT);
 8001124:	687b      	ldr	r3, [r7, #4]
 8001126:	681b      	ldr	r3, [r3, #0]
 8001128:	695a      	ldr	r2, [r3, #20]
 800112a:	687b      	ldr	r3, [r7, #4]
 800112c:	681b      	ldr	r3, [r3, #0]
 800112e:	f002 4200 	and.w	r2, r2, #2147483648	; 0x80000000
 8001132:	615a      	str	r2, [r3, #20]
    }

    /* Handle Suspend Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP))
 8001134:	687b      	ldr	r3, [r7, #4]
 8001136:	681b      	ldr	r3, [r3, #0]
 8001138:	4618      	mov	r0, r3
 800113a:	f003 fe5b 	bl	8004df4 <USB_ReadInterrupts>
 800113e:	4603      	mov	r3, r0
 8001140:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8001144:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8001148:	d112      	bne.n	8001170 <HAL_PCD_IRQHandler+0x3ee>
    {
      if ((USBx_DEVICE->DSTS & USB_OTG_DSTS_SUSPSTS) == USB_OTG_DSTS_SUSPSTS)
 800114a:	69fb      	ldr	r3, [r7, #28]
 800114c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8001150:	689b      	ldr	r3, [r3, #8]
 8001152:	f003 0301 	and.w	r3, r3, #1
 8001156:	2b01      	cmp	r3, #1
 8001158:	d102      	bne.n	8001160 <HAL_PCD_IRQHandler+0x3de>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 800115a:	6878      	ldr	r0, [r7, #4]
 800115c:	f005 ff60 	bl	8007020 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP);
 8001160:	687b      	ldr	r3, [r7, #4]
 8001162:	681b      	ldr	r3, [r3, #0]
 8001164:	695a      	ldr	r2, [r3, #20]
 8001166:	687b      	ldr	r3, [r7, #4]
 8001168:	681b      	ldr	r3, [r3, #0]
 800116a:	f402 6200 	and.w	r2, r2, #2048	; 0x800
 800116e:	615a      	str	r2, [r3, #20]
    }

    /* Handle LPM Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_LPMINT))
 8001170:	687b      	ldr	r3, [r7, #4]
 8001172:	681b      	ldr	r3, [r3, #0]
 8001174:	4618      	mov	r0, r3
 8001176:	f003 fe3d 	bl	8004df4 <USB_ReadInterrupts>
 800117a:	4603      	mov	r3, r0
 800117c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8001180:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8001184:	d121      	bne.n	80011ca <HAL_PCD_IRQHandler+0x448>
    {
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_LPMINT);
 8001186:	687b      	ldr	r3, [r7, #4]
 8001188:	681b      	ldr	r3, [r3, #0]
 800118a:	695a      	ldr	r2, [r3, #20]
 800118c:	687b      	ldr	r3, [r7, #4]
 800118e:	681b      	ldr	r3, [r3, #0]
 8001190:	f002 6200 	and.w	r2, r2, #134217728	; 0x8000000
 8001194:	615a      	str	r2, [r3, #20]

      if (hpcd->LPM_State == LPM_L0)
 8001196:	687b      	ldr	r3, [r7, #4]
 8001198:	f893 33f4 	ldrb.w	r3, [r3, #1012]	; 0x3f4
 800119c:	2b00      	cmp	r3, #0
 800119e:	d111      	bne.n	80011c4 <HAL_PCD_IRQHandler+0x442>
      {
        hpcd->LPM_State = LPM_L1;
 80011a0:	687b      	ldr	r3, [r7, #4]
 80011a2:	2201      	movs	r2, #1
 80011a4:	f883 23f4 	strb.w	r2, [r3, #1012]	; 0x3f4
        hpcd->BESL = (hpcd->Instance->GLPMCFG & USB_OTG_GLPMCFG_BESL) >> 2U;
 80011a8:	687b      	ldr	r3, [r7, #4]
 80011aa:	681b      	ldr	r3, [r3, #0]
 80011ac:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80011ae:	089b      	lsrs	r3, r3, #2
 80011b0:	f003 020f 	and.w	r2, r3, #15
 80011b4:	687b      	ldr	r3, [r7, #4]
 80011b6:	f8c3 23f8 	str.w	r2, [r3, #1016]	; 0x3f8

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L1_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L1_ACTIVE);
 80011ba:	2101      	movs	r1, #1
 80011bc:	6878      	ldr	r0, [r7, #4]
 80011be:	f006 f9ff 	bl	80075c0 <HAL_PCDEx_LPM_Callback>
 80011c2:	e002      	b.n	80011ca <HAL_PCD_IRQHandler+0x448>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 80011c4:	6878      	ldr	r0, [r7, #4]
 80011c6:	f005 ff2b 	bl	8007020 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }

    /* Handle Reset Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBRST))
 80011ca:	687b      	ldr	r3, [r7, #4]
 80011cc:	681b      	ldr	r3, [r3, #0]
 80011ce:	4618      	mov	r0, r3
 80011d0:	f003 fe10 	bl	8004df4 <USB_ReadInterrupts>
 80011d4:	4603      	mov	r3, r0
 80011d6:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80011da:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80011de:	f040 80b5 	bne.w	800134c <HAL_PCD_IRQHandler+0x5ca>
    {
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 80011e2:	69fb      	ldr	r3, [r7, #28]
 80011e4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80011e8:	685b      	ldr	r3, [r3, #4]
 80011ea:	69fa      	ldr	r2, [r7, #28]
 80011ec:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80011f0:	f023 0301 	bic.w	r3, r3, #1
 80011f4:	6053      	str	r3, [r2, #4]
      (void)USB_FlushTxFifo(hpcd->Instance, 0x10U);
 80011f6:	687b      	ldr	r3, [r7, #4]
 80011f8:	681b      	ldr	r3, [r3, #0]
 80011fa:	2110      	movs	r1, #16
 80011fc:	4618      	mov	r0, r3
 80011fe:	f002 ff35 	bl	800406c <USB_FlushTxFifo>

      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001202:	2300      	movs	r3, #0
 8001204:	62fb      	str	r3, [r7, #44]	; 0x2c
 8001206:	e046      	b.n	8001296 <HAL_PCD_IRQHandler+0x514>
      {
        USBx_INEP(i)->DIEPINT = 0xFB7FU;
 8001208:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800120a:	015a      	lsls	r2, r3, #5
 800120c:	69fb      	ldr	r3, [r7, #28]
 800120e:	4413      	add	r3, r2
 8001210:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8001214:	461a      	mov	r2, r3
 8001216:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 800121a:	6093      	str	r3, [r2, #8]
        USBx_INEP(i)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 800121c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800121e:	015a      	lsls	r2, r3, #5
 8001220:	69fb      	ldr	r3, [r7, #28]
 8001222:	4413      	add	r3, r2
 8001224:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8001228:	681b      	ldr	r3, [r3, #0]
 800122a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800122c:	0151      	lsls	r1, r2, #5
 800122e:	69fa      	ldr	r2, [r7, #28]
 8001230:	440a      	add	r2, r1
 8001232:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8001236:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 800123a:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPINT = 0xFB7FU;
 800123c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800123e:	015a      	lsls	r2, r3, #5
 8001240:	69fb      	ldr	r3, [r7, #28]
 8001242:	4413      	add	r3, r2
 8001244:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8001248:	461a      	mov	r2, r3
 800124a:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 800124e:	6093      	str	r3, [r2, #8]
        USBx_OUTEP(i)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 8001250:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001252:	015a      	lsls	r2, r3, #5
 8001254:	69fb      	ldr	r3, [r7, #28]
 8001256:	4413      	add	r3, r2
 8001258:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800125c:	681b      	ldr	r3, [r3, #0]
 800125e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8001260:	0151      	lsls	r1, r2, #5
 8001262:	69fa      	ldr	r2, [r7, #28]
 8001264:	440a      	add	r2, r1
 8001266:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800126a:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 800126e:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 8001270:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001272:	015a      	lsls	r2, r3, #5
 8001274:	69fb      	ldr	r3, [r7, #28]
 8001276:	4413      	add	r3, r2
 8001278:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800127c:	681b      	ldr	r3, [r3, #0]
 800127e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8001280:	0151      	lsls	r1, r2, #5
 8001282:	69fa      	ldr	r2, [r7, #28]
 8001284:	440a      	add	r2, r1
 8001286:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800128a:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 800128e:	6013      	str	r3, [r2, #0]
      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001290:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001292:	3301      	adds	r3, #1
 8001294:	62fb      	str	r3, [r7, #44]	; 0x2c
 8001296:	687b      	ldr	r3, [r7, #4]
 8001298:	685b      	ldr	r3, [r3, #4]
 800129a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800129c:	429a      	cmp	r2, r3
 800129e:	d3b3      	bcc.n	8001208 <HAL_PCD_IRQHandler+0x486>
      }
      USBx_DEVICE->DAINTMSK |= 0x10001U;
 80012a0:	69fb      	ldr	r3, [r7, #28]
 80012a2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80012a6:	69db      	ldr	r3, [r3, #28]
 80012a8:	69fa      	ldr	r2, [r7, #28]
 80012aa:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80012ae:	f043 1301 	orr.w	r3, r3, #65537	; 0x10001
 80012b2:	61d3      	str	r3, [r2, #28]

      if (hpcd->Init.use_dedicated_ep1 != 0U)
 80012b4:	687b      	ldr	r3, [r7, #4]
 80012b6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80012b8:	2b00      	cmp	r3, #0
 80012ba:	d016      	beq.n	80012ea <HAL_PCD_IRQHandler+0x568>
      {
        USBx_DEVICE->DOUTEP1MSK |= USB_OTG_DOEPMSK_STUPM |
 80012bc:	69fb      	ldr	r3, [r7, #28]
 80012be:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80012c2:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80012c6:	69fa      	ldr	r2, [r7, #28]
 80012c8:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80012cc:	f043 030b 	orr.w	r3, r3, #11
 80012d0:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
                                   USB_OTG_DOEPMSK_XFRCM |
                                   USB_OTG_DOEPMSK_EPDM;

        USBx_DEVICE->DINEP1MSK |= USB_OTG_DIEPMSK_TOM |
 80012d4:	69fb      	ldr	r3, [r7, #28]
 80012d6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80012da:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80012dc:	69fa      	ldr	r2, [r7, #28]
 80012de:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80012e2:	f043 030b 	orr.w	r3, r3, #11
 80012e6:	6453      	str	r3, [r2, #68]	; 0x44
 80012e8:	e015      	b.n	8001316 <HAL_PCD_IRQHandler+0x594>
                                  USB_OTG_DIEPMSK_XFRCM |
                                  USB_OTG_DIEPMSK_EPDM;
      }
      else
      {
        USBx_DEVICE->DOEPMSK |= USB_OTG_DOEPMSK_STUPM |
 80012ea:	69fb      	ldr	r3, [r7, #28]
 80012ec:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80012f0:	695b      	ldr	r3, [r3, #20]
 80012f2:	69fa      	ldr	r2, [r7, #28]
 80012f4:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80012f8:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 80012fc:	f043 032b 	orr.w	r3, r3, #43	; 0x2b
 8001300:	6153      	str	r3, [r2, #20]
                                USB_OTG_DOEPMSK_XFRCM |
                                USB_OTG_DOEPMSK_EPDM |
                                USB_OTG_DOEPMSK_OTEPSPRM |
                                USB_OTG_DOEPMSK_NAKM;

        USBx_DEVICE->DIEPMSK |= USB_OTG_DIEPMSK_TOM |
 8001302:	69fb      	ldr	r3, [r7, #28]
 8001304:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8001308:	691b      	ldr	r3, [r3, #16]
 800130a:	69fa      	ldr	r2, [r7, #28]
 800130c:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8001310:	f043 030b 	orr.w	r3, r3, #11
 8001314:	6113      	str	r3, [r2, #16]
                                USB_OTG_DIEPMSK_XFRCM |
                                USB_OTG_DIEPMSK_EPDM;
      }

      /* Set Default Address to 0 */
      USBx_DEVICE->DCFG &= ~USB_OTG_DCFG_DAD;
 8001316:	69fb      	ldr	r3, [r7, #28]
 8001318:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800131c:	681b      	ldr	r3, [r3, #0]
 800131e:	69fa      	ldr	r2, [r7, #28]
 8001320:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8001324:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 8001328:	6013      	str	r3, [r2, #0]

      /* setup EP0 to receive SETUP packets */
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t *)hpcd->Setup);
 800132a:	687b      	ldr	r3, [r7, #4]
 800132c:	681a      	ldr	r2, [r3, #0]
 800132e:	687b      	ldr	r3, [r7, #4]
 8001330:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 8001334:	4619      	mov	r1, r3
 8001336:	4610      	mov	r0, r2
 8001338:	f003 fe20 	bl	8004f7c <USB_EP0_OutStart>

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBRST);
 800133c:	687b      	ldr	r3, [r7, #4]
 800133e:	681b      	ldr	r3, [r3, #0]
 8001340:	695a      	ldr	r2, [r3, #20]
 8001342:	687b      	ldr	r3, [r7, #4]
 8001344:	681b      	ldr	r3, [r3, #0]
 8001346:	f402 5280 	and.w	r2, r2, #4096	; 0x1000
 800134a:	615a      	str	r2, [r3, #20]
    }

    /* Handle Enumeration done Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE))
 800134c:	687b      	ldr	r3, [r7, #4]
 800134e:	681b      	ldr	r3, [r3, #0]
 8001350:	4618      	mov	r0, r3
 8001352:	f003 fd4f 	bl	8004df4 <USB_ReadInterrupts>
 8001356:	4603      	mov	r3, r0
 8001358:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800135c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8001360:	d124      	bne.n	80013ac <HAL_PCD_IRQHandler+0x62a>
    {
      (void)USB_ActivateSetup(hpcd->Instance);
 8001362:	687b      	ldr	r3, [r7, #4]
 8001364:	681b      	ldr	r3, [r3, #0]
 8001366:	4618      	mov	r0, r3
 8001368:	f003 fde5 	bl	8004f36 <USB_ActivateSetup>
      hpcd->Init.speed = USB_GetDevSpeed(hpcd->Instance);
 800136c:	687b      	ldr	r3, [r7, #4]
 800136e:	681b      	ldr	r3, [r3, #0]
 8001370:	4618      	mov	r0, r3
 8001372:	f002 fef4 	bl	800415e <USB_GetDevSpeed>
 8001376:	4603      	mov	r3, r0
 8001378:	461a      	mov	r2, r3
 800137a:	687b      	ldr	r3, [r7, #4]
 800137c:	60da      	str	r2, [r3, #12]

      /* Set USB Turnaround time */
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 800137e:	687b      	ldr	r3, [r7, #4]
 8001380:	681c      	ldr	r4, [r3, #0]
 8001382:	f001 faf1 	bl	8002968 <HAL_RCC_GetHCLKFreq>
 8001386:	4601      	mov	r1, r0
                                  HAL_RCC_GetHCLKFreq(),
                                  (uint8_t)hpcd->Init.speed);
 8001388:	687b      	ldr	r3, [r7, #4]
 800138a:	68db      	ldr	r3, [r3, #12]
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 800138c:	b2db      	uxtb	r3, r3
 800138e:	461a      	mov	r2, r3
 8001390:	4620      	mov	r0, r4
 8001392:	f002 fc15 	bl	8003bc0 <USB_SetTurnaroundTime>

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ResetCallback(hpcd);
#else
      HAL_PCD_ResetCallback(hpcd);
 8001396:	6878      	ldr	r0, [r7, #4]
 8001398:	f005 fe23 	bl	8006fe2 <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE);
 800139c:	687b      	ldr	r3, [r7, #4]
 800139e:	681b      	ldr	r3, [r3, #0]
 80013a0:	695a      	ldr	r2, [r3, #20]
 80013a2:	687b      	ldr	r3, [r7, #4]
 80013a4:	681b      	ldr	r3, [r3, #0]
 80013a6:	f402 5200 	and.w	r2, r2, #8192	; 0x2000
 80013aa:	615a      	str	r2, [r3, #20]
    }

    /* Handle SOF Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SOF))
 80013ac:	687b      	ldr	r3, [r7, #4]
 80013ae:	681b      	ldr	r3, [r3, #0]
 80013b0:	4618      	mov	r0, r3
 80013b2:	f003 fd1f 	bl	8004df4 <USB_ReadInterrupts>
 80013b6:	4603      	mov	r3, r0
 80013b8:	f003 0308 	and.w	r3, r3, #8
 80013bc:	2b08      	cmp	r3, #8
 80013be:	d10a      	bne.n	80013d6 <HAL_PCD_IRQHandler+0x654>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->SOFCallback(hpcd);
#else
      HAL_PCD_SOFCallback(hpcd);
 80013c0:	6878      	ldr	r0, [r7, #4]
 80013c2:	f005 fe00 	bl	8006fc6 <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SOF);
 80013c6:	687b      	ldr	r3, [r7, #4]
 80013c8:	681b      	ldr	r3, [r3, #0]
 80013ca:	695a      	ldr	r2, [r3, #20]
 80013cc:	687b      	ldr	r3, [r7, #4]
 80013ce:	681b      	ldr	r3, [r3, #0]
 80013d0:	f002 0208 	and.w	r2, r2, #8
 80013d4:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO IN Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR))
 80013d6:	687b      	ldr	r3, [r7, #4]
 80013d8:	681b      	ldr	r3, [r3, #0]
 80013da:	4618      	mov	r0, r3
 80013dc:	f003 fd0a 	bl	8004df4 <USB_ReadInterrupts>
 80013e0:	4603      	mov	r3, r0
 80013e2:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80013e6:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80013ea:	d10f      	bne.n	800140c <HAL_PCD_IRQHandler+0x68a>
    {
      /* Keep application checking the corresponding Iso IN endpoint
      causing the incomplete Interrupt */
      epnum = 0U;
 80013ec:	2300      	movs	r3, #0
 80013ee:	627b      	str	r3, [r7, #36]	; 0x24

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
 80013f0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80013f2:	b2db      	uxtb	r3, r3
 80013f4:	4619      	mov	r1, r3
 80013f6:	6878      	ldr	r0, [r7, #4]
 80013f8:	f005 fe72 	bl	80070e0 <HAL_PCD_ISOINIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR);
 80013fc:	687b      	ldr	r3, [r7, #4]
 80013fe:	681b      	ldr	r3, [r3, #0]
 8001400:	695a      	ldr	r2, [r3, #20]
 8001402:	687b      	ldr	r3, [r7, #4]
 8001404:	681b      	ldr	r3, [r3, #0]
 8001406:	f402 1280 	and.w	r2, r2, #1048576	; 0x100000
 800140a:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO OUT Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 800140c:	687b      	ldr	r3, [r7, #4]
 800140e:	681b      	ldr	r3, [r3, #0]
 8001410:	4618      	mov	r0, r3
 8001412:	f003 fcef 	bl	8004df4 <USB_ReadInterrupts>
 8001416:	4603      	mov	r3, r0
 8001418:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800141c:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8001420:	d10f      	bne.n	8001442 <HAL_PCD_IRQHandler+0x6c0>
    {
      /* Keep application checking the corresponding Iso OUT endpoint
      causing the incomplete Interrupt */
      epnum = 0U;
 8001422:	2300      	movs	r3, #0
 8001424:	627b      	str	r3, [r7, #36]	; 0x24

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
 8001426:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001428:	b2db      	uxtb	r3, r3
 800142a:	4619      	mov	r1, r3
 800142c:	6878      	ldr	r0, [r7, #4]
 800142e:	f005 fe45 	bl	80070bc <HAL_PCD_ISOOUTIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 8001432:	687b      	ldr	r3, [r7, #4]
 8001434:	681b      	ldr	r3, [r3, #0]
 8001436:	695a      	ldr	r2, [r3, #20]
 8001438:	687b      	ldr	r3, [r7, #4]
 800143a:	681b      	ldr	r3, [r3, #0]
 800143c:	f402 1200 	and.w	r2, r2, #2097152	; 0x200000
 8001440:	615a      	str	r2, [r3, #20]
    }

    /* Handle Connection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT))
 8001442:	687b      	ldr	r3, [r7, #4]
 8001444:	681b      	ldr	r3, [r3, #0]
 8001446:	4618      	mov	r0, r3
 8001448:	f003 fcd4 	bl	8004df4 <USB_ReadInterrupts>
 800144c:	4603      	mov	r3, r0
 800144e:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8001452:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001456:	d10a      	bne.n	800146e <HAL_PCD_IRQHandler+0x6ec>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ConnectCallback(hpcd);
#else
      HAL_PCD_ConnectCallback(hpcd);
 8001458:	6878      	ldr	r0, [r7, #4]
 800145a:	f005 fe53 	bl	8007104 <HAL_PCD_ConnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT);
 800145e:	687b      	ldr	r3, [r7, #4]
 8001460:	681b      	ldr	r3, [r3, #0]
 8001462:	695a      	ldr	r2, [r3, #20]
 8001464:	687b      	ldr	r3, [r7, #4]
 8001466:	681b      	ldr	r3, [r3, #0]
 8001468:	f002 4280 	and.w	r2, r2, #1073741824	; 0x40000000
 800146c:	615a      	str	r2, [r3, #20]
    }

    /* Handle Disconnection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OTGINT))
 800146e:	687b      	ldr	r3, [r7, #4]
 8001470:	681b      	ldr	r3, [r3, #0]
 8001472:	4618      	mov	r0, r3
 8001474:	f003 fcbe 	bl	8004df4 <USB_ReadInterrupts>
 8001478:	4603      	mov	r3, r0
 800147a:	f003 0304 	and.w	r3, r3, #4
 800147e:	2b04      	cmp	r3, #4
 8001480:	d115      	bne.n	80014ae <HAL_PCD_IRQHandler+0x72c>
    {
      temp = hpcd->Instance->GOTGINT;
 8001482:	687b      	ldr	r3, [r7, #4]
 8001484:	681b      	ldr	r3, [r3, #0]
 8001486:	685b      	ldr	r3, [r3, #4]
 8001488:	61bb      	str	r3, [r7, #24]

      if ((temp & USB_OTG_GOTGINT_SEDET) == USB_OTG_GOTGINT_SEDET)
 800148a:	69bb      	ldr	r3, [r7, #24]
 800148c:	f003 0304 	and.w	r3, r3, #4
 8001490:	2b00      	cmp	r3, #0
 8001492:	d002      	beq.n	800149a <HAL_PCD_IRQHandler+0x718>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DisconnectCallback(hpcd);
#else
        HAL_PCD_DisconnectCallback(hpcd);
 8001494:	6878      	ldr	r0, [r7, #4]
 8001496:	f005 fe43 	bl	8007120 <HAL_PCD_DisconnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      hpcd->Instance->GOTGINT |= temp;
 800149a:	687b      	ldr	r3, [r7, #4]
 800149c:	681b      	ldr	r3, [r3, #0]
 800149e:	6859      	ldr	r1, [r3, #4]
 80014a0:	687b      	ldr	r3, [r7, #4]
 80014a2:	681b      	ldr	r3, [r3, #0]
 80014a4:	69ba      	ldr	r2, [r7, #24]
 80014a6:	430a      	orrs	r2, r1
 80014a8:	605a      	str	r2, [r3, #4]
 80014aa:	e000      	b.n	80014ae <HAL_PCD_IRQHandler+0x72c>
      return;
 80014ac:	bf00      	nop
    }
  }
}
 80014ae:	3734      	adds	r7, #52	; 0x34
 80014b0:	46bd      	mov	sp, r7
 80014b2:	bd90      	pop	{r4, r7, pc}

080014b4 <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 80014b4:	b580      	push	{r7, lr}
 80014b6:	b082      	sub	sp, #8
 80014b8:	af00      	add	r7, sp, #0
 80014ba:	6078      	str	r0, [r7, #4]
 80014bc:	460b      	mov	r3, r1
 80014be:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 80014c0:	687b      	ldr	r3, [r7, #4]
 80014c2:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 80014c6:	2b01      	cmp	r3, #1
 80014c8:	d101      	bne.n	80014ce <HAL_PCD_SetAddress+0x1a>
 80014ca:	2302      	movs	r3, #2
 80014cc:	e013      	b.n	80014f6 <HAL_PCD_SetAddress+0x42>
 80014ce:	687b      	ldr	r3, [r7, #4]
 80014d0:	2201      	movs	r2, #1
 80014d2:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  hpcd->USB_Address = address;
 80014d6:	687b      	ldr	r3, [r7, #4]
 80014d8:	78fa      	ldrb	r2, [r7, #3]
 80014da:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  (void)USB_SetDevAddress(hpcd->Instance, address);
 80014de:	687b      	ldr	r3, [r7, #4]
 80014e0:	681b      	ldr	r3, [r3, #0]
 80014e2:	78fa      	ldrb	r2, [r7, #3]
 80014e4:	4611      	mov	r1, r2
 80014e6:	4618      	mov	r0, r3
 80014e8:	f003 fc1c 	bl	8004d24 <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 80014ec:	687b      	ldr	r3, [r7, #4]
 80014ee:	2200      	movs	r2, #0
 80014f0:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return HAL_OK;
 80014f4:	2300      	movs	r3, #0
}
 80014f6:	4618      	mov	r0, r3
 80014f8:	3708      	adds	r7, #8
 80014fa:	46bd      	mov	sp, r7
 80014fc:	bd80      	pop	{r7, pc}

080014fe <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 80014fe:	b580      	push	{r7, lr}
 8001500:	b084      	sub	sp, #16
 8001502:	af00      	add	r7, sp, #0
 8001504:	6078      	str	r0, [r7, #4]
 8001506:	4608      	mov	r0, r1
 8001508:	4611      	mov	r1, r2
 800150a:	461a      	mov	r2, r3
 800150c:	4603      	mov	r3, r0
 800150e:	70fb      	strb	r3, [r7, #3]
 8001510:	460b      	mov	r3, r1
 8001512:	803b      	strh	r3, [r7, #0]
 8001514:	4613      	mov	r3, r2
 8001516:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef  ret = HAL_OK;
 8001518:	2300      	movs	r3, #0
 800151a:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 800151c:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8001520:	2b00      	cmp	r3, #0
 8001522:	da0f      	bge.n	8001544 <HAL_PCD_EP_Open+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8001524:	78fb      	ldrb	r3, [r7, #3]
 8001526:	f003 020f 	and.w	r2, r3, #15
 800152a:	4613      	mov	r3, r2
 800152c:	00db      	lsls	r3, r3, #3
 800152e:	1a9b      	subs	r3, r3, r2
 8001530:	009b      	lsls	r3, r3, #2
 8001532:	3338      	adds	r3, #56	; 0x38
 8001534:	687a      	ldr	r2, [r7, #4]
 8001536:	4413      	add	r3, r2
 8001538:	3304      	adds	r3, #4
 800153a:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 800153c:	68fb      	ldr	r3, [r7, #12]
 800153e:	2201      	movs	r2, #1
 8001540:	705a      	strb	r2, [r3, #1]
 8001542:	e00f      	b.n	8001564 <HAL_PCD_EP_Open+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8001544:	78fb      	ldrb	r3, [r7, #3]
 8001546:	f003 020f 	and.w	r2, r3, #15
 800154a:	4613      	mov	r3, r2
 800154c:	00db      	lsls	r3, r3, #3
 800154e:	1a9b      	subs	r3, r3, r2
 8001550:	009b      	lsls	r3, r3, #2
 8001552:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 8001556:	687a      	ldr	r2, [r7, #4]
 8001558:	4413      	add	r3, r2
 800155a:	3304      	adds	r3, #4
 800155c:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 800155e:	68fb      	ldr	r3, [r7, #12]
 8001560:	2200      	movs	r2, #0
 8001562:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 8001564:	78fb      	ldrb	r3, [r7, #3]
 8001566:	f003 030f 	and.w	r3, r3, #15
 800156a:	b2da      	uxtb	r2, r3
 800156c:	68fb      	ldr	r3, [r7, #12]
 800156e:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = ep_mps;
 8001570:	883a      	ldrh	r2, [r7, #0]
 8001572:	68fb      	ldr	r3, [r7, #12]
 8001574:	609a      	str	r2, [r3, #8]
  ep->type = ep_type;
 8001576:	68fb      	ldr	r3, [r7, #12]
 8001578:	78ba      	ldrb	r2, [r7, #2]
 800157a:	70da      	strb	r2, [r3, #3]

  if (ep->is_in != 0U)
 800157c:	68fb      	ldr	r3, [r7, #12]
 800157e:	785b      	ldrb	r3, [r3, #1]
 8001580:	2b00      	cmp	r3, #0
 8001582:	d004      	beq.n	800158e <HAL_PCD_EP_Open+0x90>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 8001584:	68fb      	ldr	r3, [r7, #12]
 8001586:	781b      	ldrb	r3, [r3, #0]
 8001588:	b29a      	uxth	r2, r3
 800158a:	68fb      	ldr	r3, [r7, #12]
 800158c:	80da      	strh	r2, [r3, #6]
  }
  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 800158e:	78bb      	ldrb	r3, [r7, #2]
 8001590:	2b02      	cmp	r3, #2
 8001592:	d102      	bne.n	800159a <HAL_PCD_EP_Open+0x9c>
  {
    ep->data_pid_start = 0U;
 8001594:	68fb      	ldr	r3, [r7, #12]
 8001596:	2200      	movs	r2, #0
 8001598:	711a      	strb	r2, [r3, #4]
  }

  __HAL_LOCK(hpcd);
 800159a:	687b      	ldr	r3, [r7, #4]
 800159c:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 80015a0:	2b01      	cmp	r3, #1
 80015a2:	d101      	bne.n	80015a8 <HAL_PCD_EP_Open+0xaa>
 80015a4:	2302      	movs	r3, #2
 80015a6:	e00e      	b.n	80015c6 <HAL_PCD_EP_Open+0xc8>
 80015a8:	687b      	ldr	r3, [r7, #4]
 80015aa:	2201      	movs	r2, #1
 80015ac:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 80015b0:	687b      	ldr	r3, [r7, #4]
 80015b2:	681b      	ldr	r3, [r3, #0]
 80015b4:	68f9      	ldr	r1, [r7, #12]
 80015b6:	4618      	mov	r0, r3
 80015b8:	f002 fdf0 	bl	800419c <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 80015bc:	687b      	ldr	r3, [r7, #4]
 80015be:	2200      	movs	r2, #0
 80015c0:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return ret;
 80015c4:	7afb      	ldrb	r3, [r7, #11]
}
 80015c6:	4618      	mov	r0, r3
 80015c8:	3710      	adds	r7, #16
 80015ca:	46bd      	mov	sp, r7
 80015cc:	bd80      	pop	{r7, pc}

080015ce <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80015ce:	b580      	push	{r7, lr}
 80015d0:	b084      	sub	sp, #16
 80015d2:	af00      	add	r7, sp, #0
 80015d4:	6078      	str	r0, [r7, #4]
 80015d6:	460b      	mov	r3, r1
 80015d8:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 80015da:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80015de:	2b00      	cmp	r3, #0
 80015e0:	da0f      	bge.n	8001602 <HAL_PCD_EP_Close+0x34>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80015e2:	78fb      	ldrb	r3, [r7, #3]
 80015e4:	f003 020f 	and.w	r2, r3, #15
 80015e8:	4613      	mov	r3, r2
 80015ea:	00db      	lsls	r3, r3, #3
 80015ec:	1a9b      	subs	r3, r3, r2
 80015ee:	009b      	lsls	r3, r3, #2
 80015f0:	3338      	adds	r3, #56	; 0x38
 80015f2:	687a      	ldr	r2, [r7, #4]
 80015f4:	4413      	add	r3, r2
 80015f6:	3304      	adds	r3, #4
 80015f8:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80015fa:	68fb      	ldr	r3, [r7, #12]
 80015fc:	2201      	movs	r2, #1
 80015fe:	705a      	strb	r2, [r3, #1]
 8001600:	e00f      	b.n	8001622 <HAL_PCD_EP_Close+0x54>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8001602:	78fb      	ldrb	r3, [r7, #3]
 8001604:	f003 020f 	and.w	r2, r3, #15
 8001608:	4613      	mov	r3, r2
 800160a:	00db      	lsls	r3, r3, #3
 800160c:	1a9b      	subs	r3, r3, r2
 800160e:	009b      	lsls	r3, r3, #2
 8001610:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 8001614:	687a      	ldr	r2, [r7, #4]
 8001616:	4413      	add	r3, r2
 8001618:	3304      	adds	r3, #4
 800161a:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 800161c:	68fb      	ldr	r3, [r7, #12]
 800161e:	2200      	movs	r2, #0
 8001620:	705a      	strb	r2, [r3, #1]
  }
  ep->num   = ep_addr & EP_ADDR_MSK;
 8001622:	78fb      	ldrb	r3, [r7, #3]
 8001624:	f003 030f 	and.w	r3, r3, #15
 8001628:	b2da      	uxtb	r2, r3
 800162a:	68fb      	ldr	r3, [r7, #12]
 800162c:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 800162e:	687b      	ldr	r3, [r7, #4]
 8001630:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 8001634:	2b01      	cmp	r3, #1
 8001636:	d101      	bne.n	800163c <HAL_PCD_EP_Close+0x6e>
 8001638:	2302      	movs	r3, #2
 800163a:	e00e      	b.n	800165a <HAL_PCD_EP_Close+0x8c>
 800163c:	687b      	ldr	r3, [r7, #4]
 800163e:	2201      	movs	r2, #1
 8001640:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 8001644:	687b      	ldr	r3, [r7, #4]
 8001646:	681b      	ldr	r3, [r3, #0]
 8001648:	68f9      	ldr	r1, [r7, #12]
 800164a:	4618      	mov	r0, r3
 800164c:	f002 fe2e 	bl	80042ac <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8001650:	687b      	ldr	r3, [r7, #4]
 8001652:	2200      	movs	r2, #0
 8001654:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  return HAL_OK;
 8001658:	2300      	movs	r3, #0
}
 800165a:	4618      	mov	r0, r3
 800165c:	3710      	adds	r7, #16
 800165e:	46bd      	mov	sp, r7
 8001660:	bd80      	pop	{r7, pc}

08001662 <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8001662:	b580      	push	{r7, lr}
 8001664:	b086      	sub	sp, #24
 8001666:	af00      	add	r7, sp, #0
 8001668:	60f8      	str	r0, [r7, #12]
 800166a:	607a      	str	r2, [r7, #4]
 800166c:	603b      	str	r3, [r7, #0]
 800166e:	460b      	mov	r3, r1
 8001670:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8001672:	7afb      	ldrb	r3, [r7, #11]
 8001674:	f003 020f 	and.w	r2, r3, #15
 8001678:	4613      	mov	r3, r2
 800167a:	00db      	lsls	r3, r3, #3
 800167c:	1a9b      	subs	r3, r3, r2
 800167e:	009b      	lsls	r3, r3, #2
 8001680:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 8001684:	68fa      	ldr	r2, [r7, #12]
 8001686:	4413      	add	r3, r2
 8001688:	3304      	adds	r3, #4
 800168a:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 800168c:	697b      	ldr	r3, [r7, #20]
 800168e:	687a      	ldr	r2, [r7, #4]
 8001690:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 8001692:	697b      	ldr	r3, [r7, #20]
 8001694:	683a      	ldr	r2, [r7, #0]
 8001696:	615a      	str	r2, [r3, #20]
  ep->xfer_count = 0U;
 8001698:	697b      	ldr	r3, [r7, #20]
 800169a:	2200      	movs	r2, #0
 800169c:	619a      	str	r2, [r3, #24]
  ep->is_in = 0U;
 800169e:	697b      	ldr	r3, [r7, #20]
 80016a0:	2200      	movs	r2, #0
 80016a2:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 80016a4:	7afb      	ldrb	r3, [r7, #11]
 80016a6:	f003 030f 	and.w	r3, r3, #15
 80016aa:	b2da      	uxtb	r2, r3
 80016ac:	697b      	ldr	r3, [r7, #20]
 80016ae:	701a      	strb	r2, [r3, #0]

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 80016b0:	7afb      	ldrb	r3, [r7, #11]
 80016b2:	f003 030f 	and.w	r3, r3, #15
 80016b6:	2b00      	cmp	r3, #0
 80016b8:	d106      	bne.n	80016c8 <HAL_PCD_EP_Receive+0x66>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep);
 80016ba:	68fb      	ldr	r3, [r7, #12]
 80016bc:	681b      	ldr	r3, [r3, #0]
 80016be:	6979      	ldr	r1, [r7, #20]
 80016c0:	4618      	mov	r0, r3
 80016c2:	f003 f8ab 	bl	800481c <USB_EP0StartXfer>
 80016c6:	e005      	b.n	80016d4 <HAL_PCD_EP_Receive+0x72>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep);
 80016c8:	68fb      	ldr	r3, [r7, #12]
 80016ca:	681b      	ldr	r3, [r3, #0]
 80016cc:	6979      	ldr	r1, [r7, #20]
 80016ce:	4618      	mov	r0, r3
 80016d0:	f002 fec8 	bl	8004464 <USB_EPStartXfer>
  }

  return HAL_OK;
 80016d4:	2300      	movs	r3, #0
}
 80016d6:	4618      	mov	r0, r3
 80016d8:	3718      	adds	r7, #24
 80016da:	46bd      	mov	sp, r7
 80016dc:	bd80      	pop	{r7, pc}

080016de <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80016de:	b480      	push	{r7}
 80016e0:	b083      	sub	sp, #12
 80016e2:	af00      	add	r7, sp, #0
 80016e4:	6078      	str	r0, [r7, #4]
 80016e6:	460b      	mov	r3, r1
 80016e8:	70fb      	strb	r3, [r7, #3]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 80016ea:	78fb      	ldrb	r3, [r7, #3]
 80016ec:	f003 020f 	and.w	r2, r3, #15
 80016f0:	6879      	ldr	r1, [r7, #4]
 80016f2:	4613      	mov	r3, r2
 80016f4:	00db      	lsls	r3, r3, #3
 80016f6:	1a9b      	subs	r3, r3, r2
 80016f8:	009b      	lsls	r3, r3, #2
 80016fa:	440b      	add	r3, r1
 80016fc:	f503 7305 	add.w	r3, r3, #532	; 0x214
 8001700:	681b      	ldr	r3, [r3, #0]
}
 8001702:	4618      	mov	r0, r3
 8001704:	370c      	adds	r7, #12
 8001706:	46bd      	mov	sp, r7
 8001708:	f85d 7b04 	ldr.w	r7, [sp], #4
 800170c:	4770      	bx	lr

0800170e <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 800170e:	b580      	push	{r7, lr}
 8001710:	b086      	sub	sp, #24
 8001712:	af00      	add	r7, sp, #0
 8001714:	60f8      	str	r0, [r7, #12]
 8001716:	607a      	str	r2, [r7, #4]
 8001718:	603b      	str	r3, [r7, #0]
 800171a:	460b      	mov	r3, r1
 800171c:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800171e:	7afb      	ldrb	r3, [r7, #11]
 8001720:	f003 020f 	and.w	r2, r3, #15
 8001724:	4613      	mov	r3, r2
 8001726:	00db      	lsls	r3, r3, #3
 8001728:	1a9b      	subs	r3, r3, r2
 800172a:	009b      	lsls	r3, r3, #2
 800172c:	3338      	adds	r3, #56	; 0x38
 800172e:	68fa      	ldr	r2, [r7, #12]
 8001730:	4413      	add	r3, r2
 8001732:	3304      	adds	r3, #4
 8001734:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8001736:	697b      	ldr	r3, [r7, #20]
 8001738:	687a      	ldr	r2, [r7, #4]
 800173a:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 800173c:	697b      	ldr	r3, [r7, #20]
 800173e:	683a      	ldr	r2, [r7, #0]
 8001740:	615a      	str	r2, [r3, #20]
#if defined (USB)
  ep->xfer_fill_db = 1U;
  ep->xfer_len_db = len;
#endif /* defined (USB) */
  ep->xfer_count = 0U;
 8001742:	697b      	ldr	r3, [r7, #20]
 8001744:	2200      	movs	r2, #0
 8001746:	619a      	str	r2, [r3, #24]
  ep->is_in = 1U;
 8001748:	697b      	ldr	r3, [r7, #20]
 800174a:	2201      	movs	r2, #1
 800174c:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 800174e:	7afb      	ldrb	r3, [r7, #11]
 8001750:	f003 030f 	and.w	r3, r3, #15
 8001754:	b2da      	uxtb	r2, r3
 8001756:	697b      	ldr	r3, [r7, #20]
 8001758:	701a      	strb	r2, [r3, #0]

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 800175a:	7afb      	ldrb	r3, [r7, #11]
 800175c:	f003 030f 	and.w	r3, r3, #15
 8001760:	2b00      	cmp	r3, #0
 8001762:	d106      	bne.n	8001772 <HAL_PCD_EP_Transmit+0x64>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep);
 8001764:	68fb      	ldr	r3, [r7, #12]
 8001766:	681b      	ldr	r3, [r3, #0]
 8001768:	6979      	ldr	r1, [r7, #20]
 800176a:	4618      	mov	r0, r3
 800176c:	f003 f856 	bl	800481c <USB_EP0StartXfer>
 8001770:	e005      	b.n	800177e <HAL_PCD_EP_Transmit+0x70>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep);
 8001772:	68fb      	ldr	r3, [r7, #12]
 8001774:	681b      	ldr	r3, [r3, #0]
 8001776:	6979      	ldr	r1, [r7, #20]
 8001778:	4618      	mov	r0, r3
 800177a:	f002 fe73 	bl	8004464 <USB_EPStartXfer>
  }

  return HAL_OK;
 800177e:	2300      	movs	r3, #0
}
 8001780:	4618      	mov	r0, r3
 8001782:	3718      	adds	r7, #24
 8001784:	46bd      	mov	sp, r7
 8001786:	bd80      	pop	{r7, pc}

08001788 <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8001788:	b580      	push	{r7, lr}
 800178a:	b084      	sub	sp, #16
 800178c:	af00      	add	r7, sp, #0
 800178e:	6078      	str	r0, [r7, #4]
 8001790:	460b      	mov	r3, r1
 8001792:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 8001794:	78fb      	ldrb	r3, [r7, #3]
 8001796:	f003 020f 	and.w	r2, r3, #15
 800179a:	687b      	ldr	r3, [r7, #4]
 800179c:	685b      	ldr	r3, [r3, #4]
 800179e:	429a      	cmp	r2, r3
 80017a0:	d901      	bls.n	80017a6 <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 80017a2:	2301      	movs	r3, #1
 80017a4:	e04e      	b.n	8001844 <HAL_PCD_EP_SetStall+0xbc>
  }

  if ((0x80U & ep_addr) == 0x80U)
 80017a6:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80017aa:	2b00      	cmp	r3, #0
 80017ac:	da0f      	bge.n	80017ce <HAL_PCD_EP_SetStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80017ae:	78fb      	ldrb	r3, [r7, #3]
 80017b0:	f003 020f 	and.w	r2, r3, #15
 80017b4:	4613      	mov	r3, r2
 80017b6:	00db      	lsls	r3, r3, #3
 80017b8:	1a9b      	subs	r3, r3, r2
 80017ba:	009b      	lsls	r3, r3, #2
 80017bc:	3338      	adds	r3, #56	; 0x38
 80017be:	687a      	ldr	r2, [r7, #4]
 80017c0:	4413      	add	r3, r2
 80017c2:	3304      	adds	r3, #4
 80017c4:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80017c6:	68fb      	ldr	r3, [r7, #12]
 80017c8:	2201      	movs	r2, #1
 80017ca:	705a      	strb	r2, [r3, #1]
 80017cc:	e00d      	b.n	80017ea <HAL_PCD_EP_SetStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 80017ce:	78fa      	ldrb	r2, [r7, #3]
 80017d0:	4613      	mov	r3, r2
 80017d2:	00db      	lsls	r3, r3, #3
 80017d4:	1a9b      	subs	r3, r3, r2
 80017d6:	009b      	lsls	r3, r3, #2
 80017d8:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 80017dc:	687a      	ldr	r2, [r7, #4]
 80017de:	4413      	add	r3, r2
 80017e0:	3304      	adds	r3, #4
 80017e2:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80017e4:	68fb      	ldr	r3, [r7, #12]
 80017e6:	2200      	movs	r2, #0
 80017e8:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 80017ea:	68fb      	ldr	r3, [r7, #12]
 80017ec:	2201      	movs	r2, #1
 80017ee:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 80017f0:	78fb      	ldrb	r3, [r7, #3]
 80017f2:	f003 030f 	and.w	r3, r3, #15
 80017f6:	b2da      	uxtb	r2, r3
 80017f8:	68fb      	ldr	r3, [r7, #12]
 80017fa:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 80017fc:	687b      	ldr	r3, [r7, #4]
 80017fe:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 8001802:	2b01      	cmp	r3, #1
 8001804:	d101      	bne.n	800180a <HAL_PCD_EP_SetStall+0x82>
 8001806:	2302      	movs	r3, #2
 8001808:	e01c      	b.n	8001844 <HAL_PCD_EP_SetStall+0xbc>
 800180a:	687b      	ldr	r3, [r7, #4]
 800180c:	2201      	movs	r2, #1
 800180e:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  (void)USB_EPSetStall(hpcd->Instance, ep);
 8001812:	687b      	ldr	r3, [r7, #4]
 8001814:	681b      	ldr	r3, [r3, #0]
 8001816:	68f9      	ldr	r1, [r7, #12]
 8001818:	4618      	mov	r0, r3
 800181a:	f003 f9af 	bl	8004b7c <USB_EPSetStall>

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 800181e:	78fb      	ldrb	r3, [r7, #3]
 8001820:	f003 030f 	and.w	r3, r3, #15
 8001824:	2b00      	cmp	r3, #0
 8001826:	d108      	bne.n	800183a <HAL_PCD_EP_SetStall+0xb2>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t *)hpcd->Setup);
 8001828:	687b      	ldr	r3, [r7, #4]
 800182a:	681a      	ldr	r2, [r3, #0]
 800182c:	687b      	ldr	r3, [r7, #4]
 800182e:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 8001832:	4619      	mov	r1, r3
 8001834:	4610      	mov	r0, r2
 8001836:	f003 fba1 	bl	8004f7c <USB_EP0_OutStart>
  }

  __HAL_UNLOCK(hpcd);
 800183a:	687b      	ldr	r3, [r7, #4]
 800183c:	2200      	movs	r2, #0
 800183e:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return HAL_OK;
 8001842:	2300      	movs	r3, #0
}
 8001844:	4618      	mov	r0, r3
 8001846:	3710      	adds	r7, #16
 8001848:	46bd      	mov	sp, r7
 800184a:	bd80      	pop	{r7, pc}

0800184c <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 800184c:	b580      	push	{r7, lr}
 800184e:	b084      	sub	sp, #16
 8001850:	af00      	add	r7, sp, #0
 8001852:	6078      	str	r0, [r7, #4]
 8001854:	460b      	mov	r3, r1
 8001856:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 8001858:	78fb      	ldrb	r3, [r7, #3]
 800185a:	f003 020f 	and.w	r2, r3, #15
 800185e:	687b      	ldr	r3, [r7, #4]
 8001860:	685b      	ldr	r3, [r3, #4]
 8001862:	429a      	cmp	r2, r3
 8001864:	d901      	bls.n	800186a <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 8001866:	2301      	movs	r3, #1
 8001868:	e042      	b.n	80018f0 <HAL_PCD_EP_ClrStall+0xa4>
  }

  if ((0x80U & ep_addr) == 0x80U)
 800186a:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800186e:	2b00      	cmp	r3, #0
 8001870:	da0f      	bge.n	8001892 <HAL_PCD_EP_ClrStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8001872:	78fb      	ldrb	r3, [r7, #3]
 8001874:	f003 020f 	and.w	r2, r3, #15
 8001878:	4613      	mov	r3, r2
 800187a:	00db      	lsls	r3, r3, #3
 800187c:	1a9b      	subs	r3, r3, r2
 800187e:	009b      	lsls	r3, r3, #2
 8001880:	3338      	adds	r3, #56	; 0x38
 8001882:	687a      	ldr	r2, [r7, #4]
 8001884:	4413      	add	r3, r2
 8001886:	3304      	adds	r3, #4
 8001888:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 800188a:	68fb      	ldr	r3, [r7, #12]
 800188c:	2201      	movs	r2, #1
 800188e:	705a      	strb	r2, [r3, #1]
 8001890:	e00f      	b.n	80018b2 <HAL_PCD_EP_ClrStall+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8001892:	78fb      	ldrb	r3, [r7, #3]
 8001894:	f003 020f 	and.w	r2, r3, #15
 8001898:	4613      	mov	r3, r2
 800189a:	00db      	lsls	r3, r3, #3
 800189c:	1a9b      	subs	r3, r3, r2
 800189e:	009b      	lsls	r3, r3, #2
 80018a0:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 80018a4:	687a      	ldr	r2, [r7, #4]
 80018a6:	4413      	add	r3, r2
 80018a8:	3304      	adds	r3, #4
 80018aa:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80018ac:	68fb      	ldr	r3, [r7, #12]
 80018ae:	2200      	movs	r2, #0
 80018b0:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 80018b2:	68fb      	ldr	r3, [r7, #12]
 80018b4:	2200      	movs	r2, #0
 80018b6:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 80018b8:	78fb      	ldrb	r3, [r7, #3]
 80018ba:	f003 030f 	and.w	r3, r3, #15
 80018be:	b2da      	uxtb	r2, r3
 80018c0:	68fb      	ldr	r3, [r7, #12]
 80018c2:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 80018c4:	687b      	ldr	r3, [r7, #4]
 80018c6:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 80018ca:	2b01      	cmp	r3, #1
 80018cc:	d101      	bne.n	80018d2 <HAL_PCD_EP_ClrStall+0x86>
 80018ce:	2302      	movs	r3, #2
 80018d0:	e00e      	b.n	80018f0 <HAL_PCD_EP_ClrStall+0xa4>
 80018d2:	687b      	ldr	r3, [r7, #4]
 80018d4:	2201      	movs	r2, #1
 80018d6:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  (void)USB_EPClearStall(hpcd->Instance, ep);
 80018da:	687b      	ldr	r3, [r7, #4]
 80018dc:	681b      	ldr	r3, [r3, #0]
 80018de:	68f9      	ldr	r1, [r7, #12]
 80018e0:	4618      	mov	r0, r3
 80018e2:	f003 f9b9 	bl	8004c58 <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 80018e6:	687b      	ldr	r3, [r7, #4]
 80018e8:	2200      	movs	r2, #0
 80018ea:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return HAL_OK;
 80018ee:	2300      	movs	r3, #0
}
 80018f0:	4618      	mov	r0, r3
 80018f2:	3710      	adds	r7, #16
 80018f4:	46bd      	mov	sp, r7
 80018f6:	bd80      	pop	{r7, pc}

080018f8 <PCD_WriteEmptyTxFifo>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_WriteEmptyTxFifo(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 80018f8:	b580      	push	{r7, lr}
 80018fa:	b088      	sub	sp, #32
 80018fc:	af00      	add	r7, sp, #0
 80018fe:	6078      	str	r0, [r7, #4]
 8001900:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8001902:	687b      	ldr	r3, [r7, #4]
 8001904:	681b      	ldr	r3, [r3, #0]
 8001906:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8001908:	697b      	ldr	r3, [r7, #20]
 800190a:	613b      	str	r3, [r7, #16]
  USB_OTG_EPTypeDef *ep;
  uint32_t len;
  uint32_t len32b;
  uint32_t fifoemptymsk;

  ep = &hpcd->IN_ep[epnum];
 800190c:	683a      	ldr	r2, [r7, #0]
 800190e:	4613      	mov	r3, r2
 8001910:	00db      	lsls	r3, r3, #3
 8001912:	1a9b      	subs	r3, r3, r2
 8001914:	009b      	lsls	r3, r3, #2
 8001916:	3338      	adds	r3, #56	; 0x38
 8001918:	687a      	ldr	r2, [r7, #4]
 800191a:	4413      	add	r3, r2
 800191c:	3304      	adds	r3, #4
 800191e:	60fb      	str	r3, [r7, #12]

  if (ep->xfer_count > ep->xfer_len)
 8001920:	68fb      	ldr	r3, [r7, #12]
 8001922:	699a      	ldr	r2, [r3, #24]
 8001924:	68fb      	ldr	r3, [r7, #12]
 8001926:	695b      	ldr	r3, [r3, #20]
 8001928:	429a      	cmp	r2, r3
 800192a:	d901      	bls.n	8001930 <PCD_WriteEmptyTxFifo+0x38>
  {
    return HAL_ERROR;
 800192c:	2301      	movs	r3, #1
 800192e:	e067      	b.n	8001a00 <PCD_WriteEmptyTxFifo+0x108>
  }

  len = ep->xfer_len - ep->xfer_count;
 8001930:	68fb      	ldr	r3, [r7, #12]
 8001932:	695a      	ldr	r2, [r3, #20]
 8001934:	68fb      	ldr	r3, [r7, #12]
 8001936:	699b      	ldr	r3, [r3, #24]
 8001938:	1ad3      	subs	r3, r2, r3
 800193a:	61fb      	str	r3, [r7, #28]

  if (len > ep->maxpacket)
 800193c:	68fb      	ldr	r3, [r7, #12]
 800193e:	689b      	ldr	r3, [r3, #8]
 8001940:	69fa      	ldr	r2, [r7, #28]
 8001942:	429a      	cmp	r2, r3
 8001944:	d902      	bls.n	800194c <PCD_WriteEmptyTxFifo+0x54>
  {
    len = ep->maxpacket;
 8001946:	68fb      	ldr	r3, [r7, #12]
 8001948:	689b      	ldr	r3, [r3, #8]
 800194a:	61fb      	str	r3, [r7, #28]
  }

  len32b = (len + 3U) / 4U;
 800194c:	69fb      	ldr	r3, [r7, #28]
 800194e:	3303      	adds	r3, #3
 8001950:	089b      	lsrs	r3, r3, #2
 8001952:	61bb      	str	r3, [r7, #24]

  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8001954:	e026      	b.n	80019a4 <PCD_WriteEmptyTxFifo+0xac>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
  {
    /* Write the FIFO */
    len = ep->xfer_len - ep->xfer_count;
 8001956:	68fb      	ldr	r3, [r7, #12]
 8001958:	695a      	ldr	r2, [r3, #20]
 800195a:	68fb      	ldr	r3, [r7, #12]
 800195c:	699b      	ldr	r3, [r3, #24]
 800195e:	1ad3      	subs	r3, r2, r3
 8001960:	61fb      	str	r3, [r7, #28]

    if (len > ep->maxpacket)
 8001962:	68fb      	ldr	r3, [r7, #12]
 8001964:	689b      	ldr	r3, [r3, #8]
 8001966:	69fa      	ldr	r2, [r7, #28]
 8001968:	429a      	cmp	r2, r3
 800196a:	d902      	bls.n	8001972 <PCD_WriteEmptyTxFifo+0x7a>
    {
      len = ep->maxpacket;
 800196c:	68fb      	ldr	r3, [r7, #12]
 800196e:	689b      	ldr	r3, [r3, #8]
 8001970:	61fb      	str	r3, [r7, #28]
    }
    len32b = (len + 3U) / 4U;
 8001972:	69fb      	ldr	r3, [r7, #28]
 8001974:	3303      	adds	r3, #3
 8001976:	089b      	lsrs	r3, r3, #2
 8001978:	61bb      	str	r3, [r7, #24]

    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len);
 800197a:	68fb      	ldr	r3, [r7, #12]
 800197c:	68d9      	ldr	r1, [r3, #12]
 800197e:	683b      	ldr	r3, [r7, #0]
 8001980:	b2da      	uxtb	r2, r3
 8001982:	69fb      	ldr	r3, [r7, #28]
 8001984:	b29b      	uxth	r3, r3
 8001986:	6978      	ldr	r0, [r7, #20]
 8001988:	f003 f866 	bl	8004a58 <USB_WritePacket>

    ep->xfer_buff  += len;
 800198c:	68fb      	ldr	r3, [r7, #12]
 800198e:	68da      	ldr	r2, [r3, #12]
 8001990:	69fb      	ldr	r3, [r7, #28]
 8001992:	441a      	add	r2, r3
 8001994:	68fb      	ldr	r3, [r7, #12]
 8001996:	60da      	str	r2, [r3, #12]
    ep->xfer_count += len;
 8001998:	68fb      	ldr	r3, [r7, #12]
 800199a:	699a      	ldr	r2, [r3, #24]
 800199c:	69fb      	ldr	r3, [r7, #28]
 800199e:	441a      	add	r2, r3
 80019a0:	68fb      	ldr	r3, [r7, #12]
 80019a2:	619a      	str	r2, [r3, #24]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 80019a4:	683b      	ldr	r3, [r7, #0]
 80019a6:	015a      	lsls	r2, r3, #5
 80019a8:	693b      	ldr	r3, [r7, #16]
 80019aa:	4413      	add	r3, r2
 80019ac:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80019b0:	699b      	ldr	r3, [r3, #24]
 80019b2:	b29b      	uxth	r3, r3
 80019b4:	69ba      	ldr	r2, [r7, #24]
 80019b6:	429a      	cmp	r2, r3
 80019b8:	d809      	bhi.n	80019ce <PCD_WriteEmptyTxFifo+0xd6>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 80019ba:	68fb      	ldr	r3, [r7, #12]
 80019bc:	699a      	ldr	r2, [r3, #24]
 80019be:	68fb      	ldr	r3, [r7, #12]
 80019c0:	695b      	ldr	r3, [r3, #20]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 80019c2:	429a      	cmp	r2, r3
 80019c4:	d203      	bcs.n	80019ce <PCD_WriteEmptyTxFifo+0xd6>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 80019c6:	68fb      	ldr	r3, [r7, #12]
 80019c8:	695b      	ldr	r3, [r3, #20]
 80019ca:	2b00      	cmp	r3, #0
 80019cc:	d1c3      	bne.n	8001956 <PCD_WriteEmptyTxFifo+0x5e>
  }

  if (ep->xfer_len <= ep->xfer_count)
 80019ce:	68fb      	ldr	r3, [r7, #12]
 80019d0:	695a      	ldr	r2, [r3, #20]
 80019d2:	68fb      	ldr	r3, [r7, #12]
 80019d4:	699b      	ldr	r3, [r3, #24]
 80019d6:	429a      	cmp	r2, r3
 80019d8:	d811      	bhi.n	80019fe <PCD_WriteEmptyTxFifo+0x106>
  {
    fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 80019da:	683b      	ldr	r3, [r7, #0]
 80019dc:	f003 030f 	and.w	r3, r3, #15
 80019e0:	2201      	movs	r2, #1
 80019e2:	fa02 f303 	lsl.w	r3, r2, r3
 80019e6:	60bb      	str	r3, [r7, #8]
    USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 80019e8:	693b      	ldr	r3, [r7, #16]
 80019ea:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80019ee:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80019f0:	68bb      	ldr	r3, [r7, #8]
 80019f2:	43db      	mvns	r3, r3
 80019f4:	6939      	ldr	r1, [r7, #16]
 80019f6:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80019fa:	4013      	ands	r3, r2
 80019fc:	634b      	str	r3, [r1, #52]	; 0x34
  }

  return HAL_OK;
 80019fe:	2300      	movs	r3, #0
}
 8001a00:	4618      	mov	r0, r3
 8001a02:	3720      	adds	r7, #32
 8001a04:	46bd      	mov	sp, r7
 8001a06:	bd80      	pop	{r7, pc}

08001a08 <PCD_EP_OutXfrComplete_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutXfrComplete_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8001a08:	b580      	push	{r7, lr}
 8001a0a:	b086      	sub	sp, #24
 8001a0c:	af00      	add	r7, sp, #0
 8001a0e:	6078      	str	r0, [r7, #4]
 8001a10:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8001a12:	687b      	ldr	r3, [r7, #4]
 8001a14:	681b      	ldr	r3, [r3, #0]
 8001a16:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8001a18:	697b      	ldr	r3, [r7, #20]
 8001a1a:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 8001a1c:	697b      	ldr	r3, [r7, #20]
 8001a1e:	333c      	adds	r3, #60	; 0x3c
 8001a20:	3304      	adds	r3, #4
 8001a22:	681b      	ldr	r3, [r3, #0]
 8001a24:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 8001a26:	683b      	ldr	r3, [r7, #0]
 8001a28:	015a      	lsls	r2, r3, #5
 8001a2a:	693b      	ldr	r3, [r7, #16]
 8001a2c:	4413      	add	r3, r2
 8001a2e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8001a32:	689b      	ldr	r3, [r3, #8]
 8001a34:	60bb      	str	r3, [r7, #8]

  if (gSNPSiD == USB_OTG_CORE_ID_310A)
 8001a36:	68fb      	ldr	r3, [r7, #12]
 8001a38:	4a19      	ldr	r2, [pc, #100]	; (8001aa0 <PCD_EP_OutXfrComplete_int+0x98>)
 8001a3a:	4293      	cmp	r3, r2
 8001a3c:	d124      	bne.n	8001a88 <PCD_EP_OutXfrComplete_int+0x80>
  {
    /* StupPktRcvd = 1 this is a setup packet */
    if ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX)
 8001a3e:	68bb      	ldr	r3, [r7, #8]
 8001a40:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8001a44:	2b00      	cmp	r3, #0
 8001a46:	d00a      	beq.n	8001a5e <PCD_EP_OutXfrComplete_int+0x56>
    {
      CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8001a48:	683b      	ldr	r3, [r7, #0]
 8001a4a:	015a      	lsls	r2, r3, #5
 8001a4c:	693b      	ldr	r3, [r7, #16]
 8001a4e:	4413      	add	r3, r2
 8001a50:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8001a54:	461a      	mov	r2, r3
 8001a56:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8001a5a:	6093      	str	r3, [r2, #8]
 8001a5c:	e01a      	b.n	8001a94 <PCD_EP_OutXfrComplete_int+0x8c>
    }
    else
    {
      if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 8001a5e:	68bb      	ldr	r3, [r7, #8]
 8001a60:	f003 0320 	and.w	r3, r3, #32
 8001a64:	2b00      	cmp	r3, #0
 8001a66:	d008      	beq.n	8001a7a <PCD_EP_OutXfrComplete_int+0x72>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8001a68:	683b      	ldr	r3, [r7, #0]
 8001a6a:	015a      	lsls	r2, r3, #5
 8001a6c:	693b      	ldr	r3, [r7, #16]
 8001a6e:	4413      	add	r3, r2
 8001a70:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8001a74:	461a      	mov	r2, r3
 8001a76:	2320      	movs	r3, #32
 8001a78:	6093      	str	r3, [r2, #8]
      }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8001a7a:	683b      	ldr	r3, [r7, #0]
 8001a7c:	b2db      	uxtb	r3, r3
 8001a7e:	4619      	mov	r1, r3
 8001a80:	6878      	ldr	r0, [r7, #4]
 8001a82:	f005 fa6b 	bl	8006f5c <HAL_PCD_DataOutStageCallback>
 8001a86:	e005      	b.n	8001a94 <PCD_EP_OutXfrComplete_int+0x8c>
  else
  {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
    HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8001a88:	683b      	ldr	r3, [r7, #0]
 8001a8a:	b2db      	uxtb	r3, r3
 8001a8c:	4619      	mov	r1, r3
 8001a8e:	6878      	ldr	r0, [r7, #4]
 8001a90:	f005 fa64 	bl	8006f5c <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  }

  return HAL_OK;
 8001a94:	2300      	movs	r3, #0
}
 8001a96:	4618      	mov	r0, r3
 8001a98:	3718      	adds	r7, #24
 8001a9a:	46bd      	mov	sp, r7
 8001a9c:	bd80      	pop	{r7, pc}
 8001a9e:	bf00      	nop
 8001aa0:	4f54310a 	.word	0x4f54310a

08001aa4 <PCD_EP_OutSetupPacket_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutSetupPacket_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8001aa4:	b580      	push	{r7, lr}
 8001aa6:	b086      	sub	sp, #24
 8001aa8:	af00      	add	r7, sp, #0
 8001aaa:	6078      	str	r0, [r7, #4]
 8001aac:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8001aae:	687b      	ldr	r3, [r7, #4]
 8001ab0:	681b      	ldr	r3, [r3, #0]
 8001ab2:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8001ab4:	697b      	ldr	r3, [r7, #20]
 8001ab6:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 8001ab8:	697b      	ldr	r3, [r7, #20]
 8001aba:	333c      	adds	r3, #60	; 0x3c
 8001abc:	3304      	adds	r3, #4
 8001abe:	681b      	ldr	r3, [r3, #0]
 8001ac0:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 8001ac2:	683b      	ldr	r3, [r7, #0]
 8001ac4:	015a      	lsls	r2, r3, #5
 8001ac6:	693b      	ldr	r3, [r7, #16]
 8001ac8:	4413      	add	r3, r2
 8001aca:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8001ace:	689b      	ldr	r3, [r3, #8]
 8001ad0:	60bb      	str	r3, [r7, #8]

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8001ad2:	68fb      	ldr	r3, [r7, #12]
 8001ad4:	4a0c      	ldr	r2, [pc, #48]	; (8001b08 <PCD_EP_OutSetupPacket_int+0x64>)
 8001ad6:	4293      	cmp	r3, r2
 8001ad8:	d90e      	bls.n	8001af8 <PCD_EP_OutSetupPacket_int+0x54>
      ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8001ada:	68bb      	ldr	r3, [r7, #8]
 8001adc:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8001ae0:	2b00      	cmp	r3, #0
 8001ae2:	d009      	beq.n	8001af8 <PCD_EP_OutSetupPacket_int+0x54>
  {
    CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8001ae4:	683b      	ldr	r3, [r7, #0]
 8001ae6:	015a      	lsls	r2, r3, #5
 8001ae8:	693b      	ldr	r3, [r7, #16]
 8001aea:	4413      	add	r3, r2
 8001aec:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8001af0:	461a      	mov	r2, r3
 8001af2:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8001af6:	6093      	str	r3, [r2, #8]

  /* Inform the upper layer that a setup packet is available */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
  hpcd->SetupStageCallback(hpcd);
#else
  HAL_PCD_SetupStageCallback(hpcd);
 8001af8:	6878      	ldr	r0, [r7, #4]
 8001afa:	f005 fa1d 	bl	8006f38 <HAL_PCD_SetupStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

  return HAL_OK;
 8001afe:	2300      	movs	r3, #0
}
 8001b00:	4618      	mov	r0, r3
 8001b02:	3718      	adds	r7, #24
 8001b04:	46bd      	mov	sp, r7
 8001b06:	bd80      	pop	{r7, pc}
 8001b08:	4f54300a 	.word	0x4f54300a

08001b0c <HAL_PCDEx_SetTxFiFo>:
  * @param  fifo The number of Tx fifo
  * @param  size Fifo size
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetTxFiFo(PCD_HandleTypeDef *hpcd, uint8_t fifo, uint16_t size)
{
 8001b0c:	b480      	push	{r7}
 8001b0e:	b085      	sub	sp, #20
 8001b10:	af00      	add	r7, sp, #0
 8001b12:	6078      	str	r0, [r7, #4]
 8001b14:	460b      	mov	r3, r1
 8001b16:	70fb      	strb	r3, [r7, #3]
 8001b18:	4613      	mov	r3, r2
 8001b1a:	803b      	strh	r3, [r7, #0]
         --> Txn should be configured with the minimum space of 16 words
     The FIFO is used optimally when used TxFIFOs are allocated in the top
         of the FIFO.Ex: use EP1 and EP2 as IN instead of EP1 and EP3 as IN ones.
     When DMA is used 3n * FIFO locations should be reserved for internal DMA registers */

  Tx_Offset = hpcd->Instance->GRXFSIZ;
 8001b1c:	687b      	ldr	r3, [r7, #4]
 8001b1e:	681b      	ldr	r3, [r3, #0]
 8001b20:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001b22:	60bb      	str	r3, [r7, #8]

  if (fifo == 0U)
 8001b24:	78fb      	ldrb	r3, [r7, #3]
 8001b26:	2b00      	cmp	r3, #0
 8001b28:	d107      	bne.n	8001b3a <HAL_PCDEx_SetTxFiFo+0x2e>
  {
    hpcd->Instance->DIEPTXF0_HNPTXFSIZ = ((uint32_t)size << 16) | Tx_Offset;
 8001b2a:	883b      	ldrh	r3, [r7, #0]
 8001b2c:	0419      	lsls	r1, r3, #16
 8001b2e:	687b      	ldr	r3, [r7, #4]
 8001b30:	681b      	ldr	r3, [r3, #0]
 8001b32:	68ba      	ldr	r2, [r7, #8]
 8001b34:	430a      	orrs	r2, r1
 8001b36:	629a      	str	r2, [r3, #40]	; 0x28
 8001b38:	e028      	b.n	8001b8c <HAL_PCDEx_SetTxFiFo+0x80>
  }
  else
  {
    Tx_Offset += (hpcd->Instance->DIEPTXF0_HNPTXFSIZ) >> 16;
 8001b3a:	687b      	ldr	r3, [r7, #4]
 8001b3c:	681b      	ldr	r3, [r3, #0]
 8001b3e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001b40:	0c1b      	lsrs	r3, r3, #16
 8001b42:	68ba      	ldr	r2, [r7, #8]
 8001b44:	4413      	add	r3, r2
 8001b46:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 8001b48:	2300      	movs	r3, #0
 8001b4a:	73fb      	strb	r3, [r7, #15]
 8001b4c:	e00d      	b.n	8001b6a <HAL_PCDEx_SetTxFiFo+0x5e>
    {
      Tx_Offset += (hpcd->Instance->DIEPTXF[i] >> 16);
 8001b4e:	687b      	ldr	r3, [r7, #4]
 8001b50:	681a      	ldr	r2, [r3, #0]
 8001b52:	7bfb      	ldrb	r3, [r7, #15]
 8001b54:	3340      	adds	r3, #64	; 0x40
 8001b56:	009b      	lsls	r3, r3, #2
 8001b58:	4413      	add	r3, r2
 8001b5a:	685b      	ldr	r3, [r3, #4]
 8001b5c:	0c1b      	lsrs	r3, r3, #16
 8001b5e:	68ba      	ldr	r2, [r7, #8]
 8001b60:	4413      	add	r3, r2
 8001b62:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 8001b64:	7bfb      	ldrb	r3, [r7, #15]
 8001b66:	3301      	adds	r3, #1
 8001b68:	73fb      	strb	r3, [r7, #15]
 8001b6a:	7bfa      	ldrb	r2, [r7, #15]
 8001b6c:	78fb      	ldrb	r3, [r7, #3]
 8001b6e:	3b01      	subs	r3, #1
 8001b70:	429a      	cmp	r2, r3
 8001b72:	d3ec      	bcc.n	8001b4e <HAL_PCDEx_SetTxFiFo+0x42>
    }

    /* Multiply Tx_Size by 2 to get higher performance */
    hpcd->Instance->DIEPTXF[fifo - 1U] = ((uint32_t)size << 16) | Tx_Offset;
 8001b74:	883b      	ldrh	r3, [r7, #0]
 8001b76:	0418      	lsls	r0, r3, #16
 8001b78:	687b      	ldr	r3, [r7, #4]
 8001b7a:	6819      	ldr	r1, [r3, #0]
 8001b7c:	78fb      	ldrb	r3, [r7, #3]
 8001b7e:	3b01      	subs	r3, #1
 8001b80:	68ba      	ldr	r2, [r7, #8]
 8001b82:	4302      	orrs	r2, r0
 8001b84:	3340      	adds	r3, #64	; 0x40
 8001b86:	009b      	lsls	r3, r3, #2
 8001b88:	440b      	add	r3, r1
 8001b8a:	605a      	str	r2, [r3, #4]
  }

  return HAL_OK;
 8001b8c:	2300      	movs	r3, #0
}
 8001b8e:	4618      	mov	r0, r3
 8001b90:	3714      	adds	r7, #20
 8001b92:	46bd      	mov	sp, r7
 8001b94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b98:	4770      	bx	lr

08001b9a <HAL_PCDEx_SetRxFiFo>:
  * @param  hpcd PCD handle
  * @param  size Size of Rx fifo
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetRxFiFo(PCD_HandleTypeDef *hpcd, uint16_t size)
{
 8001b9a:	b480      	push	{r7}
 8001b9c:	b083      	sub	sp, #12
 8001b9e:	af00      	add	r7, sp, #0
 8001ba0:	6078      	str	r0, [r7, #4]
 8001ba2:	460b      	mov	r3, r1
 8001ba4:	807b      	strh	r3, [r7, #2]
  hpcd->Instance->GRXFSIZ = size;
 8001ba6:	687b      	ldr	r3, [r7, #4]
 8001ba8:	681b      	ldr	r3, [r3, #0]
 8001baa:	887a      	ldrh	r2, [r7, #2]
 8001bac:	625a      	str	r2, [r3, #36]	; 0x24

  return HAL_OK;
 8001bae:	2300      	movs	r3, #0
}
 8001bb0:	4618      	mov	r0, r3
 8001bb2:	370c      	adds	r7, #12
 8001bb4:	46bd      	mov	sp, r7
 8001bb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bba:	4770      	bx	lr

08001bbc <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 8001bbc:	b480      	push	{r7}
 8001bbe:	b085      	sub	sp, #20
 8001bc0:	af00      	add	r7, sp, #0
 8001bc2:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8001bc4:	687b      	ldr	r3, [r7, #4]
 8001bc6:	681b      	ldr	r3, [r3, #0]
 8001bc8:	60fb      	str	r3, [r7, #12]

  hpcd->lpm_active = 1U;
 8001bca:	687b      	ldr	r3, [r7, #4]
 8001bcc:	2201      	movs	r2, #1
 8001bce:	f8c3 23fc 	str.w	r2, [r3, #1020]	; 0x3fc
  hpcd->LPM_State = LPM_L0;
 8001bd2:	687b      	ldr	r3, [r7, #4]
 8001bd4:	2200      	movs	r2, #0
 8001bd6:	f883 23f4 	strb.w	r2, [r3, #1012]	; 0x3f4
  USBx->GINTMSK |= USB_OTG_GINTMSK_LPMINTM;
 8001bda:	68fb      	ldr	r3, [r7, #12]
 8001bdc:	699b      	ldr	r3, [r3, #24]
 8001bde:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 8001be2:	68fb      	ldr	r3, [r7, #12]
 8001be4:	619a      	str	r2, [r3, #24]
  USBx->GLPMCFG |= (USB_OTG_GLPMCFG_LPMEN | USB_OTG_GLPMCFG_LPMACK | USB_OTG_GLPMCFG_ENBESL);
 8001be6:	68fb      	ldr	r3, [r7, #12]
 8001be8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001bea:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001bee:	f043 0303 	orr.w	r3, r3, #3
 8001bf2:	68fa      	ldr	r2, [r7, #12]
 8001bf4:	6553      	str	r3, [r2, #84]	; 0x54

  return HAL_OK;
 8001bf6:	2300      	movs	r3, #0
}
 8001bf8:	4618      	mov	r0, r3
 8001bfa:	3714      	adds	r7, #20
 8001bfc:	46bd      	mov	sp, r7
 8001bfe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c02:	4770      	bx	lr

08001c04 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8001c04:	b480      	push	{r7}
 8001c06:	af00      	add	r7, sp, #0
#if defined(PWR_CR5_R1MODE)
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8001c08:	4b0d      	ldr	r3, [pc, #52]	; (8001c40 <HAL_PWREx_GetVoltageRange+0x3c>)
 8001c0a:	681b      	ldr	r3, [r3, #0]
 8001c0c:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8001c10:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001c14:	d102      	bne.n	8001c1c <HAL_PWREx_GetVoltageRange+0x18>
    {
      return PWR_REGULATOR_VOLTAGE_SCALE2;
 8001c16:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001c1a:	e00b      	b.n	8001c34 <HAL_PWREx_GetVoltageRange+0x30>
    }
    else if (READ_BIT(PWR->CR5, PWR_CR5_R1MODE) == PWR_CR5_R1MODE)
 8001c1c:	4b08      	ldr	r3, [pc, #32]	; (8001c40 <HAL_PWREx_GetVoltageRange+0x3c>)
 8001c1e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8001c22:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001c26:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8001c2a:	d102      	bne.n	8001c32 <HAL_PWREx_GetVoltageRange+0x2e>
    {
      /* PWR_CR5_R1MODE bit set means that Range 1 Boost is disabled */
      return PWR_REGULATOR_VOLTAGE_SCALE1;
 8001c2c:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001c30:	e000      	b.n	8001c34 <HAL_PWREx_GetVoltageRange+0x30>
    }
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
 8001c32:	2300      	movs	r3, #0
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
#endif
}
 8001c34:	4618      	mov	r0, r3
 8001c36:	46bd      	mov	sp, r7
 8001c38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c3c:	4770      	bx	lr
 8001c3e:	bf00      	nop
 8001c40:	40007000 	.word	0x40007000

08001c44 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8001c44:	b480      	push	{r7}
 8001c46:	b085      	sub	sp, #20
 8001c48:	af00      	add	r7, sp, #0
 8001c4a:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

#if defined(PWR_CR5_R1MODE)
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1_BOOST)
 8001c4c:	687b      	ldr	r3, [r7, #4]
 8001c4e:	2b00      	cmp	r3, #0
 8001c50:	d141      	bne.n	8001cd6 <HAL_PWREx_ControlVoltageScaling+0x92>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8001c52:	4b4b      	ldr	r3, [pc, #300]	; (8001d80 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001c54:	681b      	ldr	r3, [r3, #0]
 8001c56:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8001c5a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001c5e:	d131      	bne.n	8001cc4 <HAL_PWREx_ControlVoltageScaling+0x80>
    {
      /* Make sure Range 1 Boost is enabled */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8001c60:	4b47      	ldr	r3, [pc, #284]	; (8001d80 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001c62:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8001c66:	4a46      	ldr	r2, [pc, #280]	; (8001d80 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001c68:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8001c6c:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8001c70:	4b43      	ldr	r3, [pc, #268]	; (8001d80 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001c72:	681b      	ldr	r3, [r3, #0]
 8001c74:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8001c78:	4a41      	ldr	r2, [pc, #260]	; (8001d80 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001c7a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001c7e:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1;
 8001c80:	4b40      	ldr	r3, [pc, #256]	; (8001d84 <HAL_PWREx_ControlVoltageScaling+0x140>)
 8001c82:	681b      	ldr	r3, [r3, #0]
 8001c84:	2232      	movs	r2, #50	; 0x32
 8001c86:	fb02 f303 	mul.w	r3, r2, r3
 8001c8a:	4a3f      	ldr	r2, [pc, #252]	; (8001d88 <HAL_PWREx_ControlVoltageScaling+0x144>)
 8001c8c:	fba2 2303 	umull	r2, r3, r2, r3
 8001c90:	0c9b      	lsrs	r3, r3, #18
 8001c92:	3301      	adds	r3, #1
 8001c94:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8001c96:	e002      	b.n	8001c9e <HAL_PWREx_ControlVoltageScaling+0x5a>
      {
        wait_loop_index--;
 8001c98:	68fb      	ldr	r3, [r7, #12]
 8001c9a:	3b01      	subs	r3, #1
 8001c9c:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8001c9e:	4b38      	ldr	r3, [pc, #224]	; (8001d80 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001ca0:	695b      	ldr	r3, [r3, #20]
 8001ca2:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001ca6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001caa:	d102      	bne.n	8001cb2 <HAL_PWREx_ControlVoltageScaling+0x6e>
 8001cac:	68fb      	ldr	r3, [r7, #12]
 8001cae:	2b00      	cmp	r3, #0
 8001cb0:	d1f2      	bne.n	8001c98 <HAL_PWREx_ControlVoltageScaling+0x54>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8001cb2:	4b33      	ldr	r3, [pc, #204]	; (8001d80 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001cb4:	695b      	ldr	r3, [r3, #20]
 8001cb6:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001cba:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001cbe:	d158      	bne.n	8001d72 <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8001cc0:	2303      	movs	r3, #3
 8001cc2:	e057      	b.n	8001d74 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
    /* If current range is range 1 normal or boost mode */
    else
    {
      /* Enable Range 1 Boost (no issue if bit already reset) */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8001cc4:	4b2e      	ldr	r3, [pc, #184]	; (8001d80 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001cc6:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8001cca:	4a2d      	ldr	r2, [pc, #180]	; (8001d80 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001ccc:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8001cd0:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
 8001cd4:	e04d      	b.n	8001d72 <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8001cd6:	687b      	ldr	r3, [r7, #4]
 8001cd8:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8001cdc:	d141      	bne.n	8001d62 <HAL_PWREx_ControlVoltageScaling+0x11e>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8001cde:	4b28      	ldr	r3, [pc, #160]	; (8001d80 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001ce0:	681b      	ldr	r3, [r3, #0]
 8001ce2:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8001ce6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001cea:	d131      	bne.n	8001d50 <HAL_PWREx_ControlVoltageScaling+0x10c>
    {
      /* Make sure Range 1 Boost is disabled */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8001cec:	4b24      	ldr	r3, [pc, #144]	; (8001d80 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001cee:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8001cf2:	4a23      	ldr	r2, [pc, #140]	; (8001d80 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001cf4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001cf8:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8001cfc:	4b20      	ldr	r3, [pc, #128]	; (8001d80 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001cfe:	681b      	ldr	r3, [r3, #0]
 8001d00:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8001d04:	4a1e      	ldr	r2, [pc, #120]	; (8001d80 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001d06:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001d0a:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1;
 8001d0c:	4b1d      	ldr	r3, [pc, #116]	; (8001d84 <HAL_PWREx_ControlVoltageScaling+0x140>)
 8001d0e:	681b      	ldr	r3, [r3, #0]
 8001d10:	2232      	movs	r2, #50	; 0x32
 8001d12:	fb02 f303 	mul.w	r3, r2, r3
 8001d16:	4a1c      	ldr	r2, [pc, #112]	; (8001d88 <HAL_PWREx_ControlVoltageScaling+0x144>)
 8001d18:	fba2 2303 	umull	r2, r3, r2, r3
 8001d1c:	0c9b      	lsrs	r3, r3, #18
 8001d1e:	3301      	adds	r3, #1
 8001d20:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8001d22:	e002      	b.n	8001d2a <HAL_PWREx_ControlVoltageScaling+0xe6>
      {
        wait_loop_index--;
 8001d24:	68fb      	ldr	r3, [r7, #12]
 8001d26:	3b01      	subs	r3, #1
 8001d28:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8001d2a:	4b15      	ldr	r3, [pc, #84]	; (8001d80 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001d2c:	695b      	ldr	r3, [r3, #20]
 8001d2e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001d32:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001d36:	d102      	bne.n	8001d3e <HAL_PWREx_ControlVoltageScaling+0xfa>
 8001d38:	68fb      	ldr	r3, [r7, #12]
 8001d3a:	2b00      	cmp	r3, #0
 8001d3c:	d1f2      	bne.n	8001d24 <HAL_PWREx_ControlVoltageScaling+0xe0>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8001d3e:	4b10      	ldr	r3, [pc, #64]	; (8001d80 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001d40:	695b      	ldr	r3, [r3, #20]
 8001d42:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001d46:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001d4a:	d112      	bne.n	8001d72 <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8001d4c:	2303      	movs	r3, #3
 8001d4e:	e011      	b.n	8001d74 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
     /* If current range is range 1 normal or boost mode */
    else
    {
      /* Disable Range 1 Boost (no issue if bit already set) */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8001d50:	4b0b      	ldr	r3, [pc, #44]	; (8001d80 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001d52:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8001d56:	4a0a      	ldr	r2, [pc, #40]	; (8001d80 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001d58:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001d5c:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
 8001d60:	e007      	b.n	8001d72 <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else
  {
    /* Set Range 2 */
    MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8001d62:	4b07      	ldr	r3, [pc, #28]	; (8001d80 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001d64:	681b      	ldr	r3, [r3, #0]
 8001d66:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8001d6a:	4a05      	ldr	r2, [pc, #20]	; (8001d80 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001d6c:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001d70:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 8001d72:	2300      	movs	r3, #0
}
 8001d74:	4618      	mov	r0, r3
 8001d76:	3714      	adds	r7, #20
 8001d78:	46bd      	mov	sp, r7
 8001d7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d7e:	4770      	bx	lr
 8001d80:	40007000 	.word	0x40007000
 8001d84:	20000000 	.word	0x20000000
 8001d88:	431bde83 	.word	0x431bde83

08001d8c <HAL_PWREx_EnableVddUSB>:
  * @brief Enable VDDUSB supply.
  * @note  Remove VDDUSB electrical and logical isolation, once VDDUSB supply is present.
  * @retval None
  */
void HAL_PWREx_EnableVddUSB(void)
{
 8001d8c:	b480      	push	{r7}
 8001d8e:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR2, PWR_CR2_USV);
 8001d90:	4b05      	ldr	r3, [pc, #20]	; (8001da8 <HAL_PWREx_EnableVddUSB+0x1c>)
 8001d92:	685b      	ldr	r3, [r3, #4]
 8001d94:	4a04      	ldr	r2, [pc, #16]	; (8001da8 <HAL_PWREx_EnableVddUSB+0x1c>)
 8001d96:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001d9a:	6053      	str	r3, [r2, #4]
}
 8001d9c:	bf00      	nop
 8001d9e:	46bd      	mov	sp, r7
 8001da0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001da4:	4770      	bx	lr
 8001da6:	bf00      	nop
 8001da8:	40007000 	.word	0x40007000

08001dac <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001dac:	b580      	push	{r7, lr}
 8001dae:	b088      	sub	sp, #32
 8001db0:	af00      	add	r7, sp, #0
 8001db2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8001db4:	687b      	ldr	r3, [r7, #4]
 8001db6:	2b00      	cmp	r3, #0
 8001db8:	d102      	bne.n	8001dc0 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 8001dba:	2301      	movs	r3, #1
 8001dbc:	f000 bc16 	b.w	80025ec <HAL_RCC_OscConfig+0x840>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001dc0:	4ba0      	ldr	r3, [pc, #640]	; (8002044 <HAL_RCC_OscConfig+0x298>)
 8001dc2:	689b      	ldr	r3, [r3, #8]
 8001dc4:	f003 030c 	and.w	r3, r3, #12
 8001dc8:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8001dca:	4b9e      	ldr	r3, [pc, #632]	; (8002044 <HAL_RCC_OscConfig+0x298>)
 8001dcc:	68db      	ldr	r3, [r3, #12]
 8001dce:	f003 0303 	and.w	r3, r3, #3
 8001dd2:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8001dd4:	687b      	ldr	r3, [r7, #4]
 8001dd6:	681b      	ldr	r3, [r3, #0]
 8001dd8:	f003 0310 	and.w	r3, r3, #16
 8001ddc:	2b00      	cmp	r3, #0
 8001dde:	f000 80e4 	beq.w	8001faa <HAL_RCC_OscConfig+0x1fe>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8001de2:	69bb      	ldr	r3, [r7, #24]
 8001de4:	2b00      	cmp	r3, #0
 8001de6:	d007      	beq.n	8001df8 <HAL_RCC_OscConfig+0x4c>
 8001de8:	69bb      	ldr	r3, [r7, #24]
 8001dea:	2b0c      	cmp	r3, #12
 8001dec:	f040 808b 	bne.w	8001f06 <HAL_RCC_OscConfig+0x15a>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 8001df0:	697b      	ldr	r3, [r7, #20]
 8001df2:	2b01      	cmp	r3, #1
 8001df4:	f040 8087 	bne.w	8001f06 <HAL_RCC_OscConfig+0x15a>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8001df8:	4b92      	ldr	r3, [pc, #584]	; (8002044 <HAL_RCC_OscConfig+0x298>)
 8001dfa:	681b      	ldr	r3, [r3, #0]
 8001dfc:	f003 0302 	and.w	r3, r3, #2
 8001e00:	2b00      	cmp	r3, #0
 8001e02:	d005      	beq.n	8001e10 <HAL_RCC_OscConfig+0x64>
 8001e04:	687b      	ldr	r3, [r7, #4]
 8001e06:	699b      	ldr	r3, [r3, #24]
 8001e08:	2b00      	cmp	r3, #0
 8001e0a:	d101      	bne.n	8001e10 <HAL_RCC_OscConfig+0x64>
      {
        return HAL_ERROR;
 8001e0c:	2301      	movs	r3, #1
 8001e0e:	e3ed      	b.n	80025ec <HAL_RCC_OscConfig+0x840>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8001e10:	687b      	ldr	r3, [r7, #4]
 8001e12:	6a1a      	ldr	r2, [r3, #32]
 8001e14:	4b8b      	ldr	r3, [pc, #556]	; (8002044 <HAL_RCC_OscConfig+0x298>)
 8001e16:	681b      	ldr	r3, [r3, #0]
 8001e18:	f003 0308 	and.w	r3, r3, #8
 8001e1c:	2b00      	cmp	r3, #0
 8001e1e:	d004      	beq.n	8001e2a <HAL_RCC_OscConfig+0x7e>
 8001e20:	4b88      	ldr	r3, [pc, #544]	; (8002044 <HAL_RCC_OscConfig+0x298>)
 8001e22:	681b      	ldr	r3, [r3, #0]
 8001e24:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8001e28:	e005      	b.n	8001e36 <HAL_RCC_OscConfig+0x8a>
 8001e2a:	4b86      	ldr	r3, [pc, #536]	; (8002044 <HAL_RCC_OscConfig+0x298>)
 8001e2c:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001e30:	091b      	lsrs	r3, r3, #4
 8001e32:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8001e36:	4293      	cmp	r3, r2
 8001e38:	d223      	bcs.n	8001e82 <HAL_RCC_OscConfig+0xd6>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8001e3a:	687b      	ldr	r3, [r7, #4]
 8001e3c:	6a1b      	ldr	r3, [r3, #32]
 8001e3e:	4618      	mov	r0, r3
 8001e40:	f000 fde6 	bl	8002a10 <RCC_SetFlashLatencyFromMSIRange>
 8001e44:	4603      	mov	r3, r0
 8001e46:	2b00      	cmp	r3, #0
 8001e48:	d001      	beq.n	8001e4e <HAL_RCC_OscConfig+0xa2>
          {
            return HAL_ERROR;
 8001e4a:	2301      	movs	r3, #1
 8001e4c:	e3ce      	b.n	80025ec <HAL_RCC_OscConfig+0x840>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8001e4e:	4b7d      	ldr	r3, [pc, #500]	; (8002044 <HAL_RCC_OscConfig+0x298>)
 8001e50:	681b      	ldr	r3, [r3, #0]
 8001e52:	4a7c      	ldr	r2, [pc, #496]	; (8002044 <HAL_RCC_OscConfig+0x298>)
 8001e54:	f043 0308 	orr.w	r3, r3, #8
 8001e58:	6013      	str	r3, [r2, #0]
 8001e5a:	4b7a      	ldr	r3, [pc, #488]	; (8002044 <HAL_RCC_OscConfig+0x298>)
 8001e5c:	681b      	ldr	r3, [r3, #0]
 8001e5e:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001e62:	687b      	ldr	r3, [r7, #4]
 8001e64:	6a1b      	ldr	r3, [r3, #32]
 8001e66:	4977      	ldr	r1, [pc, #476]	; (8002044 <HAL_RCC_OscConfig+0x298>)
 8001e68:	4313      	orrs	r3, r2
 8001e6a:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8001e6c:	4b75      	ldr	r3, [pc, #468]	; (8002044 <HAL_RCC_OscConfig+0x298>)
 8001e6e:	685b      	ldr	r3, [r3, #4]
 8001e70:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8001e74:	687b      	ldr	r3, [r7, #4]
 8001e76:	69db      	ldr	r3, [r3, #28]
 8001e78:	021b      	lsls	r3, r3, #8
 8001e7a:	4972      	ldr	r1, [pc, #456]	; (8002044 <HAL_RCC_OscConfig+0x298>)
 8001e7c:	4313      	orrs	r3, r2
 8001e7e:	604b      	str	r3, [r1, #4]
 8001e80:	e025      	b.n	8001ece <HAL_RCC_OscConfig+0x122>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8001e82:	4b70      	ldr	r3, [pc, #448]	; (8002044 <HAL_RCC_OscConfig+0x298>)
 8001e84:	681b      	ldr	r3, [r3, #0]
 8001e86:	4a6f      	ldr	r2, [pc, #444]	; (8002044 <HAL_RCC_OscConfig+0x298>)
 8001e88:	f043 0308 	orr.w	r3, r3, #8
 8001e8c:	6013      	str	r3, [r2, #0]
 8001e8e:	4b6d      	ldr	r3, [pc, #436]	; (8002044 <HAL_RCC_OscConfig+0x298>)
 8001e90:	681b      	ldr	r3, [r3, #0]
 8001e92:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001e96:	687b      	ldr	r3, [r7, #4]
 8001e98:	6a1b      	ldr	r3, [r3, #32]
 8001e9a:	496a      	ldr	r1, [pc, #424]	; (8002044 <HAL_RCC_OscConfig+0x298>)
 8001e9c:	4313      	orrs	r3, r2
 8001e9e:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8001ea0:	4b68      	ldr	r3, [pc, #416]	; (8002044 <HAL_RCC_OscConfig+0x298>)
 8001ea2:	685b      	ldr	r3, [r3, #4]
 8001ea4:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8001ea8:	687b      	ldr	r3, [r7, #4]
 8001eaa:	69db      	ldr	r3, [r3, #28]
 8001eac:	021b      	lsls	r3, r3, #8
 8001eae:	4965      	ldr	r1, [pc, #404]	; (8002044 <HAL_RCC_OscConfig+0x298>)
 8001eb0:	4313      	orrs	r3, r2
 8001eb2:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 8001eb4:	69bb      	ldr	r3, [r7, #24]
 8001eb6:	2b00      	cmp	r3, #0
 8001eb8:	d109      	bne.n	8001ece <HAL_RCC_OscConfig+0x122>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8001eba:	687b      	ldr	r3, [r7, #4]
 8001ebc:	6a1b      	ldr	r3, [r3, #32]
 8001ebe:	4618      	mov	r0, r3
 8001ec0:	f000 fda6 	bl	8002a10 <RCC_SetFlashLatencyFromMSIRange>
 8001ec4:	4603      	mov	r3, r0
 8001ec6:	2b00      	cmp	r3, #0
 8001ec8:	d001      	beq.n	8001ece <HAL_RCC_OscConfig+0x122>
            {
              return HAL_ERROR;
 8001eca:	2301      	movs	r3, #1
 8001ecc:	e38e      	b.n	80025ec <HAL_RCC_OscConfig+0x840>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8001ece:	f000 fcbf 	bl	8002850 <HAL_RCC_GetSysClockFreq>
 8001ed2:	4602      	mov	r2, r0
 8001ed4:	4b5b      	ldr	r3, [pc, #364]	; (8002044 <HAL_RCC_OscConfig+0x298>)
 8001ed6:	689b      	ldr	r3, [r3, #8]
 8001ed8:	091b      	lsrs	r3, r3, #4
 8001eda:	f003 030f 	and.w	r3, r3, #15
 8001ede:	495a      	ldr	r1, [pc, #360]	; (8002048 <HAL_RCC_OscConfig+0x29c>)
 8001ee0:	5ccb      	ldrb	r3, [r1, r3]
 8001ee2:	f003 031f 	and.w	r3, r3, #31
 8001ee6:	fa22 f303 	lsr.w	r3, r2, r3
 8001eea:	4a58      	ldr	r2, [pc, #352]	; (800204c <HAL_RCC_OscConfig+0x2a0>)
 8001eec:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 8001eee:	4b58      	ldr	r3, [pc, #352]	; (8002050 <HAL_RCC_OscConfig+0x2a4>)
 8001ef0:	681b      	ldr	r3, [r3, #0]
 8001ef2:	4618      	mov	r0, r3
 8001ef4:	f7fe fa50 	bl	8000398 <HAL_InitTick>
 8001ef8:	4603      	mov	r3, r0
 8001efa:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 8001efc:	7bfb      	ldrb	r3, [r7, #15]
 8001efe:	2b00      	cmp	r3, #0
 8001f00:	d052      	beq.n	8001fa8 <HAL_RCC_OscConfig+0x1fc>
        {
          return status;
 8001f02:	7bfb      	ldrb	r3, [r7, #15]
 8001f04:	e372      	b.n	80025ec <HAL_RCC_OscConfig+0x840>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8001f06:	687b      	ldr	r3, [r7, #4]
 8001f08:	699b      	ldr	r3, [r3, #24]
 8001f0a:	2b00      	cmp	r3, #0
 8001f0c:	d032      	beq.n	8001f74 <HAL_RCC_OscConfig+0x1c8>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8001f0e:	4b4d      	ldr	r3, [pc, #308]	; (8002044 <HAL_RCC_OscConfig+0x298>)
 8001f10:	681b      	ldr	r3, [r3, #0]
 8001f12:	4a4c      	ldr	r2, [pc, #304]	; (8002044 <HAL_RCC_OscConfig+0x298>)
 8001f14:	f043 0301 	orr.w	r3, r3, #1
 8001f18:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8001f1a:	f7fe fb3b 	bl	8000594 <HAL_GetTick>
 8001f1e:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8001f20:	e008      	b.n	8001f34 <HAL_RCC_OscConfig+0x188>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8001f22:	f7fe fb37 	bl	8000594 <HAL_GetTick>
 8001f26:	4602      	mov	r2, r0
 8001f28:	693b      	ldr	r3, [r7, #16]
 8001f2a:	1ad3      	subs	r3, r2, r3
 8001f2c:	2b02      	cmp	r3, #2
 8001f2e:	d901      	bls.n	8001f34 <HAL_RCC_OscConfig+0x188>
          {
            return HAL_TIMEOUT;
 8001f30:	2303      	movs	r3, #3
 8001f32:	e35b      	b.n	80025ec <HAL_RCC_OscConfig+0x840>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8001f34:	4b43      	ldr	r3, [pc, #268]	; (8002044 <HAL_RCC_OscConfig+0x298>)
 8001f36:	681b      	ldr	r3, [r3, #0]
 8001f38:	f003 0302 	and.w	r3, r3, #2
 8001f3c:	2b00      	cmp	r3, #0
 8001f3e:	d0f0      	beq.n	8001f22 <HAL_RCC_OscConfig+0x176>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8001f40:	4b40      	ldr	r3, [pc, #256]	; (8002044 <HAL_RCC_OscConfig+0x298>)
 8001f42:	681b      	ldr	r3, [r3, #0]
 8001f44:	4a3f      	ldr	r2, [pc, #252]	; (8002044 <HAL_RCC_OscConfig+0x298>)
 8001f46:	f043 0308 	orr.w	r3, r3, #8
 8001f4a:	6013      	str	r3, [r2, #0]
 8001f4c:	4b3d      	ldr	r3, [pc, #244]	; (8002044 <HAL_RCC_OscConfig+0x298>)
 8001f4e:	681b      	ldr	r3, [r3, #0]
 8001f50:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001f54:	687b      	ldr	r3, [r7, #4]
 8001f56:	6a1b      	ldr	r3, [r3, #32]
 8001f58:	493a      	ldr	r1, [pc, #232]	; (8002044 <HAL_RCC_OscConfig+0x298>)
 8001f5a:	4313      	orrs	r3, r2
 8001f5c:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8001f5e:	4b39      	ldr	r3, [pc, #228]	; (8002044 <HAL_RCC_OscConfig+0x298>)
 8001f60:	685b      	ldr	r3, [r3, #4]
 8001f62:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8001f66:	687b      	ldr	r3, [r7, #4]
 8001f68:	69db      	ldr	r3, [r3, #28]
 8001f6a:	021b      	lsls	r3, r3, #8
 8001f6c:	4935      	ldr	r1, [pc, #212]	; (8002044 <HAL_RCC_OscConfig+0x298>)
 8001f6e:	4313      	orrs	r3, r2
 8001f70:	604b      	str	r3, [r1, #4]
 8001f72:	e01a      	b.n	8001faa <HAL_RCC_OscConfig+0x1fe>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8001f74:	4b33      	ldr	r3, [pc, #204]	; (8002044 <HAL_RCC_OscConfig+0x298>)
 8001f76:	681b      	ldr	r3, [r3, #0]
 8001f78:	4a32      	ldr	r2, [pc, #200]	; (8002044 <HAL_RCC_OscConfig+0x298>)
 8001f7a:	f023 0301 	bic.w	r3, r3, #1
 8001f7e:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8001f80:	f7fe fb08 	bl	8000594 <HAL_GetTick>
 8001f84:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8001f86:	e008      	b.n	8001f9a <HAL_RCC_OscConfig+0x1ee>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8001f88:	f7fe fb04 	bl	8000594 <HAL_GetTick>
 8001f8c:	4602      	mov	r2, r0
 8001f8e:	693b      	ldr	r3, [r7, #16]
 8001f90:	1ad3      	subs	r3, r2, r3
 8001f92:	2b02      	cmp	r3, #2
 8001f94:	d901      	bls.n	8001f9a <HAL_RCC_OscConfig+0x1ee>
          {
            return HAL_TIMEOUT;
 8001f96:	2303      	movs	r3, #3
 8001f98:	e328      	b.n	80025ec <HAL_RCC_OscConfig+0x840>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8001f9a:	4b2a      	ldr	r3, [pc, #168]	; (8002044 <HAL_RCC_OscConfig+0x298>)
 8001f9c:	681b      	ldr	r3, [r3, #0]
 8001f9e:	f003 0302 	and.w	r3, r3, #2
 8001fa2:	2b00      	cmp	r3, #0
 8001fa4:	d1f0      	bne.n	8001f88 <HAL_RCC_OscConfig+0x1dc>
 8001fa6:	e000      	b.n	8001faa <HAL_RCC_OscConfig+0x1fe>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8001fa8:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001faa:	687b      	ldr	r3, [r7, #4]
 8001fac:	681b      	ldr	r3, [r3, #0]
 8001fae:	f003 0301 	and.w	r3, r3, #1
 8001fb2:	2b00      	cmp	r3, #0
 8001fb4:	d073      	beq.n	800209e <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 8001fb6:	69bb      	ldr	r3, [r7, #24]
 8001fb8:	2b08      	cmp	r3, #8
 8001fba:	d005      	beq.n	8001fc8 <HAL_RCC_OscConfig+0x21c>
 8001fbc:	69bb      	ldr	r3, [r7, #24]
 8001fbe:	2b0c      	cmp	r3, #12
 8001fc0:	d10e      	bne.n	8001fe0 <HAL_RCC_OscConfig+0x234>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 8001fc2:	697b      	ldr	r3, [r7, #20]
 8001fc4:	2b03      	cmp	r3, #3
 8001fc6:	d10b      	bne.n	8001fe0 <HAL_RCC_OscConfig+0x234>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001fc8:	4b1e      	ldr	r3, [pc, #120]	; (8002044 <HAL_RCC_OscConfig+0x298>)
 8001fca:	681b      	ldr	r3, [r3, #0]
 8001fcc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001fd0:	2b00      	cmp	r3, #0
 8001fd2:	d063      	beq.n	800209c <HAL_RCC_OscConfig+0x2f0>
 8001fd4:	687b      	ldr	r3, [r7, #4]
 8001fd6:	685b      	ldr	r3, [r3, #4]
 8001fd8:	2b00      	cmp	r3, #0
 8001fda:	d15f      	bne.n	800209c <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 8001fdc:	2301      	movs	r3, #1
 8001fde:	e305      	b.n	80025ec <HAL_RCC_OscConfig+0x840>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001fe0:	687b      	ldr	r3, [r7, #4]
 8001fe2:	685b      	ldr	r3, [r3, #4]
 8001fe4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001fe8:	d106      	bne.n	8001ff8 <HAL_RCC_OscConfig+0x24c>
 8001fea:	4b16      	ldr	r3, [pc, #88]	; (8002044 <HAL_RCC_OscConfig+0x298>)
 8001fec:	681b      	ldr	r3, [r3, #0]
 8001fee:	4a15      	ldr	r2, [pc, #84]	; (8002044 <HAL_RCC_OscConfig+0x298>)
 8001ff0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001ff4:	6013      	str	r3, [r2, #0]
 8001ff6:	e01d      	b.n	8002034 <HAL_RCC_OscConfig+0x288>
 8001ff8:	687b      	ldr	r3, [r7, #4]
 8001ffa:	685b      	ldr	r3, [r3, #4]
 8001ffc:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002000:	d10c      	bne.n	800201c <HAL_RCC_OscConfig+0x270>
 8002002:	4b10      	ldr	r3, [pc, #64]	; (8002044 <HAL_RCC_OscConfig+0x298>)
 8002004:	681b      	ldr	r3, [r3, #0]
 8002006:	4a0f      	ldr	r2, [pc, #60]	; (8002044 <HAL_RCC_OscConfig+0x298>)
 8002008:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800200c:	6013      	str	r3, [r2, #0]
 800200e:	4b0d      	ldr	r3, [pc, #52]	; (8002044 <HAL_RCC_OscConfig+0x298>)
 8002010:	681b      	ldr	r3, [r3, #0]
 8002012:	4a0c      	ldr	r2, [pc, #48]	; (8002044 <HAL_RCC_OscConfig+0x298>)
 8002014:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002018:	6013      	str	r3, [r2, #0]
 800201a:	e00b      	b.n	8002034 <HAL_RCC_OscConfig+0x288>
 800201c:	4b09      	ldr	r3, [pc, #36]	; (8002044 <HAL_RCC_OscConfig+0x298>)
 800201e:	681b      	ldr	r3, [r3, #0]
 8002020:	4a08      	ldr	r2, [pc, #32]	; (8002044 <HAL_RCC_OscConfig+0x298>)
 8002022:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002026:	6013      	str	r3, [r2, #0]
 8002028:	4b06      	ldr	r3, [pc, #24]	; (8002044 <HAL_RCC_OscConfig+0x298>)
 800202a:	681b      	ldr	r3, [r3, #0]
 800202c:	4a05      	ldr	r2, [pc, #20]	; (8002044 <HAL_RCC_OscConfig+0x298>)
 800202e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002032:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002034:	687b      	ldr	r3, [r7, #4]
 8002036:	685b      	ldr	r3, [r3, #4]
 8002038:	2b00      	cmp	r3, #0
 800203a:	d01b      	beq.n	8002074 <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800203c:	f7fe faaa 	bl	8000594 <HAL_GetTick>
 8002040:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8002042:	e010      	b.n	8002066 <HAL_RCC_OscConfig+0x2ba>
 8002044:	40021000 	.word	0x40021000
 8002048:	08007760 	.word	0x08007760
 800204c:	20000000 	.word	0x20000000
 8002050:	20000004 	.word	0x20000004
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002054:	f7fe fa9e 	bl	8000594 <HAL_GetTick>
 8002058:	4602      	mov	r2, r0
 800205a:	693b      	ldr	r3, [r7, #16]
 800205c:	1ad3      	subs	r3, r2, r3
 800205e:	2b64      	cmp	r3, #100	; 0x64
 8002060:	d901      	bls.n	8002066 <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 8002062:	2303      	movs	r3, #3
 8002064:	e2c2      	b.n	80025ec <HAL_RCC_OscConfig+0x840>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8002066:	4baf      	ldr	r3, [pc, #700]	; (8002324 <HAL_RCC_OscConfig+0x578>)
 8002068:	681b      	ldr	r3, [r3, #0]
 800206a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800206e:	2b00      	cmp	r3, #0
 8002070:	d0f0      	beq.n	8002054 <HAL_RCC_OscConfig+0x2a8>
 8002072:	e014      	b.n	800209e <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002074:	f7fe fa8e 	bl	8000594 <HAL_GetTick>
 8002078:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800207a:	e008      	b.n	800208e <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800207c:	f7fe fa8a 	bl	8000594 <HAL_GetTick>
 8002080:	4602      	mov	r2, r0
 8002082:	693b      	ldr	r3, [r7, #16]
 8002084:	1ad3      	subs	r3, r2, r3
 8002086:	2b64      	cmp	r3, #100	; 0x64
 8002088:	d901      	bls.n	800208e <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 800208a:	2303      	movs	r3, #3
 800208c:	e2ae      	b.n	80025ec <HAL_RCC_OscConfig+0x840>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800208e:	4ba5      	ldr	r3, [pc, #660]	; (8002324 <HAL_RCC_OscConfig+0x578>)
 8002090:	681b      	ldr	r3, [r3, #0]
 8002092:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002096:	2b00      	cmp	r3, #0
 8002098:	d1f0      	bne.n	800207c <HAL_RCC_OscConfig+0x2d0>
 800209a:	e000      	b.n	800209e <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800209c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800209e:	687b      	ldr	r3, [r7, #4]
 80020a0:	681b      	ldr	r3, [r3, #0]
 80020a2:	f003 0302 	and.w	r3, r3, #2
 80020a6:	2b00      	cmp	r3, #0
 80020a8:	d060      	beq.n	800216c <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 80020aa:	69bb      	ldr	r3, [r7, #24]
 80020ac:	2b04      	cmp	r3, #4
 80020ae:	d005      	beq.n	80020bc <HAL_RCC_OscConfig+0x310>
 80020b0:	69bb      	ldr	r3, [r7, #24]
 80020b2:	2b0c      	cmp	r3, #12
 80020b4:	d119      	bne.n	80020ea <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 80020b6:	697b      	ldr	r3, [r7, #20]
 80020b8:	2b02      	cmp	r3, #2
 80020ba:	d116      	bne.n	80020ea <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80020bc:	4b99      	ldr	r3, [pc, #612]	; (8002324 <HAL_RCC_OscConfig+0x578>)
 80020be:	681b      	ldr	r3, [r3, #0]
 80020c0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80020c4:	2b00      	cmp	r3, #0
 80020c6:	d005      	beq.n	80020d4 <HAL_RCC_OscConfig+0x328>
 80020c8:	687b      	ldr	r3, [r7, #4]
 80020ca:	68db      	ldr	r3, [r3, #12]
 80020cc:	2b00      	cmp	r3, #0
 80020ce:	d101      	bne.n	80020d4 <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 80020d0:	2301      	movs	r3, #1
 80020d2:	e28b      	b.n	80025ec <HAL_RCC_OscConfig+0x840>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80020d4:	4b93      	ldr	r3, [pc, #588]	; (8002324 <HAL_RCC_OscConfig+0x578>)
 80020d6:	685b      	ldr	r3, [r3, #4]
 80020d8:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 80020dc:	687b      	ldr	r3, [r7, #4]
 80020de:	691b      	ldr	r3, [r3, #16]
 80020e0:	061b      	lsls	r3, r3, #24
 80020e2:	4990      	ldr	r1, [pc, #576]	; (8002324 <HAL_RCC_OscConfig+0x578>)
 80020e4:	4313      	orrs	r3, r2
 80020e6:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80020e8:	e040      	b.n	800216c <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80020ea:	687b      	ldr	r3, [r7, #4]
 80020ec:	68db      	ldr	r3, [r3, #12]
 80020ee:	2b00      	cmp	r3, #0
 80020f0:	d023      	beq.n	800213a <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80020f2:	4b8c      	ldr	r3, [pc, #560]	; (8002324 <HAL_RCC_OscConfig+0x578>)
 80020f4:	681b      	ldr	r3, [r3, #0]
 80020f6:	4a8b      	ldr	r2, [pc, #556]	; (8002324 <HAL_RCC_OscConfig+0x578>)
 80020f8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80020fc:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80020fe:	f7fe fa49 	bl	8000594 <HAL_GetTick>
 8002102:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002104:	e008      	b.n	8002118 <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002106:	f7fe fa45 	bl	8000594 <HAL_GetTick>
 800210a:	4602      	mov	r2, r0
 800210c:	693b      	ldr	r3, [r7, #16]
 800210e:	1ad3      	subs	r3, r2, r3
 8002110:	2b02      	cmp	r3, #2
 8002112:	d901      	bls.n	8002118 <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 8002114:	2303      	movs	r3, #3
 8002116:	e269      	b.n	80025ec <HAL_RCC_OscConfig+0x840>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002118:	4b82      	ldr	r3, [pc, #520]	; (8002324 <HAL_RCC_OscConfig+0x578>)
 800211a:	681b      	ldr	r3, [r3, #0]
 800211c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002120:	2b00      	cmp	r3, #0
 8002122:	d0f0      	beq.n	8002106 <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002124:	4b7f      	ldr	r3, [pc, #508]	; (8002324 <HAL_RCC_OscConfig+0x578>)
 8002126:	685b      	ldr	r3, [r3, #4]
 8002128:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 800212c:	687b      	ldr	r3, [r7, #4]
 800212e:	691b      	ldr	r3, [r3, #16]
 8002130:	061b      	lsls	r3, r3, #24
 8002132:	497c      	ldr	r1, [pc, #496]	; (8002324 <HAL_RCC_OscConfig+0x578>)
 8002134:	4313      	orrs	r3, r2
 8002136:	604b      	str	r3, [r1, #4]
 8002138:	e018      	b.n	800216c <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800213a:	4b7a      	ldr	r3, [pc, #488]	; (8002324 <HAL_RCC_OscConfig+0x578>)
 800213c:	681b      	ldr	r3, [r3, #0]
 800213e:	4a79      	ldr	r2, [pc, #484]	; (8002324 <HAL_RCC_OscConfig+0x578>)
 8002140:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8002144:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002146:	f7fe fa25 	bl	8000594 <HAL_GetTick>
 800214a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 800214c:	e008      	b.n	8002160 <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800214e:	f7fe fa21 	bl	8000594 <HAL_GetTick>
 8002152:	4602      	mov	r2, r0
 8002154:	693b      	ldr	r3, [r7, #16]
 8002156:	1ad3      	subs	r3, r2, r3
 8002158:	2b02      	cmp	r3, #2
 800215a:	d901      	bls.n	8002160 <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 800215c:	2303      	movs	r3, #3
 800215e:	e245      	b.n	80025ec <HAL_RCC_OscConfig+0x840>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8002160:	4b70      	ldr	r3, [pc, #448]	; (8002324 <HAL_RCC_OscConfig+0x578>)
 8002162:	681b      	ldr	r3, [r3, #0]
 8002164:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002168:	2b00      	cmp	r3, #0
 800216a:	d1f0      	bne.n	800214e <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800216c:	687b      	ldr	r3, [r7, #4]
 800216e:	681b      	ldr	r3, [r3, #0]
 8002170:	f003 0308 	and.w	r3, r3, #8
 8002174:	2b00      	cmp	r3, #0
 8002176:	d03c      	beq.n	80021f2 <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8002178:	687b      	ldr	r3, [r7, #4]
 800217a:	695b      	ldr	r3, [r3, #20]
 800217c:	2b00      	cmp	r3, #0
 800217e:	d01c      	beq.n	80021ba <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002180:	4b68      	ldr	r3, [pc, #416]	; (8002324 <HAL_RCC_OscConfig+0x578>)
 8002182:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002186:	4a67      	ldr	r2, [pc, #412]	; (8002324 <HAL_RCC_OscConfig+0x578>)
 8002188:	f043 0301 	orr.w	r3, r3, #1
 800218c:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002190:	f7fe fa00 	bl	8000594 <HAL_GetTick>
 8002194:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8002196:	e008      	b.n	80021aa <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002198:	f7fe f9fc 	bl	8000594 <HAL_GetTick>
 800219c:	4602      	mov	r2, r0
 800219e:	693b      	ldr	r3, [r7, #16]
 80021a0:	1ad3      	subs	r3, r2, r3
 80021a2:	2b02      	cmp	r3, #2
 80021a4:	d901      	bls.n	80021aa <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 80021a6:	2303      	movs	r3, #3
 80021a8:	e220      	b.n	80025ec <HAL_RCC_OscConfig+0x840>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80021aa:	4b5e      	ldr	r3, [pc, #376]	; (8002324 <HAL_RCC_OscConfig+0x578>)
 80021ac:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80021b0:	f003 0302 	and.w	r3, r3, #2
 80021b4:	2b00      	cmp	r3, #0
 80021b6:	d0ef      	beq.n	8002198 <HAL_RCC_OscConfig+0x3ec>
 80021b8:	e01b      	b.n	80021f2 <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80021ba:	4b5a      	ldr	r3, [pc, #360]	; (8002324 <HAL_RCC_OscConfig+0x578>)
 80021bc:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80021c0:	4a58      	ldr	r2, [pc, #352]	; (8002324 <HAL_RCC_OscConfig+0x578>)
 80021c2:	f023 0301 	bic.w	r3, r3, #1
 80021c6:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80021ca:	f7fe f9e3 	bl	8000594 <HAL_GetTick>
 80021ce:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80021d0:	e008      	b.n	80021e4 <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80021d2:	f7fe f9df 	bl	8000594 <HAL_GetTick>
 80021d6:	4602      	mov	r2, r0
 80021d8:	693b      	ldr	r3, [r7, #16]
 80021da:	1ad3      	subs	r3, r2, r3
 80021dc:	2b02      	cmp	r3, #2
 80021de:	d901      	bls.n	80021e4 <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 80021e0:	2303      	movs	r3, #3
 80021e2:	e203      	b.n	80025ec <HAL_RCC_OscConfig+0x840>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80021e4:	4b4f      	ldr	r3, [pc, #316]	; (8002324 <HAL_RCC_OscConfig+0x578>)
 80021e6:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80021ea:	f003 0302 	and.w	r3, r3, #2
 80021ee:	2b00      	cmp	r3, #0
 80021f0:	d1ef      	bne.n	80021d2 <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80021f2:	687b      	ldr	r3, [r7, #4]
 80021f4:	681b      	ldr	r3, [r3, #0]
 80021f6:	f003 0304 	and.w	r3, r3, #4
 80021fa:	2b00      	cmp	r3, #0
 80021fc:	f000 80a6 	beq.w	800234c <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002200:	2300      	movs	r3, #0
 8002202:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 8002204:	4b47      	ldr	r3, [pc, #284]	; (8002324 <HAL_RCC_OscConfig+0x578>)
 8002206:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002208:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800220c:	2b00      	cmp	r3, #0
 800220e:	d10d      	bne.n	800222c <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002210:	4b44      	ldr	r3, [pc, #272]	; (8002324 <HAL_RCC_OscConfig+0x578>)
 8002212:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002214:	4a43      	ldr	r2, [pc, #268]	; (8002324 <HAL_RCC_OscConfig+0x578>)
 8002216:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800221a:	6593      	str	r3, [r2, #88]	; 0x58
 800221c:	4b41      	ldr	r3, [pc, #260]	; (8002324 <HAL_RCC_OscConfig+0x578>)
 800221e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002220:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002224:	60bb      	str	r3, [r7, #8]
 8002226:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002228:	2301      	movs	r3, #1
 800222a:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800222c:	4b3e      	ldr	r3, [pc, #248]	; (8002328 <HAL_RCC_OscConfig+0x57c>)
 800222e:	681b      	ldr	r3, [r3, #0]
 8002230:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002234:	2b00      	cmp	r3, #0
 8002236:	d118      	bne.n	800226a <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8002238:	4b3b      	ldr	r3, [pc, #236]	; (8002328 <HAL_RCC_OscConfig+0x57c>)
 800223a:	681b      	ldr	r3, [r3, #0]
 800223c:	4a3a      	ldr	r2, [pc, #232]	; (8002328 <HAL_RCC_OscConfig+0x57c>)
 800223e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002242:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002244:	f7fe f9a6 	bl	8000594 <HAL_GetTick>
 8002248:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800224a:	e008      	b.n	800225e <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800224c:	f7fe f9a2 	bl	8000594 <HAL_GetTick>
 8002250:	4602      	mov	r2, r0
 8002252:	693b      	ldr	r3, [r7, #16]
 8002254:	1ad3      	subs	r3, r2, r3
 8002256:	2b02      	cmp	r3, #2
 8002258:	d901      	bls.n	800225e <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 800225a:	2303      	movs	r3, #3
 800225c:	e1c6      	b.n	80025ec <HAL_RCC_OscConfig+0x840>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800225e:	4b32      	ldr	r3, [pc, #200]	; (8002328 <HAL_RCC_OscConfig+0x57c>)
 8002260:	681b      	ldr	r3, [r3, #0]
 8002262:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002266:	2b00      	cmp	r3, #0
 8002268:	d0f0      	beq.n	800224c <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800226a:	687b      	ldr	r3, [r7, #4]
 800226c:	689b      	ldr	r3, [r3, #8]
 800226e:	2b01      	cmp	r3, #1
 8002270:	d108      	bne.n	8002284 <HAL_RCC_OscConfig+0x4d8>
 8002272:	4b2c      	ldr	r3, [pc, #176]	; (8002324 <HAL_RCC_OscConfig+0x578>)
 8002274:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002278:	4a2a      	ldr	r2, [pc, #168]	; (8002324 <HAL_RCC_OscConfig+0x578>)
 800227a:	f043 0301 	orr.w	r3, r3, #1
 800227e:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8002282:	e024      	b.n	80022ce <HAL_RCC_OscConfig+0x522>
 8002284:	687b      	ldr	r3, [r7, #4]
 8002286:	689b      	ldr	r3, [r3, #8]
 8002288:	2b05      	cmp	r3, #5
 800228a:	d110      	bne.n	80022ae <HAL_RCC_OscConfig+0x502>
 800228c:	4b25      	ldr	r3, [pc, #148]	; (8002324 <HAL_RCC_OscConfig+0x578>)
 800228e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002292:	4a24      	ldr	r2, [pc, #144]	; (8002324 <HAL_RCC_OscConfig+0x578>)
 8002294:	f043 0304 	orr.w	r3, r3, #4
 8002298:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 800229c:	4b21      	ldr	r3, [pc, #132]	; (8002324 <HAL_RCC_OscConfig+0x578>)
 800229e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80022a2:	4a20      	ldr	r2, [pc, #128]	; (8002324 <HAL_RCC_OscConfig+0x578>)
 80022a4:	f043 0301 	orr.w	r3, r3, #1
 80022a8:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80022ac:	e00f      	b.n	80022ce <HAL_RCC_OscConfig+0x522>
 80022ae:	4b1d      	ldr	r3, [pc, #116]	; (8002324 <HAL_RCC_OscConfig+0x578>)
 80022b0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80022b4:	4a1b      	ldr	r2, [pc, #108]	; (8002324 <HAL_RCC_OscConfig+0x578>)
 80022b6:	f023 0301 	bic.w	r3, r3, #1
 80022ba:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80022be:	4b19      	ldr	r3, [pc, #100]	; (8002324 <HAL_RCC_OscConfig+0x578>)
 80022c0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80022c4:	4a17      	ldr	r2, [pc, #92]	; (8002324 <HAL_RCC_OscConfig+0x578>)
 80022c6:	f023 0304 	bic.w	r3, r3, #4
 80022ca:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80022ce:	687b      	ldr	r3, [r7, #4]
 80022d0:	689b      	ldr	r3, [r3, #8]
 80022d2:	2b00      	cmp	r3, #0
 80022d4:	d016      	beq.n	8002304 <HAL_RCC_OscConfig+0x558>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80022d6:	f7fe f95d 	bl	8000594 <HAL_GetTick>
 80022da:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80022dc:	e00a      	b.n	80022f4 <HAL_RCC_OscConfig+0x548>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80022de:	f7fe f959 	bl	8000594 <HAL_GetTick>
 80022e2:	4602      	mov	r2, r0
 80022e4:	693b      	ldr	r3, [r7, #16]
 80022e6:	1ad3      	subs	r3, r2, r3
 80022e8:	f241 3288 	movw	r2, #5000	; 0x1388
 80022ec:	4293      	cmp	r3, r2
 80022ee:	d901      	bls.n	80022f4 <HAL_RCC_OscConfig+0x548>
        {
          return HAL_TIMEOUT;
 80022f0:	2303      	movs	r3, #3
 80022f2:	e17b      	b.n	80025ec <HAL_RCC_OscConfig+0x840>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80022f4:	4b0b      	ldr	r3, [pc, #44]	; (8002324 <HAL_RCC_OscConfig+0x578>)
 80022f6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80022fa:	f003 0302 	and.w	r3, r3, #2
 80022fe:	2b00      	cmp	r3, #0
 8002300:	d0ed      	beq.n	80022de <HAL_RCC_OscConfig+0x532>
 8002302:	e01a      	b.n	800233a <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002304:	f7fe f946 	bl	8000594 <HAL_GetTick>
 8002308:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 800230a:	e00f      	b.n	800232c <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800230c:	f7fe f942 	bl	8000594 <HAL_GetTick>
 8002310:	4602      	mov	r2, r0
 8002312:	693b      	ldr	r3, [r7, #16]
 8002314:	1ad3      	subs	r3, r2, r3
 8002316:	f241 3288 	movw	r2, #5000	; 0x1388
 800231a:	4293      	cmp	r3, r2
 800231c:	d906      	bls.n	800232c <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 800231e:	2303      	movs	r3, #3
 8002320:	e164      	b.n	80025ec <HAL_RCC_OscConfig+0x840>
 8002322:	bf00      	nop
 8002324:	40021000 	.word	0x40021000
 8002328:	40007000 	.word	0x40007000
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 800232c:	4ba8      	ldr	r3, [pc, #672]	; (80025d0 <HAL_RCC_OscConfig+0x824>)
 800232e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002332:	f003 0302 	and.w	r3, r3, #2
 8002336:	2b00      	cmp	r3, #0
 8002338:	d1e8      	bne.n	800230c <HAL_RCC_OscConfig+0x560>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800233a:	7ffb      	ldrb	r3, [r7, #31]
 800233c:	2b01      	cmp	r3, #1
 800233e:	d105      	bne.n	800234c <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002340:	4ba3      	ldr	r3, [pc, #652]	; (80025d0 <HAL_RCC_OscConfig+0x824>)
 8002342:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002344:	4aa2      	ldr	r2, [pc, #648]	; (80025d0 <HAL_RCC_OscConfig+0x824>)
 8002346:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800234a:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }
#if defined(RCC_HSI48_SUPPORT)
  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 800234c:	687b      	ldr	r3, [r7, #4]
 800234e:	681b      	ldr	r3, [r3, #0]
 8002350:	f003 0320 	and.w	r3, r3, #32
 8002354:	2b00      	cmp	r3, #0
 8002356:	d03c      	beq.n	80023d2 <HAL_RCC_OscConfig+0x626>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the LSI State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8002358:	687b      	ldr	r3, [r7, #4]
 800235a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800235c:	2b00      	cmp	r3, #0
 800235e:	d01c      	beq.n	800239a <HAL_RCC_OscConfig+0x5ee>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8002360:	4b9b      	ldr	r3, [pc, #620]	; (80025d0 <HAL_RCC_OscConfig+0x824>)
 8002362:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8002366:	4a9a      	ldr	r2, [pc, #616]	; (80025d0 <HAL_RCC_OscConfig+0x824>)
 8002368:	f043 0301 	orr.w	r3, r3, #1
 800236c:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002370:	f7fe f910 	bl	8000594 <HAL_GetTick>
 8002374:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8002376:	e008      	b.n	800238a <HAL_RCC_OscConfig+0x5de>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8002378:	f7fe f90c 	bl	8000594 <HAL_GetTick>
 800237c:	4602      	mov	r2, r0
 800237e:	693b      	ldr	r3, [r7, #16]
 8002380:	1ad3      	subs	r3, r2, r3
 8002382:	2b02      	cmp	r3, #2
 8002384:	d901      	bls.n	800238a <HAL_RCC_OscConfig+0x5de>
        {
          return HAL_TIMEOUT;
 8002386:	2303      	movs	r3, #3
 8002388:	e130      	b.n	80025ec <HAL_RCC_OscConfig+0x840>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 800238a:	4b91      	ldr	r3, [pc, #580]	; (80025d0 <HAL_RCC_OscConfig+0x824>)
 800238c:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8002390:	f003 0302 	and.w	r3, r3, #2
 8002394:	2b00      	cmp	r3, #0
 8002396:	d0ef      	beq.n	8002378 <HAL_RCC_OscConfig+0x5cc>
 8002398:	e01b      	b.n	80023d2 <HAL_RCC_OscConfig+0x626>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 800239a:	4b8d      	ldr	r3, [pc, #564]	; (80025d0 <HAL_RCC_OscConfig+0x824>)
 800239c:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80023a0:	4a8b      	ldr	r2, [pc, #556]	; (80025d0 <HAL_RCC_OscConfig+0x824>)
 80023a2:	f023 0301 	bic.w	r3, r3, #1
 80023a6:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80023aa:	f7fe f8f3 	bl	8000594 <HAL_GetTick>
 80023ae:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 80023b0:	e008      	b.n	80023c4 <HAL_RCC_OscConfig+0x618>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80023b2:	f7fe f8ef 	bl	8000594 <HAL_GetTick>
 80023b6:	4602      	mov	r2, r0
 80023b8:	693b      	ldr	r3, [r7, #16]
 80023ba:	1ad3      	subs	r3, r2, r3
 80023bc:	2b02      	cmp	r3, #2
 80023be:	d901      	bls.n	80023c4 <HAL_RCC_OscConfig+0x618>
        {
          return HAL_TIMEOUT;
 80023c0:	2303      	movs	r3, #3
 80023c2:	e113      	b.n	80025ec <HAL_RCC_OscConfig+0x840>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 80023c4:	4b82      	ldr	r3, [pc, #520]	; (80025d0 <HAL_RCC_OscConfig+0x824>)
 80023c6:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80023ca:	f003 0302 	and.w	r3, r3, #2
 80023ce:	2b00      	cmp	r3, #0
 80023d0:	d1ef      	bne.n	80023b2 <HAL_RCC_OscConfig+0x606>
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 80023d2:	687b      	ldr	r3, [r7, #4]
 80023d4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80023d6:	2b00      	cmp	r3, #0
 80023d8:	f000 8107 	beq.w	80025ea <HAL_RCC_OscConfig+0x83e>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 80023dc:	687b      	ldr	r3, [r7, #4]
 80023de:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80023e0:	2b02      	cmp	r3, #2
 80023e2:	f040 80cb 	bne.w	800257c <HAL_RCC_OscConfig+0x7d0>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 80023e6:	4b7a      	ldr	r3, [pc, #488]	; (80025d0 <HAL_RCC_OscConfig+0x824>)
 80023e8:	68db      	ldr	r3, [r3, #12]
 80023ea:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 80023ec:	697b      	ldr	r3, [r7, #20]
 80023ee:	f003 0203 	and.w	r2, r3, #3
 80023f2:	687b      	ldr	r3, [r7, #4]
 80023f4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80023f6:	429a      	cmp	r2, r3
 80023f8:	d12c      	bne.n	8002454 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 80023fa:	697b      	ldr	r3, [r7, #20]
 80023fc:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8002400:	687b      	ldr	r3, [r7, #4]
 8002402:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002404:	3b01      	subs	r3, #1
 8002406:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8002408:	429a      	cmp	r2, r3
 800240a:	d123      	bne.n	8002454 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 800240c:	697b      	ldr	r3, [r7, #20]
 800240e:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 8002412:	687b      	ldr	r3, [r7, #4]
 8002414:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002416:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8002418:	429a      	cmp	r2, r3
 800241a:	d11b      	bne.n	8002454 <HAL_RCC_OscConfig+0x6a8>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 800241c:	697b      	ldr	r3, [r7, #20]
 800241e:	f003 4278 	and.w	r2, r3, #4160749568	; 0xf8000000
 8002422:	687b      	ldr	r3, [r7, #4]
 8002424:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002426:	06db      	lsls	r3, r3, #27
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8002428:	429a      	cmp	r2, r3
 800242a:	d113      	bne.n	8002454 <HAL_RCC_OscConfig+0x6a8>
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 800242c:	697b      	ldr	r3, [r7, #20]
 800242e:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 8002432:	687b      	ldr	r3, [r7, #4]
 8002434:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002436:	085b      	lsrs	r3, r3, #1
 8002438:	3b01      	subs	r3, #1
 800243a:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 800243c:	429a      	cmp	r2, r3
 800243e:	d109      	bne.n	8002454 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8002440:	697b      	ldr	r3, [r7, #20]
 8002442:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 8002446:	687b      	ldr	r3, [r7, #4]
 8002448:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800244a:	085b      	lsrs	r3, r3, #1
 800244c:	3b01      	subs	r3, #1
 800244e:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8002450:	429a      	cmp	r2, r3
 8002452:	d06d      	beq.n	8002530 <HAL_RCC_OscConfig+0x784>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8002454:	69bb      	ldr	r3, [r7, #24]
 8002456:	2b0c      	cmp	r3, #12
 8002458:	d068      	beq.n	800252c <HAL_RCC_OscConfig+0x780>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 800245a:	4b5d      	ldr	r3, [pc, #372]	; (80025d0 <HAL_RCC_OscConfig+0x824>)
 800245c:	681b      	ldr	r3, [r3, #0]
 800245e:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8002462:	2b00      	cmp	r3, #0
 8002464:	d105      	bne.n	8002472 <HAL_RCC_OscConfig+0x6c6>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
 8002466:	4b5a      	ldr	r3, [pc, #360]	; (80025d0 <HAL_RCC_OscConfig+0x824>)
 8002468:	681b      	ldr	r3, [r3, #0]
 800246a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800246e:	2b00      	cmp	r3, #0
 8002470:	d001      	beq.n	8002476 <HAL_RCC_OscConfig+0x6ca>
#endif
            )
          {
            return HAL_ERROR;
 8002472:	2301      	movs	r3, #1
 8002474:	e0ba      	b.n	80025ec <HAL_RCC_OscConfig+0x840>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 8002476:	4b56      	ldr	r3, [pc, #344]	; (80025d0 <HAL_RCC_OscConfig+0x824>)
 8002478:	681b      	ldr	r3, [r3, #0]
 800247a:	4a55      	ldr	r2, [pc, #340]	; (80025d0 <HAL_RCC_OscConfig+0x824>)
 800247c:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8002480:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8002482:	f7fe f887 	bl	8000594 <HAL_GetTick>
 8002486:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002488:	e008      	b.n	800249c <HAL_RCC_OscConfig+0x6f0>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800248a:	f7fe f883 	bl	8000594 <HAL_GetTick>
 800248e:	4602      	mov	r2, r0
 8002490:	693b      	ldr	r3, [r7, #16]
 8002492:	1ad3      	subs	r3, r2, r3
 8002494:	2b02      	cmp	r3, #2
 8002496:	d901      	bls.n	800249c <HAL_RCC_OscConfig+0x6f0>
              {
                return HAL_TIMEOUT;
 8002498:	2303      	movs	r3, #3
 800249a:	e0a7      	b.n	80025ec <HAL_RCC_OscConfig+0x840>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800249c:	4b4c      	ldr	r3, [pc, #304]	; (80025d0 <HAL_RCC_OscConfig+0x824>)
 800249e:	681b      	ldr	r3, [r3, #0]
 80024a0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80024a4:	2b00      	cmp	r3, #0
 80024a6:	d1f0      	bne.n	800248a <HAL_RCC_OscConfig+0x6de>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLP_SUPPORT)
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80024a8:	4b49      	ldr	r3, [pc, #292]	; (80025d0 <HAL_RCC_OscConfig+0x824>)
 80024aa:	68da      	ldr	r2, [r3, #12]
 80024ac:	4b49      	ldr	r3, [pc, #292]	; (80025d4 <HAL_RCC_OscConfig+0x828>)
 80024ae:	4013      	ands	r3, r2
 80024b0:	687a      	ldr	r2, [r7, #4]
 80024b2:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 80024b4:	687a      	ldr	r2, [r7, #4]
 80024b6:	6b12      	ldr	r2, [r2, #48]	; 0x30
 80024b8:	3a01      	subs	r2, #1
 80024ba:	0112      	lsls	r2, r2, #4
 80024bc:	4311      	orrs	r1, r2
 80024be:	687a      	ldr	r2, [r7, #4]
 80024c0:	6b52      	ldr	r2, [r2, #52]	; 0x34
 80024c2:	0212      	lsls	r2, r2, #8
 80024c4:	4311      	orrs	r1, r2
 80024c6:	687a      	ldr	r2, [r7, #4]
 80024c8:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 80024ca:	0852      	lsrs	r2, r2, #1
 80024cc:	3a01      	subs	r2, #1
 80024ce:	0552      	lsls	r2, r2, #21
 80024d0:	4311      	orrs	r1, r2
 80024d2:	687a      	ldr	r2, [r7, #4]
 80024d4:	6c12      	ldr	r2, [r2, #64]	; 0x40
 80024d6:	0852      	lsrs	r2, r2, #1
 80024d8:	3a01      	subs	r2, #1
 80024da:	0652      	lsls	r2, r2, #25
 80024dc:	4311      	orrs	r1, r2
 80024de:	687a      	ldr	r2, [r7, #4]
 80024e0:	6b92      	ldr	r2, [r2, #56]	; 0x38
 80024e2:	06d2      	lsls	r2, r2, #27
 80024e4:	430a      	orrs	r2, r1
 80024e6:	493a      	ldr	r1, [pc, #232]	; (80025d0 <HAL_RCC_OscConfig+0x824>)
 80024e8:	4313      	orrs	r3, r2
 80024ea:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#endif

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 80024ec:	4b38      	ldr	r3, [pc, #224]	; (80025d0 <HAL_RCC_OscConfig+0x824>)
 80024ee:	681b      	ldr	r3, [r3, #0]
 80024f0:	4a37      	ldr	r2, [pc, #220]	; (80025d0 <HAL_RCC_OscConfig+0x824>)
 80024f2:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80024f6:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 80024f8:	4b35      	ldr	r3, [pc, #212]	; (80025d0 <HAL_RCC_OscConfig+0x824>)
 80024fa:	68db      	ldr	r3, [r3, #12]
 80024fc:	4a34      	ldr	r2, [pc, #208]	; (80025d0 <HAL_RCC_OscConfig+0x824>)
 80024fe:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002502:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8002504:	f7fe f846 	bl	8000594 <HAL_GetTick>
 8002508:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800250a:	e008      	b.n	800251e <HAL_RCC_OscConfig+0x772>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800250c:	f7fe f842 	bl	8000594 <HAL_GetTick>
 8002510:	4602      	mov	r2, r0
 8002512:	693b      	ldr	r3, [r7, #16]
 8002514:	1ad3      	subs	r3, r2, r3
 8002516:	2b02      	cmp	r3, #2
 8002518:	d901      	bls.n	800251e <HAL_RCC_OscConfig+0x772>
              {
                return HAL_TIMEOUT;
 800251a:	2303      	movs	r3, #3
 800251c:	e066      	b.n	80025ec <HAL_RCC_OscConfig+0x840>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800251e:	4b2c      	ldr	r3, [pc, #176]	; (80025d0 <HAL_RCC_OscConfig+0x824>)
 8002520:	681b      	ldr	r3, [r3, #0]
 8002522:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002526:	2b00      	cmp	r3, #0
 8002528:	d0f0      	beq.n	800250c <HAL_RCC_OscConfig+0x760>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 800252a:	e05e      	b.n	80025ea <HAL_RCC_OscConfig+0x83e>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 800252c:	2301      	movs	r3, #1
 800252e:	e05d      	b.n	80025ec <HAL_RCC_OscConfig+0x840>
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002530:	4b27      	ldr	r3, [pc, #156]	; (80025d0 <HAL_RCC_OscConfig+0x824>)
 8002532:	681b      	ldr	r3, [r3, #0]
 8002534:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002538:	2b00      	cmp	r3, #0
 800253a:	d156      	bne.n	80025ea <HAL_RCC_OscConfig+0x83e>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 800253c:	4b24      	ldr	r3, [pc, #144]	; (80025d0 <HAL_RCC_OscConfig+0x824>)
 800253e:	681b      	ldr	r3, [r3, #0]
 8002540:	4a23      	ldr	r2, [pc, #140]	; (80025d0 <HAL_RCC_OscConfig+0x824>)
 8002542:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002546:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8002548:	4b21      	ldr	r3, [pc, #132]	; (80025d0 <HAL_RCC_OscConfig+0x824>)
 800254a:	68db      	ldr	r3, [r3, #12]
 800254c:	4a20      	ldr	r2, [pc, #128]	; (80025d0 <HAL_RCC_OscConfig+0x824>)
 800254e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002552:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8002554:	f7fe f81e 	bl	8000594 <HAL_GetTick>
 8002558:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800255a:	e008      	b.n	800256e <HAL_RCC_OscConfig+0x7c2>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800255c:	f7fe f81a 	bl	8000594 <HAL_GetTick>
 8002560:	4602      	mov	r2, r0
 8002562:	693b      	ldr	r3, [r7, #16]
 8002564:	1ad3      	subs	r3, r2, r3
 8002566:	2b02      	cmp	r3, #2
 8002568:	d901      	bls.n	800256e <HAL_RCC_OscConfig+0x7c2>
            {
              return HAL_TIMEOUT;
 800256a:	2303      	movs	r3, #3
 800256c:	e03e      	b.n	80025ec <HAL_RCC_OscConfig+0x840>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800256e:	4b18      	ldr	r3, [pc, #96]	; (80025d0 <HAL_RCC_OscConfig+0x824>)
 8002570:	681b      	ldr	r3, [r3, #0]
 8002572:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002576:	2b00      	cmp	r3, #0
 8002578:	d0f0      	beq.n	800255c <HAL_RCC_OscConfig+0x7b0>
 800257a:	e036      	b.n	80025ea <HAL_RCC_OscConfig+0x83e>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 800257c:	69bb      	ldr	r3, [r7, #24]
 800257e:	2b0c      	cmp	r3, #12
 8002580:	d031      	beq.n	80025e6 <HAL_RCC_OscConfig+0x83a>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002582:	4b13      	ldr	r3, [pc, #76]	; (80025d0 <HAL_RCC_OscConfig+0x824>)
 8002584:	681b      	ldr	r3, [r3, #0]
 8002586:	4a12      	ldr	r2, [pc, #72]	; (80025d0 <HAL_RCC_OscConfig+0x824>)
 8002588:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800258c:	6013      	str	r3, [r2, #0]

        /* Disable all PLL outputs to save power if no PLLs on */
#if defined(RCC_PLLSAI1_SUPPORT) && defined(RCC_CR_PLLSAI2RDY)
        if(READ_BIT(RCC->CR, (RCC_CR_PLLSAI1RDY | RCC_CR_PLLSAI2RDY)) == 0U)
 800258e:	4b10      	ldr	r3, [pc, #64]	; (80025d0 <HAL_RCC_OscConfig+0x824>)
 8002590:	681b      	ldr	r3, [r3, #0]
 8002592:	f003 5320 	and.w	r3, r3, #671088640	; 0x28000000
 8002596:	2b00      	cmp	r3, #0
 8002598:	d105      	bne.n	80025a6 <HAL_RCC_OscConfig+0x7fa>
        {
          MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
 800259a:	4b0d      	ldr	r3, [pc, #52]	; (80025d0 <HAL_RCC_OscConfig+0x824>)
 800259c:	68db      	ldr	r3, [r3, #12]
 800259e:	4a0c      	ldr	r2, [pc, #48]	; (80025d0 <HAL_RCC_OscConfig+0x824>)
 80025a0:	f023 0303 	bic.w	r3, r3, #3
 80025a4:	60d3      	str	r3, [r2, #12]
#else
        MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
#endif /* RCC_PLLSAI1_SUPPORT && RCC_CR_PLLSAI2RDY */

#if defined(RCC_PLLSAI2_SUPPORT)
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 80025a6:	4b0a      	ldr	r3, [pc, #40]	; (80025d0 <HAL_RCC_OscConfig+0x824>)
 80025a8:	68db      	ldr	r3, [r3, #12]
 80025aa:	4a09      	ldr	r2, [pc, #36]	; (80025d0 <HAL_RCC_OscConfig+0x824>)
 80025ac:	f023 7388 	bic.w	r3, r3, #17825792	; 0x1100000
 80025b0:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80025b4:	60d3      	str	r3, [r2, #12]
#else
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK);
#endif /* RCC_PLLSAI2_SUPPORT */

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80025b6:	f7fd ffed 	bl	8000594 <HAL_GetTick>
 80025ba:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80025bc:	e00c      	b.n	80025d8 <HAL_RCC_OscConfig+0x82c>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80025be:	f7fd ffe9 	bl	8000594 <HAL_GetTick>
 80025c2:	4602      	mov	r2, r0
 80025c4:	693b      	ldr	r3, [r7, #16]
 80025c6:	1ad3      	subs	r3, r2, r3
 80025c8:	2b02      	cmp	r3, #2
 80025ca:	d905      	bls.n	80025d8 <HAL_RCC_OscConfig+0x82c>
          {
            return HAL_TIMEOUT;
 80025cc:	2303      	movs	r3, #3
 80025ce:	e00d      	b.n	80025ec <HAL_RCC_OscConfig+0x840>
 80025d0:	40021000 	.word	0x40021000
 80025d4:	019d800c 	.word	0x019d800c
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80025d8:	4b06      	ldr	r3, [pc, #24]	; (80025f4 <HAL_RCC_OscConfig+0x848>)
 80025da:	681b      	ldr	r3, [r3, #0]
 80025dc:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80025e0:	2b00      	cmp	r3, #0
 80025e2:	d1ec      	bne.n	80025be <HAL_RCC_OscConfig+0x812>
 80025e4:	e001      	b.n	80025ea <HAL_RCC_OscConfig+0x83e>
        }
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 80025e6:	2301      	movs	r3, #1
 80025e8:	e000      	b.n	80025ec <HAL_RCC_OscConfig+0x840>
      }
    }
  }
  return HAL_OK;
 80025ea:	2300      	movs	r3, #0
}
 80025ec:	4618      	mov	r0, r3
 80025ee:	3720      	adds	r7, #32
 80025f0:	46bd      	mov	sp, r7
 80025f2:	bd80      	pop	{r7, pc}
 80025f4:	40021000 	.word	0x40021000

080025f8 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80025f8:	b580      	push	{r7, lr}
 80025fa:	b086      	sub	sp, #24
 80025fc:	af00      	add	r7, sp, #0
 80025fe:	6078      	str	r0, [r7, #4]
 8002600:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
  uint32_t hpre = RCC_SYSCLK_DIV1;
 8002602:	2300      	movs	r3, #0
 8002604:	617b      	str	r3, [r7, #20]
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8002606:	687b      	ldr	r3, [r7, #4]
 8002608:	2b00      	cmp	r3, #0
 800260a:	d101      	bne.n	8002610 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 800260c:	2301      	movs	r3, #1
 800260e:	e10f      	b.n	8002830 <HAL_RCC_ClockConfig+0x238>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8002610:	4b89      	ldr	r3, [pc, #548]	; (8002838 <HAL_RCC_ClockConfig+0x240>)
 8002612:	681b      	ldr	r3, [r3, #0]
 8002614:	f003 030f 	and.w	r3, r3, #15
 8002618:	683a      	ldr	r2, [r7, #0]
 800261a:	429a      	cmp	r2, r3
 800261c:	d910      	bls.n	8002640 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800261e:	4b86      	ldr	r3, [pc, #536]	; (8002838 <HAL_RCC_ClockConfig+0x240>)
 8002620:	681b      	ldr	r3, [r3, #0]
 8002622:	f023 020f 	bic.w	r2, r3, #15
 8002626:	4984      	ldr	r1, [pc, #528]	; (8002838 <HAL_RCC_ClockConfig+0x240>)
 8002628:	683b      	ldr	r3, [r7, #0]
 800262a:	4313      	orrs	r3, r2
 800262c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800262e:	4b82      	ldr	r3, [pc, #520]	; (8002838 <HAL_RCC_ClockConfig+0x240>)
 8002630:	681b      	ldr	r3, [r3, #0]
 8002632:	f003 030f 	and.w	r3, r3, #15
 8002636:	683a      	ldr	r2, [r7, #0]
 8002638:	429a      	cmp	r2, r3
 800263a:	d001      	beq.n	8002640 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 800263c:	2301      	movs	r3, #1
 800263e:	e0f7      	b.n	8002830 <HAL_RCC_ClockConfig+0x238>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002640:	687b      	ldr	r3, [r7, #4]
 8002642:	681b      	ldr	r3, [r3, #0]
 8002644:	f003 0301 	and.w	r3, r3, #1
 8002648:	2b00      	cmp	r3, #0
 800264a:	f000 8089 	beq.w	8002760 <HAL_RCC_ClockConfig+0x168>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800264e:	687b      	ldr	r3, [r7, #4]
 8002650:	685b      	ldr	r3, [r3, #4]
 8002652:	2b03      	cmp	r3, #3
 8002654:	d133      	bne.n	80026be <HAL_RCC_ClockConfig+0xc6>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002656:	4b79      	ldr	r3, [pc, #484]	; (800283c <HAL_RCC_ClockConfig+0x244>)
 8002658:	681b      	ldr	r3, [r3, #0]
 800265a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800265e:	2b00      	cmp	r3, #0
 8002660:	d101      	bne.n	8002666 <HAL_RCC_ClockConfig+0x6e>
      {
        return HAL_ERROR;
 8002662:	2301      	movs	r3, #1
 8002664:	e0e4      	b.n	8002830 <HAL_RCC_ClockConfig+0x238>
      }
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
      /* Undershoot management when selection PLL as SYSCLK source and frequency above 80Mhz */
      /* Compute target PLL output frequency */
      if(RCC_GetSysClockFreqFromPLLSource() > 80000000U)
 8002666:	f000 fa2d 	bl	8002ac4 <RCC_GetSysClockFreqFromPLLSource>
 800266a:	4603      	mov	r3, r0
 800266c:	4a74      	ldr	r2, [pc, #464]	; (8002840 <HAL_RCC_ClockConfig+0x248>)
 800266e:	4293      	cmp	r3, r2
 8002670:	d955      	bls.n	800271e <HAL_RCC_ClockConfig+0x126>
      {
        if(READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)
 8002672:	4b72      	ldr	r3, [pc, #456]	; (800283c <HAL_RCC_ClockConfig+0x244>)
 8002674:	689b      	ldr	r3, [r3, #8]
 8002676:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800267a:	2b00      	cmp	r3, #0
 800267c:	d10a      	bne.n	8002694 <HAL_RCC_ClockConfig+0x9c>
        {
          /* Intermediate step with HCLK prescaler 2 necessary before to go over 80Mhz */
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 800267e:	4b6f      	ldr	r3, [pc, #444]	; (800283c <HAL_RCC_ClockConfig+0x244>)
 8002680:	689b      	ldr	r3, [r3, #8]
 8002682:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8002686:	4a6d      	ldr	r2, [pc, #436]	; (800283c <HAL_RCC_ClockConfig+0x244>)
 8002688:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800268c:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 800268e:	2380      	movs	r3, #128	; 0x80
 8002690:	617b      	str	r3, [r7, #20]
 8002692:	e044      	b.n	800271e <HAL_RCC_ClockConfig+0x126>
        }
        else if((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) && (RCC_ClkInitStruct->AHBCLKDivider == RCC_SYSCLK_DIV1))
 8002694:	687b      	ldr	r3, [r7, #4]
 8002696:	681b      	ldr	r3, [r3, #0]
 8002698:	f003 0302 	and.w	r3, r3, #2
 800269c:	2b00      	cmp	r3, #0
 800269e:	d03e      	beq.n	800271e <HAL_RCC_ClockConfig+0x126>
 80026a0:	687b      	ldr	r3, [r7, #4]
 80026a2:	689b      	ldr	r3, [r3, #8]
 80026a4:	2b00      	cmp	r3, #0
 80026a6:	d13a      	bne.n	800271e <HAL_RCC_ClockConfig+0x126>
        {
          /* Intermediate step with HCLK prescaler 2 necessary before to go over 80Mhz */
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 80026a8:	4b64      	ldr	r3, [pc, #400]	; (800283c <HAL_RCC_ClockConfig+0x244>)
 80026aa:	689b      	ldr	r3, [r3, #8]
 80026ac:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80026b0:	4a62      	ldr	r2, [pc, #392]	; (800283c <HAL_RCC_ClockConfig+0x244>)
 80026b2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80026b6:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 80026b8:	2380      	movs	r3, #128	; 0x80
 80026ba:	617b      	str	r3, [r7, #20]
 80026bc:	e02f      	b.n	800271e <HAL_RCC_ClockConfig+0x126>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80026be:	687b      	ldr	r3, [r7, #4]
 80026c0:	685b      	ldr	r3, [r3, #4]
 80026c2:	2b02      	cmp	r3, #2
 80026c4:	d107      	bne.n	80026d6 <HAL_RCC_ClockConfig+0xde>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80026c6:	4b5d      	ldr	r3, [pc, #372]	; (800283c <HAL_RCC_ClockConfig+0x244>)
 80026c8:	681b      	ldr	r3, [r3, #0]
 80026ca:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80026ce:	2b00      	cmp	r3, #0
 80026d0:	d115      	bne.n	80026fe <HAL_RCC_ClockConfig+0x106>
        {
          return HAL_ERROR;
 80026d2:	2301      	movs	r3, #1
 80026d4:	e0ac      	b.n	8002830 <HAL_RCC_ClockConfig+0x238>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 80026d6:	687b      	ldr	r3, [r7, #4]
 80026d8:	685b      	ldr	r3, [r3, #4]
 80026da:	2b00      	cmp	r3, #0
 80026dc:	d107      	bne.n	80026ee <HAL_RCC_ClockConfig+0xf6>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 80026de:	4b57      	ldr	r3, [pc, #348]	; (800283c <HAL_RCC_ClockConfig+0x244>)
 80026e0:	681b      	ldr	r3, [r3, #0]
 80026e2:	f003 0302 	and.w	r3, r3, #2
 80026e6:	2b00      	cmp	r3, #0
 80026e8:	d109      	bne.n	80026fe <HAL_RCC_ClockConfig+0x106>
        {
          return HAL_ERROR;
 80026ea:	2301      	movs	r3, #1
 80026ec:	e0a0      	b.n	8002830 <HAL_RCC_ClockConfig+0x238>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80026ee:	4b53      	ldr	r3, [pc, #332]	; (800283c <HAL_RCC_ClockConfig+0x244>)
 80026f0:	681b      	ldr	r3, [r3, #0]
 80026f2:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80026f6:	2b00      	cmp	r3, #0
 80026f8:	d101      	bne.n	80026fe <HAL_RCC_ClockConfig+0x106>
        {
          return HAL_ERROR;
 80026fa:	2301      	movs	r3, #1
 80026fc:	e098      	b.n	8002830 <HAL_RCC_ClockConfig+0x238>
        }
      }
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
      /* Overshoot management when going down from PLL as SYSCLK source and frequency above 80Mhz */
      if(HAL_RCC_GetSysClockFreq() > 80000000U)
 80026fe:	f000 f8a7 	bl	8002850 <HAL_RCC_GetSysClockFreq>
 8002702:	4603      	mov	r3, r0
 8002704:	4a4e      	ldr	r2, [pc, #312]	; (8002840 <HAL_RCC_ClockConfig+0x248>)
 8002706:	4293      	cmp	r3, r2
 8002708:	d909      	bls.n	800271e <HAL_RCC_ClockConfig+0x126>
      {
        /* Intermediate step with HCLK prescaler 2 necessary before to go under 80Mhz */
        MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 800270a:	4b4c      	ldr	r3, [pc, #304]	; (800283c <HAL_RCC_ClockConfig+0x244>)
 800270c:	689b      	ldr	r3, [r3, #8]
 800270e:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8002712:	4a4a      	ldr	r2, [pc, #296]	; (800283c <HAL_RCC_ClockConfig+0x244>)
 8002714:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002718:	6093      	str	r3, [r2, #8]
        hpre = RCC_SYSCLK_DIV2;
 800271a:	2380      	movs	r3, #128	; 0x80
 800271c:	617b      	str	r3, [r7, #20]
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 800271e:	4b47      	ldr	r3, [pc, #284]	; (800283c <HAL_RCC_ClockConfig+0x244>)
 8002720:	689b      	ldr	r3, [r3, #8]
 8002722:	f023 0203 	bic.w	r2, r3, #3
 8002726:	687b      	ldr	r3, [r7, #4]
 8002728:	685b      	ldr	r3, [r3, #4]
 800272a:	4944      	ldr	r1, [pc, #272]	; (800283c <HAL_RCC_ClockConfig+0x244>)
 800272c:	4313      	orrs	r3, r2
 800272e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002730:	f7fd ff30 	bl	8000594 <HAL_GetTick>
 8002734:	6138      	str	r0, [r7, #16]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002736:	e00a      	b.n	800274e <HAL_RCC_ClockConfig+0x156>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002738:	f7fd ff2c 	bl	8000594 <HAL_GetTick>
 800273c:	4602      	mov	r2, r0
 800273e:	693b      	ldr	r3, [r7, #16]
 8002740:	1ad3      	subs	r3, r2, r3
 8002742:	f241 3288 	movw	r2, #5000	; 0x1388
 8002746:	4293      	cmp	r3, r2
 8002748:	d901      	bls.n	800274e <HAL_RCC_ClockConfig+0x156>
      {
        return HAL_TIMEOUT;
 800274a:	2303      	movs	r3, #3
 800274c:	e070      	b.n	8002830 <HAL_RCC_ClockConfig+0x238>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800274e:	4b3b      	ldr	r3, [pc, #236]	; (800283c <HAL_RCC_ClockConfig+0x244>)
 8002750:	689b      	ldr	r3, [r3, #8]
 8002752:	f003 020c 	and.w	r2, r3, #12
 8002756:	687b      	ldr	r3, [r7, #4]
 8002758:	685b      	ldr	r3, [r3, #4]
 800275a:	009b      	lsls	r3, r3, #2
 800275c:	429a      	cmp	r2, r3
 800275e:	d1eb      	bne.n	8002738 <HAL_RCC_ClockConfig+0x140>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002760:	687b      	ldr	r3, [r7, #4]
 8002762:	681b      	ldr	r3, [r3, #0]
 8002764:	f003 0302 	and.w	r3, r3, #2
 8002768:	2b00      	cmp	r3, #0
 800276a:	d009      	beq.n	8002780 <HAL_RCC_ClockConfig+0x188>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800276c:	4b33      	ldr	r3, [pc, #204]	; (800283c <HAL_RCC_ClockConfig+0x244>)
 800276e:	689b      	ldr	r3, [r3, #8]
 8002770:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002774:	687b      	ldr	r3, [r7, #4]
 8002776:	689b      	ldr	r3, [r3, #8]
 8002778:	4930      	ldr	r1, [pc, #192]	; (800283c <HAL_RCC_ClockConfig+0x244>)
 800277a:	4313      	orrs	r3, r2
 800277c:	608b      	str	r3, [r1, #8]
 800277e:	e008      	b.n	8002792 <HAL_RCC_ClockConfig+0x19a>
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
  else
  {
    /* Is intermediate HCLK prescaler 2 applied internally, complete with HCLK prescaler 1 */
    if(hpre == RCC_SYSCLK_DIV2)
 8002780:	697b      	ldr	r3, [r7, #20]
 8002782:	2b80      	cmp	r3, #128	; 0x80
 8002784:	d105      	bne.n	8002792 <HAL_RCC_ClockConfig+0x19a>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV1);
 8002786:	4b2d      	ldr	r3, [pc, #180]	; (800283c <HAL_RCC_ClockConfig+0x244>)
 8002788:	689b      	ldr	r3, [r3, #8]
 800278a:	4a2c      	ldr	r2, [pc, #176]	; (800283c <HAL_RCC_ClockConfig+0x244>)
 800278c:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8002790:	6093      	str	r3, [r2, #8]
    }
  }
#endif

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8002792:	4b29      	ldr	r3, [pc, #164]	; (8002838 <HAL_RCC_ClockConfig+0x240>)
 8002794:	681b      	ldr	r3, [r3, #0]
 8002796:	f003 030f 	and.w	r3, r3, #15
 800279a:	683a      	ldr	r2, [r7, #0]
 800279c:	429a      	cmp	r2, r3
 800279e:	d210      	bcs.n	80027c2 <HAL_RCC_ClockConfig+0x1ca>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80027a0:	4b25      	ldr	r3, [pc, #148]	; (8002838 <HAL_RCC_ClockConfig+0x240>)
 80027a2:	681b      	ldr	r3, [r3, #0]
 80027a4:	f023 020f 	bic.w	r2, r3, #15
 80027a8:	4923      	ldr	r1, [pc, #140]	; (8002838 <HAL_RCC_ClockConfig+0x240>)
 80027aa:	683b      	ldr	r3, [r7, #0]
 80027ac:	4313      	orrs	r3, r2
 80027ae:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80027b0:	4b21      	ldr	r3, [pc, #132]	; (8002838 <HAL_RCC_ClockConfig+0x240>)
 80027b2:	681b      	ldr	r3, [r3, #0]
 80027b4:	f003 030f 	and.w	r3, r3, #15
 80027b8:	683a      	ldr	r2, [r7, #0]
 80027ba:	429a      	cmp	r2, r3
 80027bc:	d001      	beq.n	80027c2 <HAL_RCC_ClockConfig+0x1ca>
    {
      return HAL_ERROR;
 80027be:	2301      	movs	r3, #1
 80027c0:	e036      	b.n	8002830 <HAL_RCC_ClockConfig+0x238>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80027c2:	687b      	ldr	r3, [r7, #4]
 80027c4:	681b      	ldr	r3, [r3, #0]
 80027c6:	f003 0304 	and.w	r3, r3, #4
 80027ca:	2b00      	cmp	r3, #0
 80027cc:	d008      	beq.n	80027e0 <HAL_RCC_ClockConfig+0x1e8>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80027ce:	4b1b      	ldr	r3, [pc, #108]	; (800283c <HAL_RCC_ClockConfig+0x244>)
 80027d0:	689b      	ldr	r3, [r3, #8]
 80027d2:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80027d6:	687b      	ldr	r3, [r7, #4]
 80027d8:	68db      	ldr	r3, [r3, #12]
 80027da:	4918      	ldr	r1, [pc, #96]	; (800283c <HAL_RCC_ClockConfig+0x244>)
 80027dc:	4313      	orrs	r3, r2
 80027de:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80027e0:	687b      	ldr	r3, [r7, #4]
 80027e2:	681b      	ldr	r3, [r3, #0]
 80027e4:	f003 0308 	and.w	r3, r3, #8
 80027e8:	2b00      	cmp	r3, #0
 80027ea:	d009      	beq.n	8002800 <HAL_RCC_ClockConfig+0x208>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80027ec:	4b13      	ldr	r3, [pc, #76]	; (800283c <HAL_RCC_ClockConfig+0x244>)
 80027ee:	689b      	ldr	r3, [r3, #8]
 80027f0:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 80027f4:	687b      	ldr	r3, [r7, #4]
 80027f6:	691b      	ldr	r3, [r3, #16]
 80027f8:	00db      	lsls	r3, r3, #3
 80027fa:	4910      	ldr	r1, [pc, #64]	; (800283c <HAL_RCC_ClockConfig+0x244>)
 80027fc:	4313      	orrs	r3, r2
 80027fe:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8002800:	f000 f826 	bl	8002850 <HAL_RCC_GetSysClockFreq>
 8002804:	4602      	mov	r2, r0
 8002806:	4b0d      	ldr	r3, [pc, #52]	; (800283c <HAL_RCC_ClockConfig+0x244>)
 8002808:	689b      	ldr	r3, [r3, #8]
 800280a:	091b      	lsrs	r3, r3, #4
 800280c:	f003 030f 	and.w	r3, r3, #15
 8002810:	490c      	ldr	r1, [pc, #48]	; (8002844 <HAL_RCC_ClockConfig+0x24c>)
 8002812:	5ccb      	ldrb	r3, [r1, r3]
 8002814:	f003 031f 	and.w	r3, r3, #31
 8002818:	fa22 f303 	lsr.w	r3, r2, r3
 800281c:	4a0a      	ldr	r2, [pc, #40]	; (8002848 <HAL_RCC_ClockConfig+0x250>)
 800281e:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8002820:	4b0a      	ldr	r3, [pc, #40]	; (800284c <HAL_RCC_ClockConfig+0x254>)
 8002822:	681b      	ldr	r3, [r3, #0]
 8002824:	4618      	mov	r0, r3
 8002826:	f7fd fdb7 	bl	8000398 <HAL_InitTick>
 800282a:	4603      	mov	r3, r0
 800282c:	73fb      	strb	r3, [r7, #15]

  return status;
 800282e:	7bfb      	ldrb	r3, [r7, #15]
}
 8002830:	4618      	mov	r0, r3
 8002832:	3718      	adds	r7, #24
 8002834:	46bd      	mov	sp, r7
 8002836:	bd80      	pop	{r7, pc}
 8002838:	40022000 	.word	0x40022000
 800283c:	40021000 	.word	0x40021000
 8002840:	04c4b400 	.word	0x04c4b400
 8002844:	08007760 	.word	0x08007760
 8002848:	20000000 	.word	0x20000000
 800284c:	20000004 	.word	0x20000004

08002850 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002850:	b480      	push	{r7}
 8002852:	b089      	sub	sp, #36	; 0x24
 8002854:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 8002856:	2300      	movs	r3, #0
 8002858:	61fb      	str	r3, [r7, #28]
 800285a:	2300      	movs	r3, #0
 800285c:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 800285e:	4b3e      	ldr	r3, [pc, #248]	; (8002958 <HAL_RCC_GetSysClockFreq+0x108>)
 8002860:	689b      	ldr	r3, [r3, #8]
 8002862:	f003 030c 	and.w	r3, r3, #12
 8002866:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8002868:	4b3b      	ldr	r3, [pc, #236]	; (8002958 <HAL_RCC_GetSysClockFreq+0x108>)
 800286a:	68db      	ldr	r3, [r3, #12]
 800286c:	f003 0303 	and.w	r3, r3, #3
 8002870:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8002872:	693b      	ldr	r3, [r7, #16]
 8002874:	2b00      	cmp	r3, #0
 8002876:	d005      	beq.n	8002884 <HAL_RCC_GetSysClockFreq+0x34>
 8002878:	693b      	ldr	r3, [r7, #16]
 800287a:	2b0c      	cmp	r3, #12
 800287c:	d121      	bne.n	80028c2 <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 800287e:	68fb      	ldr	r3, [r7, #12]
 8002880:	2b01      	cmp	r3, #1
 8002882:	d11e      	bne.n	80028c2 <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8002884:	4b34      	ldr	r3, [pc, #208]	; (8002958 <HAL_RCC_GetSysClockFreq+0x108>)
 8002886:	681b      	ldr	r3, [r3, #0]
 8002888:	f003 0308 	and.w	r3, r3, #8
 800288c:	2b00      	cmp	r3, #0
 800288e:	d107      	bne.n	80028a0 <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8002890:	4b31      	ldr	r3, [pc, #196]	; (8002958 <HAL_RCC_GetSysClockFreq+0x108>)
 8002892:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002896:	0a1b      	lsrs	r3, r3, #8
 8002898:	f003 030f 	and.w	r3, r3, #15
 800289c:	61fb      	str	r3, [r7, #28]
 800289e:	e005      	b.n	80028ac <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 80028a0:	4b2d      	ldr	r3, [pc, #180]	; (8002958 <HAL_RCC_GetSysClockFreq+0x108>)
 80028a2:	681b      	ldr	r3, [r3, #0]
 80028a4:	091b      	lsrs	r3, r3, #4
 80028a6:	f003 030f 	and.w	r3, r3, #15
 80028aa:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 80028ac:	4a2b      	ldr	r2, [pc, #172]	; (800295c <HAL_RCC_GetSysClockFreq+0x10c>)
 80028ae:	69fb      	ldr	r3, [r7, #28]
 80028b0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80028b4:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 80028b6:	693b      	ldr	r3, [r7, #16]
 80028b8:	2b00      	cmp	r3, #0
 80028ba:	d10d      	bne.n	80028d8 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 80028bc:	69fb      	ldr	r3, [r7, #28]
 80028be:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 80028c0:	e00a      	b.n	80028d8 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 80028c2:	693b      	ldr	r3, [r7, #16]
 80028c4:	2b04      	cmp	r3, #4
 80028c6:	d102      	bne.n	80028ce <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 80028c8:	4b25      	ldr	r3, [pc, #148]	; (8002960 <HAL_RCC_GetSysClockFreq+0x110>)
 80028ca:	61bb      	str	r3, [r7, #24]
 80028cc:	e004      	b.n	80028d8 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 80028ce:	693b      	ldr	r3, [r7, #16]
 80028d0:	2b08      	cmp	r3, #8
 80028d2:	d101      	bne.n	80028d8 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 80028d4:	4b23      	ldr	r3, [pc, #140]	; (8002964 <HAL_RCC_GetSysClockFreq+0x114>)
 80028d6:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 80028d8:	693b      	ldr	r3, [r7, #16]
 80028da:	2b0c      	cmp	r3, #12
 80028dc:	d134      	bne.n	8002948 <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 80028de:	4b1e      	ldr	r3, [pc, #120]	; (8002958 <HAL_RCC_GetSysClockFreq+0x108>)
 80028e0:	68db      	ldr	r3, [r3, #12]
 80028e2:	f003 0303 	and.w	r3, r3, #3
 80028e6:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 80028e8:	68bb      	ldr	r3, [r7, #8]
 80028ea:	2b02      	cmp	r3, #2
 80028ec:	d003      	beq.n	80028f6 <HAL_RCC_GetSysClockFreq+0xa6>
 80028ee:	68bb      	ldr	r3, [r7, #8]
 80028f0:	2b03      	cmp	r3, #3
 80028f2:	d003      	beq.n	80028fc <HAL_RCC_GetSysClockFreq+0xac>
 80028f4:	e005      	b.n	8002902 <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 80028f6:	4b1a      	ldr	r3, [pc, #104]	; (8002960 <HAL_RCC_GetSysClockFreq+0x110>)
 80028f8:	617b      	str	r3, [r7, #20]
      break;
 80028fa:	e005      	b.n	8002908 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 80028fc:	4b19      	ldr	r3, [pc, #100]	; (8002964 <HAL_RCC_GetSysClockFreq+0x114>)
 80028fe:	617b      	str	r3, [r7, #20]
      break;
 8002900:	e002      	b.n	8002908 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 8002902:	69fb      	ldr	r3, [r7, #28]
 8002904:	617b      	str	r3, [r7, #20]
      break;
 8002906:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8002908:	4b13      	ldr	r3, [pc, #76]	; (8002958 <HAL_RCC_GetSysClockFreq+0x108>)
 800290a:	68db      	ldr	r3, [r3, #12]
 800290c:	091b      	lsrs	r3, r3, #4
 800290e:	f003 030f 	and.w	r3, r3, #15
 8002912:	3301      	adds	r3, #1
 8002914:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 8002916:	4b10      	ldr	r3, [pc, #64]	; (8002958 <HAL_RCC_GetSysClockFreq+0x108>)
 8002918:	68db      	ldr	r3, [r3, #12]
 800291a:	0a1b      	lsrs	r3, r3, #8
 800291c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8002920:	697a      	ldr	r2, [r7, #20]
 8002922:	fb02 f203 	mul.w	r2, r2, r3
 8002926:	687b      	ldr	r3, [r7, #4]
 8002928:	fbb2 f3f3 	udiv	r3, r2, r3
 800292c:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 800292e:	4b0a      	ldr	r3, [pc, #40]	; (8002958 <HAL_RCC_GetSysClockFreq+0x108>)
 8002930:	68db      	ldr	r3, [r3, #12]
 8002932:	0e5b      	lsrs	r3, r3, #25
 8002934:	f003 0303 	and.w	r3, r3, #3
 8002938:	3301      	adds	r3, #1
 800293a:	005b      	lsls	r3, r3, #1
 800293c:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 800293e:	697a      	ldr	r2, [r7, #20]
 8002940:	683b      	ldr	r3, [r7, #0]
 8002942:	fbb2 f3f3 	udiv	r3, r2, r3
 8002946:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 8002948:	69bb      	ldr	r3, [r7, #24]
}
 800294a:	4618      	mov	r0, r3
 800294c:	3724      	adds	r7, #36	; 0x24
 800294e:	46bd      	mov	sp, r7
 8002950:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002954:	4770      	bx	lr
 8002956:	bf00      	nop
 8002958:	40021000 	.word	0x40021000
 800295c:	08007778 	.word	0x08007778
 8002960:	00f42400 	.word	0x00f42400
 8002964:	007a1200 	.word	0x007a1200

08002968 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002968:	b480      	push	{r7}
 800296a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800296c:	4b03      	ldr	r3, [pc, #12]	; (800297c <HAL_RCC_GetHCLKFreq+0x14>)
 800296e:	681b      	ldr	r3, [r3, #0]
}
 8002970:	4618      	mov	r0, r3
 8002972:	46bd      	mov	sp, r7
 8002974:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002978:	4770      	bx	lr
 800297a:	bf00      	nop
 800297c:	20000000 	.word	0x20000000

08002980 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002980:	b580      	push	{r7, lr}
 8002982:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8002984:	f7ff fff0 	bl	8002968 <HAL_RCC_GetHCLKFreq>
 8002988:	4602      	mov	r2, r0
 800298a:	4b06      	ldr	r3, [pc, #24]	; (80029a4 <HAL_RCC_GetPCLK2Freq+0x24>)
 800298c:	689b      	ldr	r3, [r3, #8]
 800298e:	0adb      	lsrs	r3, r3, #11
 8002990:	f003 0307 	and.w	r3, r3, #7
 8002994:	4904      	ldr	r1, [pc, #16]	; (80029a8 <HAL_RCC_GetPCLK2Freq+0x28>)
 8002996:	5ccb      	ldrb	r3, [r1, r3]
 8002998:	f003 031f 	and.w	r3, r3, #31
 800299c:	fa22 f303 	lsr.w	r3, r2, r3
}
 80029a0:	4618      	mov	r0, r3
 80029a2:	bd80      	pop	{r7, pc}
 80029a4:	40021000 	.word	0x40021000
 80029a8:	08007770 	.word	0x08007770

080029ac <HAL_RCC_GetClockConfig>:
  *         will be configured.
  * @param  pFLatency  Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 80029ac:	b480      	push	{r7}
 80029ae:	b083      	sub	sp, #12
 80029b0:	af00      	add	r7, sp, #0
 80029b2:	6078      	str	r0, [r7, #4]
 80029b4:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(RCC_ClkInitStruct != (void  *)NULL);
  assert_param(pFLatency != (void *)NULL);

  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 80029b6:	687b      	ldr	r3, [r7, #4]
 80029b8:	220f      	movs	r2, #15
 80029ba:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = READ_BIT(RCC->CFGR, RCC_CFGR_SW);
 80029bc:	4b12      	ldr	r3, [pc, #72]	; (8002a08 <HAL_RCC_GetClockConfig+0x5c>)
 80029be:	689b      	ldr	r3, [r3, #8]
 80029c0:	f003 0203 	and.w	r2, r3, #3
 80029c4:	687b      	ldr	r3, [r7, #4]
 80029c6:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = READ_BIT(RCC->CFGR, RCC_CFGR_HPRE);
 80029c8:	4b0f      	ldr	r3, [pc, #60]	; (8002a08 <HAL_RCC_GetClockConfig+0x5c>)
 80029ca:	689b      	ldr	r3, [r3, #8]
 80029cc:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 80029d0:	687b      	ldr	r3, [r7, #4]
 80029d2:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1);
 80029d4:	4b0c      	ldr	r3, [pc, #48]	; (8002a08 <HAL_RCC_GetClockConfig+0x5c>)
 80029d6:	689b      	ldr	r3, [r3, #8]
 80029d8:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 80029dc:	687b      	ldr	r3, [r7, #4]
 80029de:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> 3U);
 80029e0:	4b09      	ldr	r3, [pc, #36]	; (8002a08 <HAL_RCC_GetClockConfig+0x5c>)
 80029e2:	689b      	ldr	r3, [r3, #8]
 80029e4:	08db      	lsrs	r3, r3, #3
 80029e6:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 80029ea:	687b      	ldr	r3, [r7, #4]
 80029ec:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = __HAL_FLASH_GET_LATENCY();
 80029ee:	4b07      	ldr	r3, [pc, #28]	; (8002a0c <HAL_RCC_GetClockConfig+0x60>)
 80029f0:	681b      	ldr	r3, [r3, #0]
 80029f2:	f003 020f 	and.w	r2, r3, #15
 80029f6:	683b      	ldr	r3, [r7, #0]
 80029f8:	601a      	str	r2, [r3, #0]
}
 80029fa:	bf00      	nop
 80029fc:	370c      	adds	r7, #12
 80029fe:	46bd      	mov	sp, r7
 8002a00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a04:	4770      	bx	lr
 8002a06:	bf00      	nop
 8002a08:	40021000 	.word	0x40021000
 8002a0c:	40022000 	.word	0x40022000

08002a10 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 8002a10:	b580      	push	{r7, lr}
 8002a12:	b086      	sub	sp, #24
 8002a14:	af00      	add	r7, sp, #0
 8002a16:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 8002a18:	2300      	movs	r3, #0
 8002a1a:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8002a1c:	4b27      	ldr	r3, [pc, #156]	; (8002abc <RCC_SetFlashLatencyFromMSIRange+0xac>)
 8002a1e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002a20:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002a24:	2b00      	cmp	r3, #0
 8002a26:	d003      	beq.n	8002a30 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 8002a28:	f7ff f8ec 	bl	8001c04 <HAL_PWREx_GetVoltageRange>
 8002a2c:	6178      	str	r0, [r7, #20]
 8002a2e:	e014      	b.n	8002a5a <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 8002a30:	4b22      	ldr	r3, [pc, #136]	; (8002abc <RCC_SetFlashLatencyFromMSIRange+0xac>)
 8002a32:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002a34:	4a21      	ldr	r2, [pc, #132]	; (8002abc <RCC_SetFlashLatencyFromMSIRange+0xac>)
 8002a36:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002a3a:	6593      	str	r3, [r2, #88]	; 0x58
 8002a3c:	4b1f      	ldr	r3, [pc, #124]	; (8002abc <RCC_SetFlashLatencyFromMSIRange+0xac>)
 8002a3e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002a40:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002a44:	60fb      	str	r3, [r7, #12]
 8002a46:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 8002a48:	f7ff f8dc 	bl	8001c04 <HAL_PWREx_GetVoltageRange>
 8002a4c:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 8002a4e:	4b1b      	ldr	r3, [pc, #108]	; (8002abc <RCC_SetFlashLatencyFromMSIRange+0xac>)
 8002a50:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002a52:	4a1a      	ldr	r2, [pc, #104]	; (8002abc <RCC_SetFlashLatencyFromMSIRange+0xac>)
 8002a54:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002a58:	6593      	str	r3, [r2, #88]	; 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 8002a5a:	697b      	ldr	r3, [r7, #20]
 8002a5c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002a60:	d10b      	bne.n	8002a7a <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 8002a62:	687b      	ldr	r3, [r7, #4]
 8002a64:	2b80      	cmp	r3, #128	; 0x80
 8002a66:	d913      	bls.n	8002a90 <RCC_SetFlashLatencyFromMSIRange+0x80>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 8002a68:	687b      	ldr	r3, [r7, #4]
 8002a6a:	2ba0      	cmp	r3, #160	; 0xa0
 8002a6c:	d902      	bls.n	8002a74 <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8002a6e:	2302      	movs	r3, #2
 8002a70:	613b      	str	r3, [r7, #16]
 8002a72:	e00d      	b.n	8002a90 <RCC_SetFlashLatencyFromMSIRange+0x80>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8002a74:	2301      	movs	r3, #1
 8002a76:	613b      	str	r3, [r7, #16]
 8002a78:	e00a      	b.n	8002a90 <RCC_SetFlashLatencyFromMSIRange+0x80>
  }
  else
  {
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
    if(msirange >= RCC_MSIRANGE_8)
 8002a7a:	687b      	ldr	r3, [r7, #4]
 8002a7c:	2b7f      	cmp	r3, #127	; 0x7f
 8002a7e:	d902      	bls.n	8002a86 <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI >= 16Mhz */
      latency = FLASH_LATENCY_2; /* 2WS */
 8002a80:	2302      	movs	r3, #2
 8002a82:	613b      	str	r3, [r7, #16]
 8002a84:	e004      	b.n	8002a90 <RCC_SetFlashLatencyFromMSIRange+0x80>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_7)
 8002a86:	687b      	ldr	r3, [r7, #4]
 8002a88:	2b70      	cmp	r3, #112	; 0x70
 8002a8a:	d101      	bne.n	8002a90 <RCC_SetFlashLatencyFromMSIRange+0x80>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8002a8c:	2301      	movs	r3, #1
 8002a8e:	613b      	str	r3, [r7, #16]
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8002a90:	4b0b      	ldr	r3, [pc, #44]	; (8002ac0 <RCC_SetFlashLatencyFromMSIRange+0xb0>)
 8002a92:	681b      	ldr	r3, [r3, #0]
 8002a94:	f023 020f 	bic.w	r2, r3, #15
 8002a98:	4909      	ldr	r1, [pc, #36]	; (8002ac0 <RCC_SetFlashLatencyFromMSIRange+0xb0>)
 8002a9a:	693b      	ldr	r3, [r7, #16]
 8002a9c:	4313      	orrs	r3, r2
 8002a9e:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 8002aa0:	4b07      	ldr	r3, [pc, #28]	; (8002ac0 <RCC_SetFlashLatencyFromMSIRange+0xb0>)
 8002aa2:	681b      	ldr	r3, [r3, #0]
 8002aa4:	f003 030f 	and.w	r3, r3, #15
 8002aa8:	693a      	ldr	r2, [r7, #16]
 8002aaa:	429a      	cmp	r2, r3
 8002aac:	d001      	beq.n	8002ab2 <RCC_SetFlashLatencyFromMSIRange+0xa2>
  {
    return HAL_ERROR;
 8002aae:	2301      	movs	r3, #1
 8002ab0:	e000      	b.n	8002ab4 <RCC_SetFlashLatencyFromMSIRange+0xa4>
  }

  return HAL_OK;
 8002ab2:	2300      	movs	r3, #0
}
 8002ab4:	4618      	mov	r0, r3
 8002ab6:	3718      	adds	r7, #24
 8002ab8:	46bd      	mov	sp, r7
 8002aba:	bd80      	pop	{r7, pc}
 8002abc:	40021000 	.word	0x40021000
 8002ac0:	40022000 	.word	0x40022000

08002ac4 <RCC_GetSysClockFreqFromPLLSource>:
/**
  * @brief  Compute SYSCLK frequency based on PLL SYSCLK source.
  * @retval SYSCLK frequency
  */
static uint32_t RCC_GetSysClockFreqFromPLLSource(void)
{
 8002ac4:	b480      	push	{r7}
 8002ac6:	b087      	sub	sp, #28
 8002ac8:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U;
 8002aca:	2300      	movs	r3, #0
 8002acc:	617b      	str	r3, [r7, #20]
  uint32_t pllvco, pllsource, pllr, pllm, sysclockfreq;  /* no init needed */

  if(__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_MSI)
 8002ace:	4b2d      	ldr	r3, [pc, #180]	; (8002b84 <RCC_GetSysClockFreqFromPLLSource+0xc0>)
 8002ad0:	68db      	ldr	r3, [r3, #12]
 8002ad2:	f003 0303 	and.w	r3, r3, #3
 8002ad6:	2b01      	cmp	r3, #1
 8002ad8:	d118      	bne.n	8002b0c <RCC_GetSysClockFreqFromPLLSource+0x48>
  {
    /* Get MSI range source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8002ada:	4b2a      	ldr	r3, [pc, #168]	; (8002b84 <RCC_GetSysClockFreqFromPLLSource+0xc0>)
 8002adc:	681b      	ldr	r3, [r3, #0]
 8002ade:	f003 0308 	and.w	r3, r3, #8
 8002ae2:	2b00      	cmp	r3, #0
 8002ae4:	d107      	bne.n	8002af6 <RCC_GetSysClockFreqFromPLLSource+0x32>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8002ae6:	4b27      	ldr	r3, [pc, #156]	; (8002b84 <RCC_GetSysClockFreqFromPLLSource+0xc0>)
 8002ae8:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002aec:	0a1b      	lsrs	r3, r3, #8
 8002aee:	f003 030f 	and.w	r3, r3, #15
 8002af2:	617b      	str	r3, [r7, #20]
 8002af4:	e005      	b.n	8002b02 <RCC_GetSysClockFreqFromPLLSource+0x3e>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8002af6:	4b23      	ldr	r3, [pc, #140]	; (8002b84 <RCC_GetSysClockFreqFromPLLSource+0xc0>)
 8002af8:	681b      	ldr	r3, [r3, #0]
 8002afa:	091b      	lsrs	r3, r3, #4
 8002afc:	f003 030f 	and.w	r3, r3, #15
 8002b00:	617b      	str	r3, [r7, #20]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 8002b02:	4a21      	ldr	r2, [pc, #132]	; (8002b88 <RCC_GetSysClockFreqFromPLLSource+0xc4>)
 8002b04:	697b      	ldr	r3, [r7, #20]
 8002b06:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002b0a:	617b      	str	r3, [r7, #20]
  }

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
     SYSCLK = PLL_VCO / PLLR
   */
  pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8002b0c:	4b1d      	ldr	r3, [pc, #116]	; (8002b84 <RCC_GetSysClockFreqFromPLLSource+0xc0>)
 8002b0e:	68db      	ldr	r3, [r3, #12]
 8002b10:	f003 0303 	and.w	r3, r3, #3
 8002b14:	60fb      	str	r3, [r7, #12]

  switch (pllsource)
 8002b16:	68fb      	ldr	r3, [r7, #12]
 8002b18:	2b02      	cmp	r3, #2
 8002b1a:	d003      	beq.n	8002b24 <RCC_GetSysClockFreqFromPLLSource+0x60>
 8002b1c:	68fb      	ldr	r3, [r7, #12]
 8002b1e:	2b03      	cmp	r3, #3
 8002b20:	d003      	beq.n	8002b2a <RCC_GetSysClockFreqFromPLLSource+0x66>
 8002b22:	e005      	b.n	8002b30 <RCC_GetSysClockFreqFromPLLSource+0x6c>
  {
  case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
    pllvco = HSI_VALUE;
 8002b24:	4b19      	ldr	r3, [pc, #100]	; (8002b8c <RCC_GetSysClockFreqFromPLLSource+0xc8>)
 8002b26:	613b      	str	r3, [r7, #16]
    break;
 8002b28:	e005      	b.n	8002b36 <RCC_GetSysClockFreqFromPLLSource+0x72>

  case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
    pllvco = HSE_VALUE;
 8002b2a:	4b19      	ldr	r3, [pc, #100]	; (8002b90 <RCC_GetSysClockFreqFromPLLSource+0xcc>)
 8002b2c:	613b      	str	r3, [r7, #16]
    break;
 8002b2e:	e002      	b.n	8002b36 <RCC_GetSysClockFreqFromPLLSource+0x72>

  case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
  default:
    pllvco = msirange;
 8002b30:	697b      	ldr	r3, [r7, #20]
 8002b32:	613b      	str	r3, [r7, #16]
    break;
 8002b34:	bf00      	nop
  }
  pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8002b36:	4b13      	ldr	r3, [pc, #76]	; (8002b84 <RCC_GetSysClockFreqFromPLLSource+0xc0>)
 8002b38:	68db      	ldr	r3, [r3, #12]
 8002b3a:	091b      	lsrs	r3, r3, #4
 8002b3c:	f003 030f 	and.w	r3, r3, #15
 8002b40:	3301      	adds	r3, #1
 8002b42:	60bb      	str	r3, [r7, #8]
  pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 8002b44:	4b0f      	ldr	r3, [pc, #60]	; (8002b84 <RCC_GetSysClockFreqFromPLLSource+0xc0>)
 8002b46:	68db      	ldr	r3, [r3, #12]
 8002b48:	0a1b      	lsrs	r3, r3, #8
 8002b4a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8002b4e:	693a      	ldr	r2, [r7, #16]
 8002b50:	fb02 f203 	mul.w	r2, r2, r3
 8002b54:	68bb      	ldr	r3, [r7, #8]
 8002b56:	fbb2 f3f3 	udiv	r3, r2, r3
 8002b5a:	613b      	str	r3, [r7, #16]
  pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8002b5c:	4b09      	ldr	r3, [pc, #36]	; (8002b84 <RCC_GetSysClockFreqFromPLLSource+0xc0>)
 8002b5e:	68db      	ldr	r3, [r3, #12]
 8002b60:	0e5b      	lsrs	r3, r3, #25
 8002b62:	f003 0303 	and.w	r3, r3, #3
 8002b66:	3301      	adds	r3, #1
 8002b68:	005b      	lsls	r3, r3, #1
 8002b6a:	607b      	str	r3, [r7, #4]
  sysclockfreq = pllvco / pllr;
 8002b6c:	693a      	ldr	r2, [r7, #16]
 8002b6e:	687b      	ldr	r3, [r7, #4]
 8002b70:	fbb2 f3f3 	udiv	r3, r2, r3
 8002b74:	603b      	str	r3, [r7, #0]

  return sysclockfreq;
 8002b76:	683b      	ldr	r3, [r7, #0]
}
 8002b78:	4618      	mov	r0, r3
 8002b7a:	371c      	adds	r7, #28
 8002b7c:	46bd      	mov	sp, r7
 8002b7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b82:	4770      	bx	lr
 8002b84:	40021000 	.word	0x40021000
 8002b88:	08007778 	.word	0x08007778
 8002b8c:	00f42400 	.word	0x00f42400
 8002b90:	007a1200 	.word	0x007a1200

08002b94 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8002b94:	b580      	push	{r7, lr}
 8002b96:	b086      	sub	sp, #24
 8002b98:	af00      	add	r7, sp, #0
 8002b9a:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8002b9c:	2300      	movs	r3, #0
 8002b9e:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8002ba0:	2300      	movs	r3, #0
 8002ba2:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 8002ba4:	687b      	ldr	r3, [r7, #4]
 8002ba6:	681b      	ldr	r3, [r3, #0]
 8002ba8:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002bac:	2b00      	cmp	r3, #0
 8002bae:	d040      	beq.n	8002c32 <HAL_RCCEx_PeriphCLKConfig+0x9e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 8002bb0:	687b      	ldr	r3, [r7, #4]
 8002bb2:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8002bb4:	2b80      	cmp	r3, #128	; 0x80
 8002bb6:	d02a      	beq.n	8002c0e <HAL_RCCEx_PeriphCLKConfig+0x7a>
 8002bb8:	2b80      	cmp	r3, #128	; 0x80
 8002bba:	d825      	bhi.n	8002c08 <HAL_RCCEx_PeriphCLKConfig+0x74>
 8002bbc:	2b60      	cmp	r3, #96	; 0x60
 8002bbe:	d026      	beq.n	8002c0e <HAL_RCCEx_PeriphCLKConfig+0x7a>
 8002bc0:	2b60      	cmp	r3, #96	; 0x60
 8002bc2:	d821      	bhi.n	8002c08 <HAL_RCCEx_PeriphCLKConfig+0x74>
 8002bc4:	2b40      	cmp	r3, #64	; 0x40
 8002bc6:	d006      	beq.n	8002bd6 <HAL_RCCEx_PeriphCLKConfig+0x42>
 8002bc8:	2b40      	cmp	r3, #64	; 0x40
 8002bca:	d81d      	bhi.n	8002c08 <HAL_RCCEx_PeriphCLKConfig+0x74>
 8002bcc:	2b00      	cmp	r3, #0
 8002bce:	d009      	beq.n	8002be4 <HAL_RCCEx_PeriphCLKConfig+0x50>
 8002bd0:	2b20      	cmp	r3, #32
 8002bd2:	d010      	beq.n	8002bf6 <HAL_RCCEx_PeriphCLKConfig+0x62>
 8002bd4:	e018      	b.n	8002c08 <HAL_RCCEx_PeriphCLKConfig+0x74>
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8002bd6:	4b89      	ldr	r3, [pc, #548]	; (8002dfc <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8002bd8:	68db      	ldr	r3, [r3, #12]
 8002bda:	4a88      	ldr	r2, [pc, #544]	; (8002dfc <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8002bdc:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002be0:	60d3      	str	r3, [r2, #12]
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 8002be2:	e015      	b.n	8002c10 <HAL_RCCEx_PeriphCLKConfig+0x7c>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8002be4:	687b      	ldr	r3, [r7, #4]
 8002be6:	3304      	adds	r3, #4
 8002be8:	2100      	movs	r1, #0
 8002bea:	4618      	mov	r0, r3
 8002bec:	f000 fb02 	bl	80031f4 <RCCEx_PLLSAI1_Config>
 8002bf0:	4603      	mov	r3, r0
 8002bf2:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8002bf4:	e00c      	b.n	8002c10 <HAL_RCCEx_PeriphCLKConfig+0x7c>

#if defined(RCC_PLLSAI2_SUPPORT)

    case RCC_SAI1CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI1*/
      /* PLLSAI2 input clock, parameters M, N & P configuration clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8002bf6:	687b      	ldr	r3, [r7, #4]
 8002bf8:	3320      	adds	r3, #32
 8002bfa:	2100      	movs	r1, #0
 8002bfc:	4618      	mov	r0, r3
 8002bfe:	f000 fbed 	bl	80033dc <RCCEx_PLLSAI2_Config>
 8002c02:	4603      	mov	r3, r0
 8002c04:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8002c06:	e003      	b.n	8002c10 <HAL_RCCEx_PeriphCLKConfig+0x7c>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8002c08:	2301      	movs	r3, #1
 8002c0a:	74fb      	strb	r3, [r7, #19]
      break;
 8002c0c:	e000      	b.n	8002c10 <HAL_RCCEx_PeriphCLKConfig+0x7c>
      break;
 8002c0e:	bf00      	nop
    }

    if(ret == HAL_OK)
 8002c10:	7cfb      	ldrb	r3, [r7, #19]
 8002c12:	2b00      	cmp	r3, #0
 8002c14:	d10b      	bne.n	8002c2e <HAL_RCCEx_PeriphCLKConfig+0x9a>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8002c16:	4b79      	ldr	r3, [pc, #484]	; (8002dfc <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8002c18:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8002c1c:	f023 02e0 	bic.w	r2, r3, #224	; 0xe0
 8002c20:	687b      	ldr	r3, [r7, #4]
 8002c22:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8002c24:	4975      	ldr	r1, [pc, #468]	; (8002dfc <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8002c26:	4313      	orrs	r3, r2
 8002c28:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
 8002c2c:	e001      	b.n	8002c32 <HAL_RCCEx_PeriphCLKConfig+0x9e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002c2e:	7cfb      	ldrb	r3, [r7, #19]
 8002c30:	74bb      	strb	r3, [r7, #18]
#endif /* SAI1 */

#if defined(SAI2)

  /*-------------------------- SAI2 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2))
 8002c32:	687b      	ldr	r3, [r7, #4]
 8002c34:	681b      	ldr	r3, [r3, #0]
 8002c36:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002c3a:	2b00      	cmp	r3, #0
 8002c3c:	d047      	beq.n	8002cce <HAL_RCCEx_PeriphCLKConfig+0x13a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLK(PeriphClkInit->Sai2ClockSelection));

    switch(PeriphClkInit->Sai2ClockSelection)
 8002c3e:	687b      	ldr	r3, [r7, #4]
 8002c40:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002c42:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002c46:	d030      	beq.n	8002caa <HAL_RCCEx_PeriphCLKConfig+0x116>
 8002c48:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002c4c:	d82a      	bhi.n	8002ca4 <HAL_RCCEx_PeriphCLKConfig+0x110>
 8002c4e:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8002c52:	d02a      	beq.n	8002caa <HAL_RCCEx_PeriphCLKConfig+0x116>
 8002c54:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8002c58:	d824      	bhi.n	8002ca4 <HAL_RCCEx_PeriphCLKConfig+0x110>
 8002c5a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002c5e:	d008      	beq.n	8002c72 <HAL_RCCEx_PeriphCLKConfig+0xde>
 8002c60:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002c64:	d81e      	bhi.n	8002ca4 <HAL_RCCEx_PeriphCLKConfig+0x110>
 8002c66:	2b00      	cmp	r3, #0
 8002c68:	d00a      	beq.n	8002c80 <HAL_RCCEx_PeriphCLKConfig+0xec>
 8002c6a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002c6e:	d010      	beq.n	8002c92 <HAL_RCCEx_PeriphCLKConfig+0xfe>
 8002c70:	e018      	b.n	8002ca4 <HAL_RCCEx_PeriphCLKConfig+0x110>
    {
    case RCC_SAI2CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated from System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8002c72:	4b62      	ldr	r3, [pc, #392]	; (8002dfc <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8002c74:	68db      	ldr	r3, [r3, #12]
 8002c76:	4a61      	ldr	r2, [pc, #388]	; (8002dfc <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8002c78:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002c7c:	60d3      	str	r3, [r2, #12]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8002c7e:	e015      	b.n	8002cac <HAL_RCCEx_PeriphCLKConfig+0x118>

    case RCC_SAI2CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI2*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8002c80:	687b      	ldr	r3, [r7, #4]
 8002c82:	3304      	adds	r3, #4
 8002c84:	2100      	movs	r1, #0
 8002c86:	4618      	mov	r0, r3
 8002c88:	f000 fab4 	bl	80031f4 <RCCEx_PLLSAI1_Config>
 8002c8c:	4603      	mov	r3, r0
 8002c8e:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8002c90:	e00c      	b.n	8002cac <HAL_RCCEx_PeriphCLKConfig+0x118>

    case RCC_SAI2CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI2*/
      /* PLLSAI2 input clock, parameters M, N & P configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8002c92:	687b      	ldr	r3, [r7, #4]
 8002c94:	3320      	adds	r3, #32
 8002c96:	2100      	movs	r1, #0
 8002c98:	4618      	mov	r0, r3
 8002c9a:	f000 fb9f 	bl	80033dc <RCCEx_PLLSAI2_Config>
 8002c9e:	4603      	mov	r3, r0
 8002ca0:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8002ca2:	e003      	b.n	8002cac <HAL_RCCEx_PeriphCLKConfig+0x118>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI2 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8002ca4:	2301      	movs	r3, #1
 8002ca6:	74fb      	strb	r3, [r7, #19]
      break;
 8002ca8:	e000      	b.n	8002cac <HAL_RCCEx_PeriphCLKConfig+0x118>
      break;
 8002caa:	bf00      	nop
    }

    if(ret == HAL_OK)
 8002cac:	7cfb      	ldrb	r3, [r7, #19]
 8002cae:	2b00      	cmp	r3, #0
 8002cb0:	d10b      	bne.n	8002cca <HAL_RCCEx_PeriphCLKConfig+0x136>
    {
      /* Set the source of SAI2 clock*/
      __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8002cb2:	4b52      	ldr	r3, [pc, #328]	; (8002dfc <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8002cb4:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8002cb8:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8002cbc:	687b      	ldr	r3, [r7, #4]
 8002cbe:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002cc0:	494e      	ldr	r1, [pc, #312]	; (8002dfc <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8002cc2:	4313      	orrs	r3, r2
 8002cc4:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
 8002cc8:	e001      	b.n	8002cce <HAL_RCCEx_PeriphCLKConfig+0x13a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002cca:	7cfb      	ldrb	r3, [r7, #19]
 8002ccc:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8002cce:	687b      	ldr	r3, [r7, #4]
 8002cd0:	681b      	ldr	r3, [r3, #0]
 8002cd2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002cd6:	2b00      	cmp	r3, #0
 8002cd8:	f000 809f 	beq.w	8002e1a <HAL_RCCEx_PeriphCLKConfig+0x286>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002cdc:	2300      	movs	r3, #0
 8002cde:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8002ce0:	4b46      	ldr	r3, [pc, #280]	; (8002dfc <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8002ce2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002ce4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002ce8:	2b00      	cmp	r3, #0
 8002cea:	d101      	bne.n	8002cf0 <HAL_RCCEx_PeriphCLKConfig+0x15c>
 8002cec:	2301      	movs	r3, #1
 8002cee:	e000      	b.n	8002cf2 <HAL_RCCEx_PeriphCLKConfig+0x15e>
 8002cf0:	2300      	movs	r3, #0
 8002cf2:	2b00      	cmp	r3, #0
 8002cf4:	d00d      	beq.n	8002d12 <HAL_RCCEx_PeriphCLKConfig+0x17e>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002cf6:	4b41      	ldr	r3, [pc, #260]	; (8002dfc <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8002cf8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002cfa:	4a40      	ldr	r2, [pc, #256]	; (8002dfc <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8002cfc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002d00:	6593      	str	r3, [r2, #88]	; 0x58
 8002d02:	4b3e      	ldr	r3, [pc, #248]	; (8002dfc <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8002d04:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002d06:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002d0a:	60bb      	str	r3, [r7, #8]
 8002d0c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002d0e:	2301      	movs	r3, #1
 8002d10:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8002d12:	4b3b      	ldr	r3, [pc, #236]	; (8002e00 <HAL_RCCEx_PeriphCLKConfig+0x26c>)
 8002d14:	681b      	ldr	r3, [r3, #0]
 8002d16:	4a3a      	ldr	r2, [pc, #232]	; (8002e00 <HAL_RCCEx_PeriphCLKConfig+0x26c>)
 8002d18:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002d1c:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8002d1e:	f7fd fc39 	bl	8000594 <HAL_GetTick>
 8002d22:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8002d24:	e009      	b.n	8002d3a <HAL_RCCEx_PeriphCLKConfig+0x1a6>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002d26:	f7fd fc35 	bl	8000594 <HAL_GetTick>
 8002d2a:	4602      	mov	r2, r0
 8002d2c:	68fb      	ldr	r3, [r7, #12]
 8002d2e:	1ad3      	subs	r3, r2, r3
 8002d30:	2b02      	cmp	r3, #2
 8002d32:	d902      	bls.n	8002d3a <HAL_RCCEx_PeriphCLKConfig+0x1a6>
      {
        ret = HAL_TIMEOUT;
 8002d34:	2303      	movs	r3, #3
 8002d36:	74fb      	strb	r3, [r7, #19]
        break;
 8002d38:	e005      	b.n	8002d46 <HAL_RCCEx_PeriphCLKConfig+0x1b2>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8002d3a:	4b31      	ldr	r3, [pc, #196]	; (8002e00 <HAL_RCCEx_PeriphCLKConfig+0x26c>)
 8002d3c:	681b      	ldr	r3, [r3, #0]
 8002d3e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002d42:	2b00      	cmp	r3, #0
 8002d44:	d0ef      	beq.n	8002d26 <HAL_RCCEx_PeriphCLKConfig+0x192>
      }
    }

    if(ret == HAL_OK)
 8002d46:	7cfb      	ldrb	r3, [r7, #19]
 8002d48:	2b00      	cmp	r3, #0
 8002d4a:	d15b      	bne.n	8002e04 <HAL_RCCEx_PeriphCLKConfig+0x270>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8002d4c:	4b2b      	ldr	r3, [pc, #172]	; (8002dfc <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8002d4e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002d52:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002d56:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8002d58:	697b      	ldr	r3, [r7, #20]
 8002d5a:	2b00      	cmp	r3, #0
 8002d5c:	d01f      	beq.n	8002d9e <HAL_RCCEx_PeriphCLKConfig+0x20a>
 8002d5e:	687b      	ldr	r3, [r7, #4]
 8002d60:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002d64:	697a      	ldr	r2, [r7, #20]
 8002d66:	429a      	cmp	r2, r3
 8002d68:	d019      	beq.n	8002d9e <HAL_RCCEx_PeriphCLKConfig+0x20a>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8002d6a:	4b24      	ldr	r3, [pc, #144]	; (8002dfc <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8002d6c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002d70:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002d74:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8002d76:	4b21      	ldr	r3, [pc, #132]	; (8002dfc <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8002d78:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002d7c:	4a1f      	ldr	r2, [pc, #124]	; (8002dfc <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8002d7e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002d82:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8002d86:	4b1d      	ldr	r3, [pc, #116]	; (8002dfc <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8002d88:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002d8c:	4a1b      	ldr	r2, [pc, #108]	; (8002dfc <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8002d8e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002d92:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8002d96:	4a19      	ldr	r2, [pc, #100]	; (8002dfc <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8002d98:	697b      	ldr	r3, [r7, #20]
 8002d9a:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8002d9e:	697b      	ldr	r3, [r7, #20]
 8002da0:	f003 0301 	and.w	r3, r3, #1
 8002da4:	2b00      	cmp	r3, #0
 8002da6:	d016      	beq.n	8002dd6 <HAL_RCCEx_PeriphCLKConfig+0x242>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002da8:	f7fd fbf4 	bl	8000594 <HAL_GetTick>
 8002dac:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002dae:	e00b      	b.n	8002dc8 <HAL_RCCEx_PeriphCLKConfig+0x234>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002db0:	f7fd fbf0 	bl	8000594 <HAL_GetTick>
 8002db4:	4602      	mov	r2, r0
 8002db6:	68fb      	ldr	r3, [r7, #12]
 8002db8:	1ad3      	subs	r3, r2, r3
 8002dba:	f241 3288 	movw	r2, #5000	; 0x1388
 8002dbe:	4293      	cmp	r3, r2
 8002dc0:	d902      	bls.n	8002dc8 <HAL_RCCEx_PeriphCLKConfig+0x234>
          {
            ret = HAL_TIMEOUT;
 8002dc2:	2303      	movs	r3, #3
 8002dc4:	74fb      	strb	r3, [r7, #19]
            break;
 8002dc6:	e006      	b.n	8002dd6 <HAL_RCCEx_PeriphCLKConfig+0x242>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002dc8:	4b0c      	ldr	r3, [pc, #48]	; (8002dfc <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8002dca:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002dce:	f003 0302 	and.w	r3, r3, #2
 8002dd2:	2b00      	cmp	r3, #0
 8002dd4:	d0ec      	beq.n	8002db0 <HAL_RCCEx_PeriphCLKConfig+0x21c>
          }
        }
      }

      if(ret == HAL_OK)
 8002dd6:	7cfb      	ldrb	r3, [r7, #19]
 8002dd8:	2b00      	cmp	r3, #0
 8002dda:	d10c      	bne.n	8002df6 <HAL_RCCEx_PeriphCLKConfig+0x262>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8002ddc:	4b07      	ldr	r3, [pc, #28]	; (8002dfc <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8002dde:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002de2:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8002de6:	687b      	ldr	r3, [r7, #4]
 8002de8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002dec:	4903      	ldr	r1, [pc, #12]	; (8002dfc <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8002dee:	4313      	orrs	r3, r2
 8002df0:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 8002df4:	e008      	b.n	8002e08 <HAL_RCCEx_PeriphCLKConfig+0x274>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8002df6:	7cfb      	ldrb	r3, [r7, #19]
 8002df8:	74bb      	strb	r3, [r7, #18]
 8002dfa:	e005      	b.n	8002e08 <HAL_RCCEx_PeriphCLKConfig+0x274>
 8002dfc:	40021000 	.word	0x40021000
 8002e00:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002e04:	7cfb      	ldrb	r3, [r7, #19]
 8002e06:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8002e08:	7c7b      	ldrb	r3, [r7, #17]
 8002e0a:	2b01      	cmp	r3, #1
 8002e0c:	d105      	bne.n	8002e1a <HAL_RCCEx_PeriphCLKConfig+0x286>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002e0e:	4ba0      	ldr	r3, [pc, #640]	; (8003090 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8002e10:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002e12:	4a9f      	ldr	r2, [pc, #636]	; (8003090 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8002e14:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002e18:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8002e1a:	687b      	ldr	r3, [r7, #4]
 8002e1c:	681b      	ldr	r3, [r3, #0]
 8002e1e:	f003 0301 	and.w	r3, r3, #1
 8002e22:	2b00      	cmp	r3, #0
 8002e24:	d00a      	beq.n	8002e3c <HAL_RCCEx_PeriphCLKConfig+0x2a8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8002e26:	4b9a      	ldr	r3, [pc, #616]	; (8003090 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8002e28:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002e2c:	f023 0203 	bic.w	r2, r3, #3
 8002e30:	687b      	ldr	r3, [r7, #4]
 8002e32:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002e34:	4996      	ldr	r1, [pc, #600]	; (8003090 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8002e36:	4313      	orrs	r3, r2
 8002e38:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8002e3c:	687b      	ldr	r3, [r7, #4]
 8002e3e:	681b      	ldr	r3, [r3, #0]
 8002e40:	f003 0302 	and.w	r3, r3, #2
 8002e44:	2b00      	cmp	r3, #0
 8002e46:	d00a      	beq.n	8002e5e <HAL_RCCEx_PeriphCLKConfig+0x2ca>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8002e48:	4b91      	ldr	r3, [pc, #580]	; (8003090 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8002e4a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002e4e:	f023 020c 	bic.w	r2, r3, #12
 8002e52:	687b      	ldr	r3, [r7, #4]
 8002e54:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002e56:	498e      	ldr	r1, [pc, #568]	; (8003090 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8002e58:	4313      	orrs	r3, r2
 8002e5a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8002e5e:	687b      	ldr	r3, [r7, #4]
 8002e60:	681b      	ldr	r3, [r3, #0]
 8002e62:	f003 0304 	and.w	r3, r3, #4
 8002e66:	2b00      	cmp	r3, #0
 8002e68:	d00a      	beq.n	8002e80 <HAL_RCCEx_PeriphCLKConfig+0x2ec>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8002e6a:	4b89      	ldr	r3, [pc, #548]	; (8003090 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8002e6c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002e70:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8002e74:	687b      	ldr	r3, [r7, #4]
 8002e76:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002e78:	4985      	ldr	r1, [pc, #532]	; (8003090 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8002e7a:	4313      	orrs	r3, r2
 8002e7c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* USART3 */

#if defined(UART4)

  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8002e80:	687b      	ldr	r3, [r7, #4]
 8002e82:	681b      	ldr	r3, [r3, #0]
 8002e84:	f003 0308 	and.w	r3, r3, #8
 8002e88:	2b00      	cmp	r3, #0
 8002e8a:	d00a      	beq.n	8002ea2 <HAL_RCCEx_PeriphCLKConfig+0x30e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8002e8c:	4b80      	ldr	r3, [pc, #512]	; (8003090 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8002e8e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002e92:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8002e96:	687b      	ldr	r3, [r7, #4]
 8002e98:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002e9a:	497d      	ldr	r1, [pc, #500]	; (8003090 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8002e9c:	4313      	orrs	r3, r2
 8002e9e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8002ea2:	687b      	ldr	r3, [r7, #4]
 8002ea4:	681b      	ldr	r3, [r3, #0]
 8002ea6:	f003 0310 	and.w	r3, r3, #16
 8002eaa:	2b00      	cmp	r3, #0
 8002eac:	d00a      	beq.n	8002ec4 <HAL_RCCEx_PeriphCLKConfig+0x330>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8002eae:	4b78      	ldr	r3, [pc, #480]	; (8003090 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8002eb0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002eb4:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8002eb8:	687b      	ldr	r3, [r7, #4]
 8002eba:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002ebc:	4974      	ldr	r1, [pc, #464]	; (8003090 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8002ebe:	4313      	orrs	r3, r2
 8002ec0:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8002ec4:	687b      	ldr	r3, [r7, #4]
 8002ec6:	681b      	ldr	r3, [r3, #0]
 8002ec8:	f003 0320 	and.w	r3, r3, #32
 8002ecc:	2b00      	cmp	r3, #0
 8002ece:	d00a      	beq.n	8002ee6 <HAL_RCCEx_PeriphCLKConfig+0x352>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8002ed0:	4b6f      	ldr	r3, [pc, #444]	; (8003090 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8002ed2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002ed6:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8002eda:	687b      	ldr	r3, [r7, #4]
 8002edc:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002ede:	496c      	ldr	r1, [pc, #432]	; (8003090 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8002ee0:	4313      	orrs	r3, r2
 8002ee2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8002ee6:	687b      	ldr	r3, [r7, #4]
 8002ee8:	681b      	ldr	r3, [r3, #0]
 8002eea:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002eee:	2b00      	cmp	r3, #0
 8002ef0:	d00a      	beq.n	8002f08 <HAL_RCCEx_PeriphCLKConfig+0x374>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8002ef2:	4b67      	ldr	r3, [pc, #412]	; (8003090 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8002ef4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002ef8:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8002efc:	687b      	ldr	r3, [r7, #4]
 8002efe:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8002f00:	4963      	ldr	r1, [pc, #396]	; (8003090 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8002f02:	4313      	orrs	r3, r2
 8002f04:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8002f08:	687b      	ldr	r3, [r7, #4]
 8002f0a:	681b      	ldr	r3, [r3, #0]
 8002f0c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002f10:	2b00      	cmp	r3, #0
 8002f12:	d00a      	beq.n	8002f2a <HAL_RCCEx_PeriphCLKConfig+0x396>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8002f14:	4b5e      	ldr	r3, [pc, #376]	; (8003090 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8002f16:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002f1a:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8002f1e:	687b      	ldr	r3, [r7, #4]
 8002f20:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8002f22:	495b      	ldr	r1, [pc, #364]	; (8003090 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8002f24:	4313      	orrs	r3, r2
 8002f26:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8002f2a:	687b      	ldr	r3, [r7, #4]
 8002f2c:	681b      	ldr	r3, [r3, #0]
 8002f2e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002f32:	2b00      	cmp	r3, #0
 8002f34:	d00a      	beq.n	8002f4c <HAL_RCCEx_PeriphCLKConfig+0x3b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8002f36:	4b56      	ldr	r3, [pc, #344]	; (8003090 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8002f38:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002f3c:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8002f40:	687b      	ldr	r3, [r7, #4]
 8002f42:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002f44:	4952      	ldr	r1, [pc, #328]	; (8003090 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8002f46:	4313      	orrs	r3, r2
 8002f48:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C2)

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8002f4c:	687b      	ldr	r3, [r7, #4]
 8002f4e:	681b      	ldr	r3, [r3, #0]
 8002f50:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002f54:	2b00      	cmp	r3, #0
 8002f56:	d00a      	beq.n	8002f6e <HAL_RCCEx_PeriphCLKConfig+0x3da>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8002f58:	4b4d      	ldr	r3, [pc, #308]	; (8003090 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8002f5a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002f5e:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8002f62:	687b      	ldr	r3, [r7, #4]
 8002f64:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002f66:	494a      	ldr	r1, [pc, #296]	; (8003090 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8002f68:	4313      	orrs	r3, r2
 8002f6a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8002f6e:	687b      	ldr	r3, [r7, #4]
 8002f70:	681b      	ldr	r3, [r3, #0]
 8002f72:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002f76:	2b00      	cmp	r3, #0
 8002f78:	d00a      	beq.n	8002f90 <HAL_RCCEx_PeriphCLKConfig+0x3fc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8002f7a:	4b45      	ldr	r3, [pc, #276]	; (8003090 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8002f7c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002f80:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8002f84:	687b      	ldr	r3, [r7, #4]
 8002f86:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002f88:	4941      	ldr	r1, [pc, #260]	; (8003090 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8002f8a:	4313      	orrs	r3, r2
 8002f8c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C4)

  /*-------------------------- I2C4 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8002f90:	687b      	ldr	r3, [r7, #4]
 8002f92:	681b      	ldr	r3, [r3, #0]
 8002f94:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002f98:	2b00      	cmp	r3, #0
 8002f9a:	d00a      	beq.n	8002fb2 <HAL_RCCEx_PeriphCLKConfig+0x41e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8002f9c:	4b3c      	ldr	r3, [pc, #240]	; (8003090 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8002f9e:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8002fa2:	f023 0203 	bic.w	r2, r3, #3
 8002fa6:	687b      	ldr	r3, [r7, #4]
 8002fa8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002faa:	4939      	ldr	r1, [pc, #228]	; (8003090 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8002fac:	4313      	orrs	r3, r2
 8002fae:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8002fb2:	687b      	ldr	r3, [r7, #4]
 8002fb4:	681b      	ldr	r3, [r3, #0]
 8002fb6:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8002fba:	2b00      	cmp	r3, #0
 8002fbc:	d028      	beq.n	8003010 <HAL_RCCEx_PeriphCLKConfig+0x47c>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8002fbe:	4b34      	ldr	r3, [pc, #208]	; (8003090 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8002fc0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002fc4:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8002fc8:	687b      	ldr	r3, [r7, #4]
 8002fca:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002fcc:	4930      	ldr	r1, [pc, #192]	; (8003090 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8002fce:	4313      	orrs	r3, r2
 8002fd0:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8002fd4:	687b      	ldr	r3, [r7, #4]
 8002fd6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002fd8:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8002fdc:	d106      	bne.n	8002fec <HAL_RCCEx_PeriphCLKConfig+0x458>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8002fde:	4b2c      	ldr	r3, [pc, #176]	; (8003090 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8002fe0:	68db      	ldr	r3, [r3, #12]
 8002fe2:	4a2b      	ldr	r2, [pc, #172]	; (8003090 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8002fe4:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8002fe8:	60d3      	str	r3, [r2, #12]
 8002fea:	e011      	b.n	8003010 <HAL_RCCEx_PeriphCLKConfig+0x47c>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 8002fec:	687b      	ldr	r3, [r7, #4]
 8002fee:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002ff0:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8002ff4:	d10c      	bne.n	8003010 <HAL_RCCEx_PeriphCLKConfig+0x47c>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8002ff6:	687b      	ldr	r3, [r7, #4]
 8002ff8:	3304      	adds	r3, #4
 8002ffa:	2101      	movs	r1, #1
 8002ffc:	4618      	mov	r0, r3
 8002ffe:	f000 f8f9 	bl	80031f4 <RCCEx_PLLSAI1_Config>
 8003002:	4603      	mov	r3, r0
 8003004:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 8003006:	7cfb      	ldrb	r3, [r7, #19]
 8003008:	2b00      	cmp	r3, #0
 800300a:	d001      	beq.n	8003010 <HAL_RCCEx_PeriphCLKConfig+0x47c>
        {
          /* set overall return value */
          status = ret;
 800300c:	7cfb      	ldrb	r3, [r7, #19]
 800300e:	74bb      	strb	r3, [r7, #18]
#endif /* USB_OTG_FS || USB */

#if defined(SDMMC1)

  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 8003010:	687b      	ldr	r3, [r7, #4]
 8003012:	681b      	ldr	r3, [r3, #0]
 8003014:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8003018:	2b00      	cmp	r3, #0
 800301a:	d04d      	beq.n	80030b8 <HAL_RCCEx_PeriphCLKConfig+0x524>
  {
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 800301c:	687b      	ldr	r3, [r7, #4]
 800301e:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8003020:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8003024:	d108      	bne.n	8003038 <HAL_RCCEx_PeriphCLKConfig+0x4a4>
 8003026:	4b1a      	ldr	r3, [pc, #104]	; (8003090 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8003028:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800302c:	4a18      	ldr	r2, [pc, #96]	; (8003090 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800302e:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8003032:	f8c2 309c 	str.w	r3, [r2, #156]	; 0x9c
 8003036:	e012      	b.n	800305e <HAL_RCCEx_PeriphCLKConfig+0x4ca>
 8003038:	4b15      	ldr	r3, [pc, #84]	; (8003090 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800303a:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800303e:	4a14      	ldr	r2, [pc, #80]	; (8003090 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8003040:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8003044:	f8c2 309c 	str.w	r3, [r2, #156]	; 0x9c
 8003048:	4b11      	ldr	r3, [pc, #68]	; (8003090 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800304a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800304e:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8003052:	687b      	ldr	r3, [r7, #4]
 8003054:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8003056:	490e      	ldr	r1, [pc, #56]	; (8003090 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8003058:	4313      	orrs	r3, r2
 800305a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 800305e:	687b      	ldr	r3, [r7, #4]
 8003060:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8003062:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8003066:	d106      	bne.n	8003076 <HAL_RCCEx_PeriphCLKConfig+0x4e2>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8003068:	4b09      	ldr	r3, [pc, #36]	; (8003090 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800306a:	68db      	ldr	r3, [r3, #12]
 800306c:	4a08      	ldr	r2, [pc, #32]	; (8003090 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800306e:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8003072:	60d3      	str	r3, [r2, #12]
 8003074:	e020      	b.n	80030b8 <HAL_RCCEx_PeriphCLKConfig+0x524>
    }
#if defined(RCC_CCIPR2_SDMMCSEL)
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLP) /* PLL "P" ? */
 8003076:	687b      	ldr	r3, [r7, #4]
 8003078:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800307a:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800307e:	d109      	bne.n	8003094 <HAL_RCCEx_PeriphCLKConfig+0x500>
    {
      /* Enable PLLSAI3CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8003080:	4b03      	ldr	r3, [pc, #12]	; (8003090 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8003082:	68db      	ldr	r3, [r3, #12]
 8003084:	4a02      	ldr	r2, [pc, #8]	; (8003090 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8003086:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800308a:	60d3      	str	r3, [r2, #12]
 800308c:	e014      	b.n	80030b8 <HAL_RCCEx_PeriphCLKConfig+0x524>
 800308e:	bf00      	nop
 8003090:	40021000 	.word	0x40021000
    }
#endif
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 8003094:	687b      	ldr	r3, [r7, #4]
 8003096:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8003098:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800309c:	d10c      	bne.n	80030b8 <HAL_RCCEx_PeriphCLKConfig+0x524>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 800309e:	687b      	ldr	r3, [r7, #4]
 80030a0:	3304      	adds	r3, #4
 80030a2:	2101      	movs	r1, #1
 80030a4:	4618      	mov	r0, r3
 80030a6:	f000 f8a5 	bl	80031f4 <RCCEx_PLLSAI1_Config>
 80030aa:	4603      	mov	r3, r0
 80030ac:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 80030ae:	7cfb      	ldrb	r3, [r7, #19]
 80030b0:	2b00      	cmp	r3, #0
 80030b2:	d001      	beq.n	80030b8 <HAL_RCCEx_PeriphCLKConfig+0x524>
      {
        /* set overall return value */
        status = ret;
 80030b4:	7cfb      	ldrb	r3, [r7, #19]
 80030b6:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 80030b8:	687b      	ldr	r3, [r7, #4]
 80030ba:	681b      	ldr	r3, [r3, #0]
 80030bc:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80030c0:	2b00      	cmp	r3, #0
 80030c2:	d028      	beq.n	8003116 <HAL_RCCEx_PeriphCLKConfig+0x582>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 80030c4:	4b4a      	ldr	r3, [pc, #296]	; (80031f0 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80030c6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80030ca:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 80030ce:	687b      	ldr	r3, [r7, #4]
 80030d0:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80030d2:	4947      	ldr	r1, [pc, #284]	; (80031f0 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80030d4:	4313      	orrs	r3, r2
 80030d6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 80030da:	687b      	ldr	r3, [r7, #4]
 80030dc:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80030de:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80030e2:	d106      	bne.n	80030f2 <HAL_RCCEx_PeriphCLKConfig+0x55e>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80030e4:	4b42      	ldr	r3, [pc, #264]	; (80031f0 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80030e6:	68db      	ldr	r3, [r3, #12]
 80030e8:	4a41      	ldr	r2, [pc, #260]	; (80031f0 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80030ea:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80030ee:	60d3      	str	r3, [r2, #12]
 80030f0:	e011      	b.n	8003116 <HAL_RCCEx_PeriphCLKConfig+0x582>
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 80030f2:	687b      	ldr	r3, [r7, #4]
 80030f4:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80030f6:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80030fa:	d10c      	bne.n	8003116 <HAL_RCCEx_PeriphCLKConfig+0x582>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 80030fc:	687b      	ldr	r3, [r7, #4]
 80030fe:	3304      	adds	r3, #4
 8003100:	2101      	movs	r1, #1
 8003102:	4618      	mov	r0, r3
 8003104:	f000 f876 	bl	80031f4 <RCCEx_PLLSAI1_Config>
 8003108:	4603      	mov	r3, r0
 800310a:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 800310c:	7cfb      	ldrb	r3, [r7, #19]
 800310e:	2b00      	cmp	r3, #0
 8003110:	d001      	beq.n	8003116 <HAL_RCCEx_PeriphCLKConfig+0x582>
      {
        /* set overall return value */
        status = ret;
 8003112:	7cfb      	ldrb	r3, [r7, #19]
 8003114:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8003116:	687b      	ldr	r3, [r7, #4]
 8003118:	681b      	ldr	r3, [r3, #0]
 800311a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800311e:	2b00      	cmp	r3, #0
 8003120:	d01e      	beq.n	8003160 <HAL_RCCEx_PeriphCLKConfig+0x5cc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8003122:	4b33      	ldr	r3, [pc, #204]	; (80031f0 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8003124:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003128:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 800312c:	687b      	ldr	r3, [r7, #4]
 800312e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8003132:	492f      	ldr	r1, [pc, #188]	; (80031f0 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8003134:	4313      	orrs	r3, r2
 8003136:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 800313a:	687b      	ldr	r3, [r7, #4]
 800313c:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8003140:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8003144:	d10c      	bne.n	8003160 <HAL_RCCEx_PeriphCLKConfig+0x5cc>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 8003146:	687b      	ldr	r3, [r7, #4]
 8003148:	3304      	adds	r3, #4
 800314a:	2102      	movs	r1, #2
 800314c:	4618      	mov	r0, r3
 800314e:	f000 f851 	bl	80031f4 <RCCEx_PLLSAI1_Config>
 8003152:	4603      	mov	r3, r0
 8003154:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8003156:	7cfb      	ldrb	r3, [r7, #19]
 8003158:	2b00      	cmp	r3, #0
 800315a:	d001      	beq.n	8003160 <HAL_RCCEx_PeriphCLKConfig+0x5cc>
      {
        /* set overall return value */
        status = ret;
 800315c:	7cfb      	ldrb	r3, [r7, #19]
 800315e:	74bb      	strb	r3, [r7, #18]
#endif /* SWPMI1 */

#if defined(DFSDM1_Filter0)

  /*-------------------------- DFSDM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8003160:	687b      	ldr	r3, [r7, #4]
 8003162:	681b      	ldr	r3, [r3, #0]
 8003164:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003168:	2b00      	cmp	r3, #0
 800316a:	d00b      	beq.n	8003184 <HAL_RCCEx_PeriphCLKConfig+0x5f0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 800316c:	4b20      	ldr	r3, [pc, #128]	; (80031f0 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800316e:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8003172:	f023 0204 	bic.w	r2, r3, #4
 8003176:	687b      	ldr	r3, [r7, #4]
 8003178:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800317c:	491c      	ldr	r1, [pc, #112]	; (80031f0 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800317e:	4313      	orrs	r3, r2
 8003180:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
  }

#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
  /*-------------------------- DFSDM1 audio clock source configuration -------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1AUDIO) == RCC_PERIPHCLK_DFSDM1AUDIO)
 8003184:	687b      	ldr	r3, [r7, #4]
 8003186:	681b      	ldr	r3, [r3, #0]
 8003188:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800318c:	2b00      	cmp	r3, #0
 800318e:	d00b      	beq.n	80031a8 <HAL_RCCEx_PeriphCLKConfig+0x614>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1AUDIOCLKSOURCE(PeriphClkInit->Dfsdm1AudioClockSelection));

    /* Configure the DFSDM1 interface audio clock source */
    __HAL_RCC_DFSDM1AUDIO_CONFIG(PeriphClkInit->Dfsdm1AudioClockSelection);
 8003190:	4b17      	ldr	r3, [pc, #92]	; (80031f0 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8003192:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8003196:	f023 0218 	bic.w	r2, r3, #24
 800319a:	687b      	ldr	r3, [r7, #4]
 800319c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80031a0:	4913      	ldr	r1, [pc, #76]	; (80031f0 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80031a2:	4313      	orrs	r3, r2
 80031a4:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
#endif /* DSI */

#if defined(OCTOSPI1) || defined(OCTOSPI2)

  /*-------------------------- OctoSPIx clock source configuration ----------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_OSPI) == RCC_PERIPHCLK_OSPI)
 80031a8:	687b      	ldr	r3, [r7, #4]
 80031aa:	681b      	ldr	r3, [r3, #0]
 80031ac:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80031b0:	2b00      	cmp	r3, #0
 80031b2:	d017      	beq.n	80031e4 <HAL_RCCEx_PeriphCLKConfig+0x650>
  {
    /* Check the parameters */
    assert_param(IS_RCC_OSPICLKSOURCE(PeriphClkInit->OspiClockSelection));

    /* Configure the OctoSPI clock source */
    __HAL_RCC_OSPI_CONFIG(PeriphClkInit->OspiClockSelection);
 80031b4:	4b0e      	ldr	r3, [pc, #56]	; (80031f0 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80031b6:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 80031ba:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80031be:	687b      	ldr	r3, [r7, #4]
 80031c0:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80031c4:	490a      	ldr	r1, [pc, #40]	; (80031f0 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80031c6:	4313      	orrs	r3, r2
 80031c8:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c

    if(PeriphClkInit->OspiClockSelection == RCC_OSPICLKSOURCE_PLL)
 80031cc:	687b      	ldr	r3, [r7, #4]
 80031ce:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80031d2:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80031d6:	d105      	bne.n	80031e4 <HAL_RCCEx_PeriphCLKConfig+0x650>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80031d8:	4b05      	ldr	r3, [pc, #20]	; (80031f0 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80031da:	68db      	ldr	r3, [r3, #12]
 80031dc:	4a04      	ldr	r2, [pc, #16]	; (80031f0 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80031de:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80031e2:	60d3      	str	r3, [r2, #12]
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 80031e4:	7cbb      	ldrb	r3, [r7, #18]
}
 80031e6:	4618      	mov	r0, r3
 80031e8:	3718      	adds	r7, #24
 80031ea:	46bd      	mov	sp, r7
 80031ec:	bd80      	pop	{r7, pc}
 80031ee:	bf00      	nop
 80031f0:	40021000 	.word	0x40021000

080031f4 <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 80031f4:	b580      	push	{r7, lr}
 80031f6:	b084      	sub	sp, #16
 80031f8:	af00      	add	r7, sp, #0
 80031fa:	6078      	str	r0, [r7, #4]
 80031fc:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 80031fe:	2300      	movs	r3, #0
 8003200:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8003202:	4b72      	ldr	r3, [pc, #456]	; (80033cc <RCCEx_PLLSAI1_Config+0x1d8>)
 8003204:	68db      	ldr	r3, [r3, #12]
 8003206:	f003 0303 	and.w	r3, r3, #3
 800320a:	2b00      	cmp	r3, #0
 800320c:	d00e      	beq.n	800322c <RCCEx_PLLSAI1_Config+0x38>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 800320e:	4b6f      	ldr	r3, [pc, #444]	; (80033cc <RCCEx_PLLSAI1_Config+0x1d8>)
 8003210:	68db      	ldr	r3, [r3, #12]
 8003212:	f003 0203 	and.w	r2, r3, #3
 8003216:	687b      	ldr	r3, [r7, #4]
 8003218:	681b      	ldr	r3, [r3, #0]
 800321a:	429a      	cmp	r2, r3
 800321c:	d103      	bne.n	8003226 <RCCEx_PLLSAI1_Config+0x32>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 800321e:	687b      	ldr	r3, [r7, #4]
 8003220:	681b      	ldr	r3, [r3, #0]
       ||
 8003222:	2b00      	cmp	r3, #0
 8003224:	d142      	bne.n	80032ac <RCCEx_PLLSAI1_Config+0xb8>
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
#endif
      )
    {
      status = HAL_ERROR;
 8003226:	2301      	movs	r3, #1
 8003228:	73fb      	strb	r3, [r7, #15]
 800322a:	e03f      	b.n	80032ac <RCCEx_PLLSAI1_Config+0xb8>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 800322c:	687b      	ldr	r3, [r7, #4]
 800322e:	681b      	ldr	r3, [r3, #0]
 8003230:	2b03      	cmp	r3, #3
 8003232:	d018      	beq.n	8003266 <RCCEx_PLLSAI1_Config+0x72>
 8003234:	2b03      	cmp	r3, #3
 8003236:	d825      	bhi.n	8003284 <RCCEx_PLLSAI1_Config+0x90>
 8003238:	2b01      	cmp	r3, #1
 800323a:	d002      	beq.n	8003242 <RCCEx_PLLSAI1_Config+0x4e>
 800323c:	2b02      	cmp	r3, #2
 800323e:	d009      	beq.n	8003254 <RCCEx_PLLSAI1_Config+0x60>
 8003240:	e020      	b.n	8003284 <RCCEx_PLLSAI1_Config+0x90>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8003242:	4b62      	ldr	r3, [pc, #392]	; (80033cc <RCCEx_PLLSAI1_Config+0x1d8>)
 8003244:	681b      	ldr	r3, [r3, #0]
 8003246:	f003 0302 	and.w	r3, r3, #2
 800324a:	2b00      	cmp	r3, #0
 800324c:	d11d      	bne.n	800328a <RCCEx_PLLSAI1_Config+0x96>
      {
        status = HAL_ERROR;
 800324e:	2301      	movs	r3, #1
 8003250:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003252:	e01a      	b.n	800328a <RCCEx_PLLSAI1_Config+0x96>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8003254:	4b5d      	ldr	r3, [pc, #372]	; (80033cc <RCCEx_PLLSAI1_Config+0x1d8>)
 8003256:	681b      	ldr	r3, [r3, #0]
 8003258:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800325c:	2b00      	cmp	r3, #0
 800325e:	d116      	bne.n	800328e <RCCEx_PLLSAI1_Config+0x9a>
      {
        status = HAL_ERROR;
 8003260:	2301      	movs	r3, #1
 8003262:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003264:	e013      	b.n	800328e <RCCEx_PLLSAI1_Config+0x9a>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8003266:	4b59      	ldr	r3, [pc, #356]	; (80033cc <RCCEx_PLLSAI1_Config+0x1d8>)
 8003268:	681b      	ldr	r3, [r3, #0]
 800326a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800326e:	2b00      	cmp	r3, #0
 8003270:	d10f      	bne.n	8003292 <RCCEx_PLLSAI1_Config+0x9e>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8003272:	4b56      	ldr	r3, [pc, #344]	; (80033cc <RCCEx_PLLSAI1_Config+0x1d8>)
 8003274:	681b      	ldr	r3, [r3, #0]
 8003276:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800327a:	2b00      	cmp	r3, #0
 800327c:	d109      	bne.n	8003292 <RCCEx_PLLSAI1_Config+0x9e>
        {
          status = HAL_ERROR;
 800327e:	2301      	movs	r3, #1
 8003280:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8003282:	e006      	b.n	8003292 <RCCEx_PLLSAI1_Config+0x9e>
    default:
      status = HAL_ERROR;
 8003284:	2301      	movs	r3, #1
 8003286:	73fb      	strb	r3, [r7, #15]
      break;
 8003288:	e004      	b.n	8003294 <RCCEx_PLLSAI1_Config+0xa0>
      break;
 800328a:	bf00      	nop
 800328c:	e002      	b.n	8003294 <RCCEx_PLLSAI1_Config+0xa0>
      break;
 800328e:	bf00      	nop
 8003290:	e000      	b.n	8003294 <RCCEx_PLLSAI1_Config+0xa0>
      break;
 8003292:	bf00      	nop
    }

    if(status == HAL_OK)
 8003294:	7bfb      	ldrb	r3, [r7, #15]
 8003296:	2b00      	cmp	r3, #0
 8003298:	d108      	bne.n	80032ac <RCCEx_PLLSAI1_Config+0xb8>
    {
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
 800329a:	4b4c      	ldr	r3, [pc, #304]	; (80033cc <RCCEx_PLLSAI1_Config+0x1d8>)
 800329c:	68db      	ldr	r3, [r3, #12]
 800329e:	f023 0203 	bic.w	r2, r3, #3
 80032a2:	687b      	ldr	r3, [r7, #4]
 80032a4:	681b      	ldr	r3, [r3, #0]
 80032a6:	4949      	ldr	r1, [pc, #292]	; (80033cc <RCCEx_PLLSAI1_Config+0x1d8>)
 80032a8:	4313      	orrs	r3, r2
 80032aa:	60cb      	str	r3, [r1, #12]
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
#endif
    }
  }

  if(status == HAL_OK)
 80032ac:	7bfb      	ldrb	r3, [r7, #15]
 80032ae:	2b00      	cmp	r3, #0
 80032b0:	f040 8086 	bne.w	80033c0 <RCCEx_PLLSAI1_Config+0x1cc>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 80032b4:	4b45      	ldr	r3, [pc, #276]	; (80033cc <RCCEx_PLLSAI1_Config+0x1d8>)
 80032b6:	681b      	ldr	r3, [r3, #0]
 80032b8:	4a44      	ldr	r2, [pc, #272]	; (80033cc <RCCEx_PLLSAI1_Config+0x1d8>)
 80032ba:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 80032be:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80032c0:	f7fd f968 	bl	8000594 <HAL_GetTick>
 80032c4:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 80032c6:	e009      	b.n	80032dc <RCCEx_PLLSAI1_Config+0xe8>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 80032c8:	f7fd f964 	bl	8000594 <HAL_GetTick>
 80032cc:	4602      	mov	r2, r0
 80032ce:	68bb      	ldr	r3, [r7, #8]
 80032d0:	1ad3      	subs	r3, r2, r3
 80032d2:	2b02      	cmp	r3, #2
 80032d4:	d902      	bls.n	80032dc <RCCEx_PLLSAI1_Config+0xe8>
      {
        status = HAL_TIMEOUT;
 80032d6:	2303      	movs	r3, #3
 80032d8:	73fb      	strb	r3, [r7, #15]
        break;
 80032da:	e005      	b.n	80032e8 <RCCEx_PLLSAI1_Config+0xf4>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 80032dc:	4b3b      	ldr	r3, [pc, #236]	; (80033cc <RCCEx_PLLSAI1_Config+0x1d8>)
 80032de:	681b      	ldr	r3, [r3, #0]
 80032e0:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80032e4:	2b00      	cmp	r3, #0
 80032e6:	d1ef      	bne.n	80032c8 <RCCEx_PLLSAI1_Config+0xd4>
      }
    }

    if(status == HAL_OK)
 80032e8:	7bfb      	ldrb	r3, [r7, #15]
 80032ea:	2b00      	cmp	r3, #0
 80032ec:	d168      	bne.n	80033c0 <RCCEx_PLLSAI1_Config+0x1cc>
    {
      if(Divider == DIVIDER_P_UPDATE)
 80032ee:	683b      	ldr	r3, [r7, #0]
 80032f0:	2b00      	cmp	r3, #0
 80032f2:	d113      	bne.n	800331c <RCCEx_PLLSAI1_Config+0x128>
        assert_param(IS_RCC_PLLSAI1P_VALUE(PllSai1->PLLSAI1P));
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)

        /* Configure the PLLSAI1 Division factor M, P and Multiplication factor N*/
#if defined(RCC_PLLSAI1P_DIV_2_31_SUPPORT)
        MODIFY_REG(RCC->PLLSAI1CFGR,
 80032f4:	4b35      	ldr	r3, [pc, #212]	; (80033cc <RCCEx_PLLSAI1_Config+0x1d8>)
 80032f6:	691a      	ldr	r2, [r3, #16]
 80032f8:	4b35      	ldr	r3, [pc, #212]	; (80033d0 <RCCEx_PLLSAI1_Config+0x1dc>)
 80032fa:	4013      	ands	r3, r2
 80032fc:	687a      	ldr	r2, [r7, #4]
 80032fe:	6892      	ldr	r2, [r2, #8]
 8003300:	0211      	lsls	r1, r2, #8
 8003302:	687a      	ldr	r2, [r7, #4]
 8003304:	68d2      	ldr	r2, [r2, #12]
 8003306:	06d2      	lsls	r2, r2, #27
 8003308:	4311      	orrs	r1, r2
 800330a:	687a      	ldr	r2, [r7, #4]
 800330c:	6852      	ldr	r2, [r2, #4]
 800330e:	3a01      	subs	r2, #1
 8003310:	0112      	lsls	r2, r2, #4
 8003312:	430a      	orrs	r2, r1
 8003314:	492d      	ldr	r1, [pc, #180]	; (80033cc <RCCEx_PLLSAI1_Config+0x1d8>)
 8003316:	4313      	orrs	r3, r2
 8003318:	610b      	str	r3, [r1, #16]
 800331a:	e02d      	b.n	8003378 <RCCEx_PLLSAI1_Config+0x184>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 800331c:	683b      	ldr	r3, [r7, #0]
 800331e:	2b01      	cmp	r3, #1
 8003320:	d115      	bne.n	800334e <RCCEx_PLLSAI1_Config+0x15a>
      {
        assert_param(IS_RCC_PLLSAI1Q_VALUE(PllSai1->PLLSAI1Q));
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
        /* Configure the PLLSAI1 Division factor M, Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8003322:	4b2a      	ldr	r3, [pc, #168]	; (80033cc <RCCEx_PLLSAI1_Config+0x1d8>)
 8003324:	691a      	ldr	r2, [r3, #16]
 8003326:	4b2b      	ldr	r3, [pc, #172]	; (80033d4 <RCCEx_PLLSAI1_Config+0x1e0>)
 8003328:	4013      	ands	r3, r2
 800332a:	687a      	ldr	r2, [r7, #4]
 800332c:	6892      	ldr	r2, [r2, #8]
 800332e:	0211      	lsls	r1, r2, #8
 8003330:	687a      	ldr	r2, [r7, #4]
 8003332:	6912      	ldr	r2, [r2, #16]
 8003334:	0852      	lsrs	r2, r2, #1
 8003336:	3a01      	subs	r2, #1
 8003338:	0552      	lsls	r2, r2, #21
 800333a:	4311      	orrs	r1, r2
 800333c:	687a      	ldr	r2, [r7, #4]
 800333e:	6852      	ldr	r2, [r2, #4]
 8003340:	3a01      	subs	r2, #1
 8003342:	0112      	lsls	r2, r2, #4
 8003344:	430a      	orrs	r2, r1
 8003346:	4921      	ldr	r1, [pc, #132]	; (80033cc <RCCEx_PLLSAI1_Config+0x1d8>)
 8003348:	4313      	orrs	r3, r2
 800334a:	610b      	str	r3, [r1, #16]
 800334c:	e014      	b.n	8003378 <RCCEx_PLLSAI1_Config+0x184>
      else
      {
        assert_param(IS_RCC_PLLSAI1R_VALUE(PllSai1->PLLSAI1R));
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
        /* Configure the PLLSAI1 Division factor M, R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 800334e:	4b1f      	ldr	r3, [pc, #124]	; (80033cc <RCCEx_PLLSAI1_Config+0x1d8>)
 8003350:	691a      	ldr	r2, [r3, #16]
 8003352:	4b21      	ldr	r3, [pc, #132]	; (80033d8 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003354:	4013      	ands	r3, r2
 8003356:	687a      	ldr	r2, [r7, #4]
 8003358:	6892      	ldr	r2, [r2, #8]
 800335a:	0211      	lsls	r1, r2, #8
 800335c:	687a      	ldr	r2, [r7, #4]
 800335e:	6952      	ldr	r2, [r2, #20]
 8003360:	0852      	lsrs	r2, r2, #1
 8003362:	3a01      	subs	r2, #1
 8003364:	0652      	lsls	r2, r2, #25
 8003366:	4311      	orrs	r1, r2
 8003368:	687a      	ldr	r2, [r7, #4]
 800336a:	6852      	ldr	r2, [r2, #4]
 800336c:	3a01      	subs	r2, #1
 800336e:	0112      	lsls	r2, r2, #4
 8003370:	430a      	orrs	r2, r1
 8003372:	4916      	ldr	r1, [pc, #88]	; (80033cc <RCCEx_PLLSAI1_Config+0x1d8>)
 8003374:	4313      	orrs	r3, r2
 8003376:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 8003378:	4b14      	ldr	r3, [pc, #80]	; (80033cc <RCCEx_PLLSAI1_Config+0x1d8>)
 800337a:	681b      	ldr	r3, [r3, #0]
 800337c:	4a13      	ldr	r2, [pc, #76]	; (80033cc <RCCEx_PLLSAI1_Config+0x1d8>)
 800337e:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8003382:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003384:	f7fd f906 	bl	8000594 <HAL_GetTick>
 8003388:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 800338a:	e009      	b.n	80033a0 <RCCEx_PLLSAI1_Config+0x1ac>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 800338c:	f7fd f902 	bl	8000594 <HAL_GetTick>
 8003390:	4602      	mov	r2, r0
 8003392:	68bb      	ldr	r3, [r7, #8]
 8003394:	1ad3      	subs	r3, r2, r3
 8003396:	2b02      	cmp	r3, #2
 8003398:	d902      	bls.n	80033a0 <RCCEx_PLLSAI1_Config+0x1ac>
        {
          status = HAL_TIMEOUT;
 800339a:	2303      	movs	r3, #3
 800339c:	73fb      	strb	r3, [r7, #15]
          break;
 800339e:	e005      	b.n	80033ac <RCCEx_PLLSAI1_Config+0x1b8>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 80033a0:	4b0a      	ldr	r3, [pc, #40]	; (80033cc <RCCEx_PLLSAI1_Config+0x1d8>)
 80033a2:	681b      	ldr	r3, [r3, #0]
 80033a4:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80033a8:	2b00      	cmp	r3, #0
 80033aa:	d0ef      	beq.n	800338c <RCCEx_PLLSAI1_Config+0x198>
        }
      }

      if(status == HAL_OK)
 80033ac:	7bfb      	ldrb	r3, [r7, #15]
 80033ae:	2b00      	cmp	r3, #0
 80033b0:	d106      	bne.n	80033c0 <RCCEx_PLLSAI1_Config+0x1cc>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 80033b2:	4b06      	ldr	r3, [pc, #24]	; (80033cc <RCCEx_PLLSAI1_Config+0x1d8>)
 80033b4:	691a      	ldr	r2, [r3, #16]
 80033b6:	687b      	ldr	r3, [r7, #4]
 80033b8:	699b      	ldr	r3, [r3, #24]
 80033ba:	4904      	ldr	r1, [pc, #16]	; (80033cc <RCCEx_PLLSAI1_Config+0x1d8>)
 80033bc:	4313      	orrs	r3, r2
 80033be:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 80033c0:	7bfb      	ldrb	r3, [r7, #15]
}
 80033c2:	4618      	mov	r0, r3
 80033c4:	3710      	adds	r7, #16
 80033c6:	46bd      	mov	sp, r7
 80033c8:	bd80      	pop	{r7, pc}
 80033ca:	bf00      	nop
 80033cc:	40021000 	.word	0x40021000
 80033d0:	07ff800f 	.word	0x07ff800f
 80033d4:	ff9f800f 	.word	0xff9f800f
 80033d8:	f9ff800f 	.word	0xf9ff800f

080033dc <RCCEx_PLLSAI2_Config>:
  * @note   PLLSAI2 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI2_Config(RCC_PLLSAI2InitTypeDef *PllSai2, uint32_t Divider)
{
 80033dc:	b580      	push	{r7, lr}
 80033de:	b084      	sub	sp, #16
 80033e0:	af00      	add	r7, sp, #0
 80033e2:	6078      	str	r0, [r7, #4]
 80033e4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 80033e6:	2300      	movs	r3, #0
 80033e8:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI2M_VALUE(PllSai2->PLLSAI2M));
  assert_param(IS_RCC_PLLSAI2N_VALUE(PllSai2->PLLSAI2N));
  assert_param(IS_RCC_PLLSAI2CLOCKOUT_VALUE(PllSai2->PLLSAI2ClockOut));

  /* Check that PLLSAI2 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 80033ea:	4b72      	ldr	r3, [pc, #456]	; (80035b4 <RCCEx_PLLSAI2_Config+0x1d8>)
 80033ec:	68db      	ldr	r3, [r3, #12]
 80033ee:	f003 0303 	and.w	r3, r3, #3
 80033f2:	2b00      	cmp	r3, #0
 80033f4:	d00e      	beq.n	8003414 <RCCEx_PLLSAI2_Config+0x38>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai2->PLLSAI2Source)
 80033f6:	4b6f      	ldr	r3, [pc, #444]	; (80035b4 <RCCEx_PLLSAI2_Config+0x1d8>)
 80033f8:	68db      	ldr	r3, [r3, #12]
 80033fa:	f003 0203 	and.w	r2, r3, #3
 80033fe:	687b      	ldr	r3, [r7, #4]
 8003400:	681b      	ldr	r3, [r3, #0]
 8003402:	429a      	cmp	r2, r3
 8003404:	d103      	bne.n	800340e <RCCEx_PLLSAI2_Config+0x32>
       ||
       (PllSai2->PLLSAI2Source == RCC_PLLSOURCE_NONE)
 8003406:	687b      	ldr	r3, [r7, #4]
 8003408:	681b      	ldr	r3, [r3, #0]
       ||
 800340a:	2b00      	cmp	r3, #0
 800340c:	d142      	bne.n	8003494 <RCCEx_PLLSAI2_Config+0xb8>
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai2->PLLSAI2M)
#endif
      )
    {
      status = HAL_ERROR;
 800340e:	2301      	movs	r3, #1
 8003410:	73fb      	strb	r3, [r7, #15]
 8003412:	e03f      	b.n	8003494 <RCCEx_PLLSAI2_Config+0xb8>
    }
  }
  else
  {
    /* Check PLLSAI2 clock source availability */
    switch(PllSai2->PLLSAI2Source)
 8003414:	687b      	ldr	r3, [r7, #4]
 8003416:	681b      	ldr	r3, [r3, #0]
 8003418:	2b03      	cmp	r3, #3
 800341a:	d018      	beq.n	800344e <RCCEx_PLLSAI2_Config+0x72>
 800341c:	2b03      	cmp	r3, #3
 800341e:	d825      	bhi.n	800346c <RCCEx_PLLSAI2_Config+0x90>
 8003420:	2b01      	cmp	r3, #1
 8003422:	d002      	beq.n	800342a <RCCEx_PLLSAI2_Config+0x4e>
 8003424:	2b02      	cmp	r3, #2
 8003426:	d009      	beq.n	800343c <RCCEx_PLLSAI2_Config+0x60>
 8003428:	e020      	b.n	800346c <RCCEx_PLLSAI2_Config+0x90>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 800342a:	4b62      	ldr	r3, [pc, #392]	; (80035b4 <RCCEx_PLLSAI2_Config+0x1d8>)
 800342c:	681b      	ldr	r3, [r3, #0]
 800342e:	f003 0302 	and.w	r3, r3, #2
 8003432:	2b00      	cmp	r3, #0
 8003434:	d11d      	bne.n	8003472 <RCCEx_PLLSAI2_Config+0x96>
      {
        status = HAL_ERROR;
 8003436:	2301      	movs	r3, #1
 8003438:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800343a:	e01a      	b.n	8003472 <RCCEx_PLLSAI2_Config+0x96>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 800343c:	4b5d      	ldr	r3, [pc, #372]	; (80035b4 <RCCEx_PLLSAI2_Config+0x1d8>)
 800343e:	681b      	ldr	r3, [r3, #0]
 8003440:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003444:	2b00      	cmp	r3, #0
 8003446:	d116      	bne.n	8003476 <RCCEx_PLLSAI2_Config+0x9a>
      {
        status = HAL_ERROR;
 8003448:	2301      	movs	r3, #1
 800344a:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800344c:	e013      	b.n	8003476 <RCCEx_PLLSAI2_Config+0x9a>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 800344e:	4b59      	ldr	r3, [pc, #356]	; (80035b4 <RCCEx_PLLSAI2_Config+0x1d8>)
 8003450:	681b      	ldr	r3, [r3, #0]
 8003452:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003456:	2b00      	cmp	r3, #0
 8003458:	d10f      	bne.n	800347a <RCCEx_PLLSAI2_Config+0x9e>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 800345a:	4b56      	ldr	r3, [pc, #344]	; (80035b4 <RCCEx_PLLSAI2_Config+0x1d8>)
 800345c:	681b      	ldr	r3, [r3, #0]
 800345e:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003462:	2b00      	cmp	r3, #0
 8003464:	d109      	bne.n	800347a <RCCEx_PLLSAI2_Config+0x9e>
        {
          status = HAL_ERROR;
 8003466:	2301      	movs	r3, #1
 8003468:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 800346a:	e006      	b.n	800347a <RCCEx_PLLSAI2_Config+0x9e>
    default:
      status = HAL_ERROR;
 800346c:	2301      	movs	r3, #1
 800346e:	73fb      	strb	r3, [r7, #15]
      break;
 8003470:	e004      	b.n	800347c <RCCEx_PLLSAI2_Config+0xa0>
      break;
 8003472:	bf00      	nop
 8003474:	e002      	b.n	800347c <RCCEx_PLLSAI2_Config+0xa0>
      break;
 8003476:	bf00      	nop
 8003478:	e000      	b.n	800347c <RCCEx_PLLSAI2_Config+0xa0>
      break;
 800347a:	bf00      	nop
    }

    if(status == HAL_OK)
 800347c:	7bfb      	ldrb	r3, [r7, #15]
 800347e:	2b00      	cmp	r3, #0
 8003480:	d108      	bne.n	8003494 <RCCEx_PLLSAI2_Config+0xb8>
    {
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
      /* Set PLLSAI2 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai2->PLLSAI2Source);
 8003482:	4b4c      	ldr	r3, [pc, #304]	; (80035b4 <RCCEx_PLLSAI2_Config+0x1d8>)
 8003484:	68db      	ldr	r3, [r3, #12]
 8003486:	f023 0203 	bic.w	r2, r3, #3
 800348a:	687b      	ldr	r3, [r7, #4]
 800348c:	681b      	ldr	r3, [r3, #0]
 800348e:	4949      	ldr	r1, [pc, #292]	; (80035b4 <RCCEx_PLLSAI2_Config+0x1d8>)
 8003490:	4313      	orrs	r3, r2
 8003492:	60cb      	str	r3, [r1, #12]
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai2->PLLSAI2Source | (PllSai2->PLLSAI2M - 1U) << RCC_PLLCFGR_PLLM_Pos);
#endif
    }
  }

  if(status == HAL_OK)
 8003494:	7bfb      	ldrb	r3, [r7, #15]
 8003496:	2b00      	cmp	r3, #0
 8003498:	f040 8086 	bne.w	80035a8 <RCCEx_PLLSAI2_Config+0x1cc>
  {
    /* Disable the PLLSAI2 */
    __HAL_RCC_PLLSAI2_DISABLE();
 800349c:	4b45      	ldr	r3, [pc, #276]	; (80035b4 <RCCEx_PLLSAI2_Config+0x1d8>)
 800349e:	681b      	ldr	r3, [r3, #0]
 80034a0:	4a44      	ldr	r2, [pc, #272]	; (80035b4 <RCCEx_PLLSAI2_Config+0x1d8>)
 80034a2:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80034a6:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80034a8:	f7fd f874 	bl	8000594 <HAL_GetTick>
 80034ac:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI2 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 80034ae:	e009      	b.n	80034c4 <RCCEx_PLLSAI2_Config+0xe8>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 80034b0:	f7fd f870 	bl	8000594 <HAL_GetTick>
 80034b4:	4602      	mov	r2, r0
 80034b6:	68bb      	ldr	r3, [r7, #8]
 80034b8:	1ad3      	subs	r3, r2, r3
 80034ba:	2b02      	cmp	r3, #2
 80034bc:	d902      	bls.n	80034c4 <RCCEx_PLLSAI2_Config+0xe8>
      {
        status = HAL_TIMEOUT;
 80034be:	2303      	movs	r3, #3
 80034c0:	73fb      	strb	r3, [r7, #15]
        break;
 80034c2:	e005      	b.n	80034d0 <RCCEx_PLLSAI2_Config+0xf4>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 80034c4:	4b3b      	ldr	r3, [pc, #236]	; (80035b4 <RCCEx_PLLSAI2_Config+0x1d8>)
 80034c6:	681b      	ldr	r3, [r3, #0]
 80034c8:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80034cc:	2b00      	cmp	r3, #0
 80034ce:	d1ef      	bne.n	80034b0 <RCCEx_PLLSAI2_Config+0xd4>
      }
    }

    if(status == HAL_OK)
 80034d0:	7bfb      	ldrb	r3, [r7, #15]
 80034d2:	2b00      	cmp	r3, #0
 80034d4:	d168      	bne.n	80035a8 <RCCEx_PLLSAI2_Config+0x1cc>
    {
      if(Divider == DIVIDER_P_UPDATE)
 80034d6:	683b      	ldr	r3, [r7, #0]
 80034d8:	2b00      	cmp	r3, #0
 80034da:	d113      	bne.n	8003504 <RCCEx_PLLSAI2_Config+0x128>
        assert_param(IS_RCC_PLLSAI2P_VALUE(PllSai2->PLLSAI2P));
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)

        /* Configure the PLLSAI2 Division factor M, P and Multiplication factor N*/
#if defined(RCC_PLLSAI2P_DIV_2_31_SUPPORT)
        MODIFY_REG(RCC->PLLSAI2CFGR,
 80034dc:	4b35      	ldr	r3, [pc, #212]	; (80035b4 <RCCEx_PLLSAI2_Config+0x1d8>)
 80034de:	695a      	ldr	r2, [r3, #20]
 80034e0:	4b35      	ldr	r3, [pc, #212]	; (80035b8 <RCCEx_PLLSAI2_Config+0x1dc>)
 80034e2:	4013      	ands	r3, r2
 80034e4:	687a      	ldr	r2, [r7, #4]
 80034e6:	6892      	ldr	r2, [r2, #8]
 80034e8:	0211      	lsls	r1, r2, #8
 80034ea:	687a      	ldr	r2, [r7, #4]
 80034ec:	68d2      	ldr	r2, [r2, #12]
 80034ee:	06d2      	lsls	r2, r2, #27
 80034f0:	4311      	orrs	r1, r2
 80034f2:	687a      	ldr	r2, [r7, #4]
 80034f4:	6852      	ldr	r2, [r2, #4]
 80034f6:	3a01      	subs	r2, #1
 80034f8:	0112      	lsls	r2, r2, #4
 80034fa:	430a      	orrs	r2, r1
 80034fc:	492d      	ldr	r1, [pc, #180]	; (80035b4 <RCCEx_PLLSAI2_Config+0x1d8>)
 80034fe:	4313      	orrs	r3, r2
 8003500:	614b      	str	r3, [r1, #20]
 8003502:	e02d      	b.n	8003560 <RCCEx_PLLSAI2_Config+0x184>
#endif /* RCC_PLLSAI2P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }
#if defined(RCC_PLLSAI2Q_DIV_SUPPORT)
      else if(Divider == DIVIDER_Q_UPDATE)
 8003504:	683b      	ldr	r3, [r7, #0]
 8003506:	2b01      	cmp	r3, #1
 8003508:	d115      	bne.n	8003536 <RCCEx_PLLSAI2_Config+0x15a>
      {
        assert_param(IS_RCC_PLLSAI2Q_VALUE(PllSai2->PLLSAI2Q));
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
        /* Configure the PLLSAI2 Division factor M, Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 800350a:	4b2a      	ldr	r3, [pc, #168]	; (80035b4 <RCCEx_PLLSAI2_Config+0x1d8>)
 800350c:	695a      	ldr	r2, [r3, #20]
 800350e:	4b2b      	ldr	r3, [pc, #172]	; (80035bc <RCCEx_PLLSAI2_Config+0x1e0>)
 8003510:	4013      	ands	r3, r2
 8003512:	687a      	ldr	r2, [r7, #4]
 8003514:	6892      	ldr	r2, [r2, #8]
 8003516:	0211      	lsls	r1, r2, #8
 8003518:	687a      	ldr	r2, [r7, #4]
 800351a:	6912      	ldr	r2, [r2, #16]
 800351c:	0852      	lsrs	r2, r2, #1
 800351e:	3a01      	subs	r2, #1
 8003520:	0552      	lsls	r2, r2, #21
 8003522:	4311      	orrs	r1, r2
 8003524:	687a      	ldr	r2, [r7, #4]
 8003526:	6852      	ldr	r2, [r2, #4]
 8003528:	3a01      	subs	r2, #1
 800352a:	0112      	lsls	r2, r2, #4
 800352c:	430a      	orrs	r2, r1
 800352e:	4921      	ldr	r1, [pc, #132]	; (80035b4 <RCCEx_PLLSAI2_Config+0x1d8>)
 8003530:	4313      	orrs	r3, r2
 8003532:	614b      	str	r3, [r1, #20]
 8003534:	e014      	b.n	8003560 <RCCEx_PLLSAI2_Config+0x184>
      else
      {
        assert_param(IS_RCC_PLLSAI2R_VALUE(PllSai2->PLLSAI2R));
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
        /* Configure the PLLSAI2 Division factor M, R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8003536:	4b1f      	ldr	r3, [pc, #124]	; (80035b4 <RCCEx_PLLSAI2_Config+0x1d8>)
 8003538:	695a      	ldr	r2, [r3, #20]
 800353a:	4b21      	ldr	r3, [pc, #132]	; (80035c0 <RCCEx_PLLSAI2_Config+0x1e4>)
 800353c:	4013      	ands	r3, r2
 800353e:	687a      	ldr	r2, [r7, #4]
 8003540:	6892      	ldr	r2, [r2, #8]
 8003542:	0211      	lsls	r1, r2, #8
 8003544:	687a      	ldr	r2, [r7, #4]
 8003546:	6952      	ldr	r2, [r2, #20]
 8003548:	0852      	lsrs	r2, r2, #1
 800354a:	3a01      	subs	r2, #1
 800354c:	0652      	lsls	r2, r2, #25
 800354e:	4311      	orrs	r1, r2
 8003550:	687a      	ldr	r2, [r7, #4]
 8003552:	6852      	ldr	r2, [r2, #4]
 8003554:	3a01      	subs	r2, #1
 8003556:	0112      	lsls	r2, r2, #4
 8003558:	430a      	orrs	r2, r1
 800355a:	4916      	ldr	r1, [pc, #88]	; (80035b4 <RCCEx_PLLSAI2_Config+0x1d8>)
 800355c:	4313      	orrs	r3, r2
 800355e:	614b      	str	r3, [r1, #20]
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos));
#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI2 again by setting PLLSAI2ON to 1*/
      __HAL_RCC_PLLSAI2_ENABLE();
 8003560:	4b14      	ldr	r3, [pc, #80]	; (80035b4 <RCCEx_PLLSAI2_Config+0x1d8>)
 8003562:	681b      	ldr	r3, [r3, #0]
 8003564:	4a13      	ldr	r2, [pc, #76]	; (80035b4 <RCCEx_PLLSAI2_Config+0x1d8>)
 8003566:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800356a:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800356c:	f7fd f812 	bl	8000594 <HAL_GetTick>
 8003570:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI2 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8003572:	e009      	b.n	8003588 <RCCEx_PLLSAI2_Config+0x1ac>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8003574:	f7fd f80e 	bl	8000594 <HAL_GetTick>
 8003578:	4602      	mov	r2, r0
 800357a:	68bb      	ldr	r3, [r7, #8]
 800357c:	1ad3      	subs	r3, r2, r3
 800357e:	2b02      	cmp	r3, #2
 8003580:	d902      	bls.n	8003588 <RCCEx_PLLSAI2_Config+0x1ac>
        {
          status = HAL_TIMEOUT;
 8003582:	2303      	movs	r3, #3
 8003584:	73fb      	strb	r3, [r7, #15]
          break;
 8003586:	e005      	b.n	8003594 <RCCEx_PLLSAI2_Config+0x1b8>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8003588:	4b0a      	ldr	r3, [pc, #40]	; (80035b4 <RCCEx_PLLSAI2_Config+0x1d8>)
 800358a:	681b      	ldr	r3, [r3, #0]
 800358c:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8003590:	2b00      	cmp	r3, #0
 8003592:	d0ef      	beq.n	8003574 <RCCEx_PLLSAI2_Config+0x198>
        }
      }

      if(status == HAL_OK)
 8003594:	7bfb      	ldrb	r3, [r7, #15]
 8003596:	2b00      	cmp	r3, #0
 8003598:	d106      	bne.n	80035a8 <RCCEx_PLLSAI2_Config+0x1cc>
      {
        /* Configure the PLLSAI2 Clock output(s) */
        __HAL_RCC_PLLSAI2CLKOUT_ENABLE(PllSai2->PLLSAI2ClockOut);
 800359a:	4b06      	ldr	r3, [pc, #24]	; (80035b4 <RCCEx_PLLSAI2_Config+0x1d8>)
 800359c:	695a      	ldr	r2, [r3, #20]
 800359e:	687b      	ldr	r3, [r7, #4]
 80035a0:	699b      	ldr	r3, [r3, #24]
 80035a2:	4904      	ldr	r1, [pc, #16]	; (80035b4 <RCCEx_PLLSAI2_Config+0x1d8>)
 80035a4:	4313      	orrs	r3, r2
 80035a6:	614b      	str	r3, [r1, #20]
      }
    }
  }

  return status;
 80035a8:	7bfb      	ldrb	r3, [r7, #15]
}
 80035aa:	4618      	mov	r0, r3
 80035ac:	3710      	adds	r7, #16
 80035ae:	46bd      	mov	sp, r7
 80035b0:	bd80      	pop	{r7, pc}
 80035b2:	bf00      	nop
 80035b4:	40021000 	.word	0x40021000
 80035b8:	07ff800f 	.word	0x07ff800f
 80035bc:	ff9f800f 	.word	0xff9f800f
 80035c0:	f9ff800f 	.word	0xf9ff800f

080035c4 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80035c4:	b580      	push	{r7, lr}
 80035c6:	b082      	sub	sp, #8
 80035c8:	af00      	add	r7, sp, #0
 80035ca:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80035cc:	687b      	ldr	r3, [r7, #4]
 80035ce:	2b00      	cmp	r3, #0
 80035d0:	d101      	bne.n	80035d6 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80035d2:	2301      	movs	r3, #1
 80035d4:	e049      	b.n	800366a <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80035d6:	687b      	ldr	r3, [r7, #4]
 80035d8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80035dc:	b2db      	uxtb	r3, r3
 80035de:	2b00      	cmp	r3, #0
 80035e0:	d106      	bne.n	80035f0 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80035e2:	687b      	ldr	r3, [r7, #4]
 80035e4:	2200      	movs	r2, #0
 80035e6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80035ea:	6878      	ldr	r0, [r7, #4]
 80035ec:	f000 f841 	bl	8003672 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80035f0:	687b      	ldr	r3, [r7, #4]
 80035f2:	2202      	movs	r2, #2
 80035f4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80035f8:	687b      	ldr	r3, [r7, #4]
 80035fa:	681a      	ldr	r2, [r3, #0]
 80035fc:	687b      	ldr	r3, [r7, #4]
 80035fe:	3304      	adds	r3, #4
 8003600:	4619      	mov	r1, r3
 8003602:	4610      	mov	r0, r2
 8003604:	f000 f9f8 	bl	80039f8 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003608:	687b      	ldr	r3, [r7, #4]
 800360a:	2201      	movs	r2, #1
 800360c:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003610:	687b      	ldr	r3, [r7, #4]
 8003612:	2201      	movs	r2, #1
 8003614:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8003618:	687b      	ldr	r3, [r7, #4]
 800361a:	2201      	movs	r2, #1
 800361c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8003620:	687b      	ldr	r3, [r7, #4]
 8003622:	2201      	movs	r2, #1
 8003624:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8003628:	687b      	ldr	r3, [r7, #4]
 800362a:	2201      	movs	r2, #1
 800362c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8003630:	687b      	ldr	r3, [r7, #4]
 8003632:	2201      	movs	r2, #1
 8003634:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8003638:	687b      	ldr	r3, [r7, #4]
 800363a:	2201      	movs	r2, #1
 800363c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003640:	687b      	ldr	r3, [r7, #4]
 8003642:	2201      	movs	r2, #1
 8003644:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8003648:	687b      	ldr	r3, [r7, #4]
 800364a:	2201      	movs	r2, #1
 800364c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8003650:	687b      	ldr	r3, [r7, #4]
 8003652:	2201      	movs	r2, #1
 8003654:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8003658:	687b      	ldr	r3, [r7, #4]
 800365a:	2201      	movs	r2, #1
 800365c:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003660:	687b      	ldr	r3, [r7, #4]
 8003662:	2201      	movs	r2, #1
 8003664:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8003668:	2300      	movs	r3, #0
}
 800366a:	4618      	mov	r0, r3
 800366c:	3708      	adds	r7, #8
 800366e:	46bd      	mov	sp, r7
 8003670:	bd80      	pop	{r7, pc}

08003672 <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 8003672:	b480      	push	{r7}
 8003674:	b083      	sub	sp, #12
 8003676:	af00      	add	r7, sp, #0
 8003678:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 800367a:	bf00      	nop
 800367c:	370c      	adds	r7, #12
 800367e:	46bd      	mov	sp, r7
 8003680:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003684:	4770      	bx	lr
	...

08003688 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8003688:	b480      	push	{r7}
 800368a:	b085      	sub	sp, #20
 800368c:	af00      	add	r7, sp, #0
 800368e:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8003690:	687b      	ldr	r3, [r7, #4]
 8003692:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003696:	b2db      	uxtb	r3, r3
 8003698:	2b01      	cmp	r3, #1
 800369a:	d001      	beq.n	80036a0 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 800369c:	2301      	movs	r3, #1
 800369e:	e04f      	b.n	8003740 <HAL_TIM_Base_Start_IT+0xb8>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80036a0:	687b      	ldr	r3, [r7, #4]
 80036a2:	2202      	movs	r2, #2
 80036a4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80036a8:	687b      	ldr	r3, [r7, #4]
 80036aa:	681b      	ldr	r3, [r3, #0]
 80036ac:	68da      	ldr	r2, [r3, #12]
 80036ae:	687b      	ldr	r3, [r7, #4]
 80036b0:	681b      	ldr	r3, [r3, #0]
 80036b2:	f042 0201 	orr.w	r2, r2, #1
 80036b6:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80036b8:	687b      	ldr	r3, [r7, #4]
 80036ba:	681b      	ldr	r3, [r3, #0]
 80036bc:	4a23      	ldr	r2, [pc, #140]	; (800374c <HAL_TIM_Base_Start_IT+0xc4>)
 80036be:	4293      	cmp	r3, r2
 80036c0:	d01d      	beq.n	80036fe <HAL_TIM_Base_Start_IT+0x76>
 80036c2:	687b      	ldr	r3, [r7, #4]
 80036c4:	681b      	ldr	r3, [r3, #0]
 80036c6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80036ca:	d018      	beq.n	80036fe <HAL_TIM_Base_Start_IT+0x76>
 80036cc:	687b      	ldr	r3, [r7, #4]
 80036ce:	681b      	ldr	r3, [r3, #0]
 80036d0:	4a1f      	ldr	r2, [pc, #124]	; (8003750 <HAL_TIM_Base_Start_IT+0xc8>)
 80036d2:	4293      	cmp	r3, r2
 80036d4:	d013      	beq.n	80036fe <HAL_TIM_Base_Start_IT+0x76>
 80036d6:	687b      	ldr	r3, [r7, #4]
 80036d8:	681b      	ldr	r3, [r3, #0]
 80036da:	4a1e      	ldr	r2, [pc, #120]	; (8003754 <HAL_TIM_Base_Start_IT+0xcc>)
 80036dc:	4293      	cmp	r3, r2
 80036de:	d00e      	beq.n	80036fe <HAL_TIM_Base_Start_IT+0x76>
 80036e0:	687b      	ldr	r3, [r7, #4]
 80036e2:	681b      	ldr	r3, [r3, #0]
 80036e4:	4a1c      	ldr	r2, [pc, #112]	; (8003758 <HAL_TIM_Base_Start_IT+0xd0>)
 80036e6:	4293      	cmp	r3, r2
 80036e8:	d009      	beq.n	80036fe <HAL_TIM_Base_Start_IT+0x76>
 80036ea:	687b      	ldr	r3, [r7, #4]
 80036ec:	681b      	ldr	r3, [r3, #0]
 80036ee:	4a1b      	ldr	r2, [pc, #108]	; (800375c <HAL_TIM_Base_Start_IT+0xd4>)
 80036f0:	4293      	cmp	r3, r2
 80036f2:	d004      	beq.n	80036fe <HAL_TIM_Base_Start_IT+0x76>
 80036f4:	687b      	ldr	r3, [r7, #4]
 80036f6:	681b      	ldr	r3, [r3, #0]
 80036f8:	4a19      	ldr	r2, [pc, #100]	; (8003760 <HAL_TIM_Base_Start_IT+0xd8>)
 80036fa:	4293      	cmp	r3, r2
 80036fc:	d115      	bne.n	800372a <HAL_TIM_Base_Start_IT+0xa2>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80036fe:	687b      	ldr	r3, [r7, #4]
 8003700:	681b      	ldr	r3, [r3, #0]
 8003702:	689a      	ldr	r2, [r3, #8]
 8003704:	4b17      	ldr	r3, [pc, #92]	; (8003764 <HAL_TIM_Base_Start_IT+0xdc>)
 8003706:	4013      	ands	r3, r2
 8003708:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800370a:	68fb      	ldr	r3, [r7, #12]
 800370c:	2b06      	cmp	r3, #6
 800370e:	d015      	beq.n	800373c <HAL_TIM_Base_Start_IT+0xb4>
 8003710:	68fb      	ldr	r3, [r7, #12]
 8003712:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003716:	d011      	beq.n	800373c <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 8003718:	687b      	ldr	r3, [r7, #4]
 800371a:	681b      	ldr	r3, [r3, #0]
 800371c:	681a      	ldr	r2, [r3, #0]
 800371e:	687b      	ldr	r3, [r7, #4]
 8003720:	681b      	ldr	r3, [r3, #0]
 8003722:	f042 0201 	orr.w	r2, r2, #1
 8003726:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003728:	e008      	b.n	800373c <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800372a:	687b      	ldr	r3, [r7, #4]
 800372c:	681b      	ldr	r3, [r3, #0]
 800372e:	681a      	ldr	r2, [r3, #0]
 8003730:	687b      	ldr	r3, [r7, #4]
 8003732:	681b      	ldr	r3, [r3, #0]
 8003734:	f042 0201 	orr.w	r2, r2, #1
 8003738:	601a      	str	r2, [r3, #0]
 800373a:	e000      	b.n	800373e <HAL_TIM_Base_Start_IT+0xb6>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800373c:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 800373e:	2300      	movs	r3, #0
}
 8003740:	4618      	mov	r0, r3
 8003742:	3714      	adds	r7, #20
 8003744:	46bd      	mov	sp, r7
 8003746:	f85d 7b04 	ldr.w	r7, [sp], #4
 800374a:	4770      	bx	lr
 800374c:	40012c00 	.word	0x40012c00
 8003750:	40000400 	.word	0x40000400
 8003754:	40000800 	.word	0x40000800
 8003758:	40000c00 	.word	0x40000c00
 800375c:	40013400 	.word	0x40013400
 8003760:	40014000 	.word	0x40014000
 8003764:	00010007 	.word	0x00010007

08003768 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8003768:	b580      	push	{r7, lr}
 800376a:	b082      	sub	sp, #8
 800376c:	af00      	add	r7, sp, #0
 800376e:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8003770:	687b      	ldr	r3, [r7, #4]
 8003772:	681b      	ldr	r3, [r3, #0]
 8003774:	691b      	ldr	r3, [r3, #16]
 8003776:	f003 0302 	and.w	r3, r3, #2
 800377a:	2b02      	cmp	r3, #2
 800377c:	d122      	bne.n	80037c4 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 800377e:	687b      	ldr	r3, [r7, #4]
 8003780:	681b      	ldr	r3, [r3, #0]
 8003782:	68db      	ldr	r3, [r3, #12]
 8003784:	f003 0302 	and.w	r3, r3, #2
 8003788:	2b02      	cmp	r3, #2
 800378a:	d11b      	bne.n	80037c4 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 800378c:	687b      	ldr	r3, [r7, #4]
 800378e:	681b      	ldr	r3, [r3, #0]
 8003790:	f06f 0202 	mvn.w	r2, #2
 8003794:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8003796:	687b      	ldr	r3, [r7, #4]
 8003798:	2201      	movs	r2, #1
 800379a:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800379c:	687b      	ldr	r3, [r7, #4]
 800379e:	681b      	ldr	r3, [r3, #0]
 80037a0:	699b      	ldr	r3, [r3, #24]
 80037a2:	f003 0303 	and.w	r3, r3, #3
 80037a6:	2b00      	cmp	r3, #0
 80037a8:	d003      	beq.n	80037b2 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80037aa:	6878      	ldr	r0, [r7, #4]
 80037ac:	f000 f905 	bl	80039ba <HAL_TIM_IC_CaptureCallback>
 80037b0:	e005      	b.n	80037be <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80037b2:	6878      	ldr	r0, [r7, #4]
 80037b4:	f000 f8f7 	bl	80039a6 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80037b8:	6878      	ldr	r0, [r7, #4]
 80037ba:	f000 f908 	bl	80039ce <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80037be:	687b      	ldr	r3, [r7, #4]
 80037c0:	2200      	movs	r2, #0
 80037c2:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 80037c4:	687b      	ldr	r3, [r7, #4]
 80037c6:	681b      	ldr	r3, [r3, #0]
 80037c8:	691b      	ldr	r3, [r3, #16]
 80037ca:	f003 0304 	and.w	r3, r3, #4
 80037ce:	2b04      	cmp	r3, #4
 80037d0:	d122      	bne.n	8003818 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 80037d2:	687b      	ldr	r3, [r7, #4]
 80037d4:	681b      	ldr	r3, [r3, #0]
 80037d6:	68db      	ldr	r3, [r3, #12]
 80037d8:	f003 0304 	and.w	r3, r3, #4
 80037dc:	2b04      	cmp	r3, #4
 80037de:	d11b      	bne.n	8003818 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 80037e0:	687b      	ldr	r3, [r7, #4]
 80037e2:	681b      	ldr	r3, [r3, #0]
 80037e4:	f06f 0204 	mvn.w	r2, #4
 80037e8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80037ea:	687b      	ldr	r3, [r7, #4]
 80037ec:	2202      	movs	r2, #2
 80037ee:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80037f0:	687b      	ldr	r3, [r7, #4]
 80037f2:	681b      	ldr	r3, [r3, #0]
 80037f4:	699b      	ldr	r3, [r3, #24]
 80037f6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80037fa:	2b00      	cmp	r3, #0
 80037fc:	d003      	beq.n	8003806 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80037fe:	6878      	ldr	r0, [r7, #4]
 8003800:	f000 f8db 	bl	80039ba <HAL_TIM_IC_CaptureCallback>
 8003804:	e005      	b.n	8003812 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003806:	6878      	ldr	r0, [r7, #4]
 8003808:	f000 f8cd 	bl	80039a6 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800380c:	6878      	ldr	r0, [r7, #4]
 800380e:	f000 f8de 	bl	80039ce <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003812:	687b      	ldr	r3, [r7, #4]
 8003814:	2200      	movs	r2, #0
 8003816:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8003818:	687b      	ldr	r3, [r7, #4]
 800381a:	681b      	ldr	r3, [r3, #0]
 800381c:	691b      	ldr	r3, [r3, #16]
 800381e:	f003 0308 	and.w	r3, r3, #8
 8003822:	2b08      	cmp	r3, #8
 8003824:	d122      	bne.n	800386c <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8003826:	687b      	ldr	r3, [r7, #4]
 8003828:	681b      	ldr	r3, [r3, #0]
 800382a:	68db      	ldr	r3, [r3, #12]
 800382c:	f003 0308 	and.w	r3, r3, #8
 8003830:	2b08      	cmp	r3, #8
 8003832:	d11b      	bne.n	800386c <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8003834:	687b      	ldr	r3, [r7, #4]
 8003836:	681b      	ldr	r3, [r3, #0]
 8003838:	f06f 0208 	mvn.w	r2, #8
 800383c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800383e:	687b      	ldr	r3, [r7, #4]
 8003840:	2204      	movs	r2, #4
 8003842:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8003844:	687b      	ldr	r3, [r7, #4]
 8003846:	681b      	ldr	r3, [r3, #0]
 8003848:	69db      	ldr	r3, [r3, #28]
 800384a:	f003 0303 	and.w	r3, r3, #3
 800384e:	2b00      	cmp	r3, #0
 8003850:	d003      	beq.n	800385a <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003852:	6878      	ldr	r0, [r7, #4]
 8003854:	f000 f8b1 	bl	80039ba <HAL_TIM_IC_CaptureCallback>
 8003858:	e005      	b.n	8003866 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800385a:	6878      	ldr	r0, [r7, #4]
 800385c:	f000 f8a3 	bl	80039a6 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003860:	6878      	ldr	r0, [r7, #4]
 8003862:	f000 f8b4 	bl	80039ce <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003866:	687b      	ldr	r3, [r7, #4]
 8003868:	2200      	movs	r2, #0
 800386a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 800386c:	687b      	ldr	r3, [r7, #4]
 800386e:	681b      	ldr	r3, [r3, #0]
 8003870:	691b      	ldr	r3, [r3, #16]
 8003872:	f003 0310 	and.w	r3, r3, #16
 8003876:	2b10      	cmp	r3, #16
 8003878:	d122      	bne.n	80038c0 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 800387a:	687b      	ldr	r3, [r7, #4]
 800387c:	681b      	ldr	r3, [r3, #0]
 800387e:	68db      	ldr	r3, [r3, #12]
 8003880:	f003 0310 	and.w	r3, r3, #16
 8003884:	2b10      	cmp	r3, #16
 8003886:	d11b      	bne.n	80038c0 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8003888:	687b      	ldr	r3, [r7, #4]
 800388a:	681b      	ldr	r3, [r3, #0]
 800388c:	f06f 0210 	mvn.w	r2, #16
 8003890:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8003892:	687b      	ldr	r3, [r7, #4]
 8003894:	2208      	movs	r2, #8
 8003896:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8003898:	687b      	ldr	r3, [r7, #4]
 800389a:	681b      	ldr	r3, [r3, #0]
 800389c:	69db      	ldr	r3, [r3, #28]
 800389e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80038a2:	2b00      	cmp	r3, #0
 80038a4:	d003      	beq.n	80038ae <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80038a6:	6878      	ldr	r0, [r7, #4]
 80038a8:	f000 f887 	bl	80039ba <HAL_TIM_IC_CaptureCallback>
 80038ac:	e005      	b.n	80038ba <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80038ae:	6878      	ldr	r0, [r7, #4]
 80038b0:	f000 f879 	bl	80039a6 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80038b4:	6878      	ldr	r0, [r7, #4]
 80038b6:	f000 f88a 	bl	80039ce <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80038ba:	687b      	ldr	r3, [r7, #4]
 80038bc:	2200      	movs	r2, #0
 80038be:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 80038c0:	687b      	ldr	r3, [r7, #4]
 80038c2:	681b      	ldr	r3, [r3, #0]
 80038c4:	691b      	ldr	r3, [r3, #16]
 80038c6:	f003 0301 	and.w	r3, r3, #1
 80038ca:	2b01      	cmp	r3, #1
 80038cc:	d10e      	bne.n	80038ec <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 80038ce:	687b      	ldr	r3, [r7, #4]
 80038d0:	681b      	ldr	r3, [r3, #0]
 80038d2:	68db      	ldr	r3, [r3, #12]
 80038d4:	f003 0301 	and.w	r3, r3, #1
 80038d8:	2b01      	cmp	r3, #1
 80038da:	d107      	bne.n	80038ec <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 80038dc:	687b      	ldr	r3, [r7, #4]
 80038de:	681b      	ldr	r3, [r3, #0]
 80038e0:	f06f 0201 	mvn.w	r2, #1
 80038e4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80038e6:	6878      	ldr	r0, [r7, #4]
 80038e8:	f7fc fd1a 	bl	8000320 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 80038ec:	687b      	ldr	r3, [r7, #4]
 80038ee:	681b      	ldr	r3, [r3, #0]
 80038f0:	691b      	ldr	r3, [r3, #16]
 80038f2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80038f6:	2b80      	cmp	r3, #128	; 0x80
 80038f8:	d10e      	bne.n	8003918 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80038fa:	687b      	ldr	r3, [r7, #4]
 80038fc:	681b      	ldr	r3, [r3, #0]
 80038fe:	68db      	ldr	r3, [r3, #12]
 8003900:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003904:	2b80      	cmp	r3, #128	; 0x80
 8003906:	d107      	bne.n	8003918 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8003908:	687b      	ldr	r3, [r7, #4]
 800390a:	681b      	ldr	r3, [r3, #0]
 800390c:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8003910:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8003912:	6878      	ldr	r0, [r7, #4]
 8003914:	f000 f914 	bl	8003b40 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 8003918:	687b      	ldr	r3, [r7, #4]
 800391a:	681b      	ldr	r3, [r3, #0]
 800391c:	691b      	ldr	r3, [r3, #16]
 800391e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003922:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003926:	d10e      	bne.n	8003946 <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8003928:	687b      	ldr	r3, [r7, #4]
 800392a:	681b      	ldr	r3, [r3, #0]
 800392c:	68db      	ldr	r3, [r3, #12]
 800392e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003932:	2b80      	cmp	r3, #128	; 0x80
 8003934:	d107      	bne.n	8003946 <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8003936:	687b      	ldr	r3, [r7, #4]
 8003938:	681b      	ldr	r3, [r3, #0]
 800393a:	f46f 7280 	mvn.w	r2, #256	; 0x100
 800393e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8003940:	6878      	ldr	r0, [r7, #4]
 8003942:	f000 f907 	bl	8003b54 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8003946:	687b      	ldr	r3, [r7, #4]
 8003948:	681b      	ldr	r3, [r3, #0]
 800394a:	691b      	ldr	r3, [r3, #16]
 800394c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003950:	2b40      	cmp	r3, #64	; 0x40
 8003952:	d10e      	bne.n	8003972 <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8003954:	687b      	ldr	r3, [r7, #4]
 8003956:	681b      	ldr	r3, [r3, #0]
 8003958:	68db      	ldr	r3, [r3, #12]
 800395a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800395e:	2b40      	cmp	r3, #64	; 0x40
 8003960:	d107      	bne.n	8003972 <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8003962:	687b      	ldr	r3, [r7, #4]
 8003964:	681b      	ldr	r3, [r3, #0]
 8003966:	f06f 0240 	mvn.w	r2, #64	; 0x40
 800396a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800396c:	6878      	ldr	r0, [r7, #4]
 800396e:	f000 f838 	bl	80039e2 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8003972:	687b      	ldr	r3, [r7, #4]
 8003974:	681b      	ldr	r3, [r3, #0]
 8003976:	691b      	ldr	r3, [r3, #16]
 8003978:	f003 0320 	and.w	r3, r3, #32
 800397c:	2b20      	cmp	r3, #32
 800397e:	d10e      	bne.n	800399e <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8003980:	687b      	ldr	r3, [r7, #4]
 8003982:	681b      	ldr	r3, [r3, #0]
 8003984:	68db      	ldr	r3, [r3, #12]
 8003986:	f003 0320 	and.w	r3, r3, #32
 800398a:	2b20      	cmp	r3, #32
 800398c:	d107      	bne.n	800399e <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 800398e:	687b      	ldr	r3, [r7, #4]
 8003990:	681b      	ldr	r3, [r3, #0]
 8003992:	f06f 0220 	mvn.w	r2, #32
 8003996:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8003998:	6878      	ldr	r0, [r7, #4]
 800399a:	f000 f8c7 	bl	8003b2c <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800399e:	bf00      	nop
 80039a0:	3708      	adds	r7, #8
 80039a2:	46bd      	mov	sp, r7
 80039a4:	bd80      	pop	{r7, pc}

080039a6 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80039a6:	b480      	push	{r7}
 80039a8:	b083      	sub	sp, #12
 80039aa:	af00      	add	r7, sp, #0
 80039ac:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80039ae:	bf00      	nop
 80039b0:	370c      	adds	r7, #12
 80039b2:	46bd      	mov	sp, r7
 80039b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039b8:	4770      	bx	lr

080039ba <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80039ba:	b480      	push	{r7}
 80039bc:	b083      	sub	sp, #12
 80039be:	af00      	add	r7, sp, #0
 80039c0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80039c2:	bf00      	nop
 80039c4:	370c      	adds	r7, #12
 80039c6:	46bd      	mov	sp, r7
 80039c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039cc:	4770      	bx	lr

080039ce <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80039ce:	b480      	push	{r7}
 80039d0:	b083      	sub	sp, #12
 80039d2:	af00      	add	r7, sp, #0
 80039d4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80039d6:	bf00      	nop
 80039d8:	370c      	adds	r7, #12
 80039da:	46bd      	mov	sp, r7
 80039dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039e0:	4770      	bx	lr

080039e2 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80039e2:	b480      	push	{r7}
 80039e4:	b083      	sub	sp, #12
 80039e6:	af00      	add	r7, sp, #0
 80039e8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80039ea:	bf00      	nop
 80039ec:	370c      	adds	r7, #12
 80039ee:	46bd      	mov	sp, r7
 80039f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039f4:	4770      	bx	lr
	...

080039f8 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 80039f8:	b480      	push	{r7}
 80039fa:	b085      	sub	sp, #20
 80039fc:	af00      	add	r7, sp, #0
 80039fe:	6078      	str	r0, [r7, #4]
 8003a00:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8003a02:	687b      	ldr	r3, [r7, #4]
 8003a04:	681b      	ldr	r3, [r3, #0]
 8003a06:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8003a08:	687b      	ldr	r3, [r7, #4]
 8003a0a:	4a40      	ldr	r2, [pc, #256]	; (8003b0c <TIM_Base_SetConfig+0x114>)
 8003a0c:	4293      	cmp	r3, r2
 8003a0e:	d013      	beq.n	8003a38 <TIM_Base_SetConfig+0x40>
 8003a10:	687b      	ldr	r3, [r7, #4]
 8003a12:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003a16:	d00f      	beq.n	8003a38 <TIM_Base_SetConfig+0x40>
 8003a18:	687b      	ldr	r3, [r7, #4]
 8003a1a:	4a3d      	ldr	r2, [pc, #244]	; (8003b10 <TIM_Base_SetConfig+0x118>)
 8003a1c:	4293      	cmp	r3, r2
 8003a1e:	d00b      	beq.n	8003a38 <TIM_Base_SetConfig+0x40>
 8003a20:	687b      	ldr	r3, [r7, #4]
 8003a22:	4a3c      	ldr	r2, [pc, #240]	; (8003b14 <TIM_Base_SetConfig+0x11c>)
 8003a24:	4293      	cmp	r3, r2
 8003a26:	d007      	beq.n	8003a38 <TIM_Base_SetConfig+0x40>
 8003a28:	687b      	ldr	r3, [r7, #4]
 8003a2a:	4a3b      	ldr	r2, [pc, #236]	; (8003b18 <TIM_Base_SetConfig+0x120>)
 8003a2c:	4293      	cmp	r3, r2
 8003a2e:	d003      	beq.n	8003a38 <TIM_Base_SetConfig+0x40>
 8003a30:	687b      	ldr	r3, [r7, #4]
 8003a32:	4a3a      	ldr	r2, [pc, #232]	; (8003b1c <TIM_Base_SetConfig+0x124>)
 8003a34:	4293      	cmp	r3, r2
 8003a36:	d108      	bne.n	8003a4a <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8003a38:	68fb      	ldr	r3, [r7, #12]
 8003a3a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003a3e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8003a40:	683b      	ldr	r3, [r7, #0]
 8003a42:	685b      	ldr	r3, [r3, #4]
 8003a44:	68fa      	ldr	r2, [r7, #12]
 8003a46:	4313      	orrs	r3, r2
 8003a48:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8003a4a:	687b      	ldr	r3, [r7, #4]
 8003a4c:	4a2f      	ldr	r2, [pc, #188]	; (8003b0c <TIM_Base_SetConfig+0x114>)
 8003a4e:	4293      	cmp	r3, r2
 8003a50:	d01f      	beq.n	8003a92 <TIM_Base_SetConfig+0x9a>
 8003a52:	687b      	ldr	r3, [r7, #4]
 8003a54:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003a58:	d01b      	beq.n	8003a92 <TIM_Base_SetConfig+0x9a>
 8003a5a:	687b      	ldr	r3, [r7, #4]
 8003a5c:	4a2c      	ldr	r2, [pc, #176]	; (8003b10 <TIM_Base_SetConfig+0x118>)
 8003a5e:	4293      	cmp	r3, r2
 8003a60:	d017      	beq.n	8003a92 <TIM_Base_SetConfig+0x9a>
 8003a62:	687b      	ldr	r3, [r7, #4]
 8003a64:	4a2b      	ldr	r2, [pc, #172]	; (8003b14 <TIM_Base_SetConfig+0x11c>)
 8003a66:	4293      	cmp	r3, r2
 8003a68:	d013      	beq.n	8003a92 <TIM_Base_SetConfig+0x9a>
 8003a6a:	687b      	ldr	r3, [r7, #4]
 8003a6c:	4a2a      	ldr	r2, [pc, #168]	; (8003b18 <TIM_Base_SetConfig+0x120>)
 8003a6e:	4293      	cmp	r3, r2
 8003a70:	d00f      	beq.n	8003a92 <TIM_Base_SetConfig+0x9a>
 8003a72:	687b      	ldr	r3, [r7, #4]
 8003a74:	4a29      	ldr	r2, [pc, #164]	; (8003b1c <TIM_Base_SetConfig+0x124>)
 8003a76:	4293      	cmp	r3, r2
 8003a78:	d00b      	beq.n	8003a92 <TIM_Base_SetConfig+0x9a>
 8003a7a:	687b      	ldr	r3, [r7, #4]
 8003a7c:	4a28      	ldr	r2, [pc, #160]	; (8003b20 <TIM_Base_SetConfig+0x128>)
 8003a7e:	4293      	cmp	r3, r2
 8003a80:	d007      	beq.n	8003a92 <TIM_Base_SetConfig+0x9a>
 8003a82:	687b      	ldr	r3, [r7, #4]
 8003a84:	4a27      	ldr	r2, [pc, #156]	; (8003b24 <TIM_Base_SetConfig+0x12c>)
 8003a86:	4293      	cmp	r3, r2
 8003a88:	d003      	beq.n	8003a92 <TIM_Base_SetConfig+0x9a>
 8003a8a:	687b      	ldr	r3, [r7, #4]
 8003a8c:	4a26      	ldr	r2, [pc, #152]	; (8003b28 <TIM_Base_SetConfig+0x130>)
 8003a8e:	4293      	cmp	r3, r2
 8003a90:	d108      	bne.n	8003aa4 <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8003a92:	68fb      	ldr	r3, [r7, #12]
 8003a94:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003a98:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8003a9a:	683b      	ldr	r3, [r7, #0]
 8003a9c:	68db      	ldr	r3, [r3, #12]
 8003a9e:	68fa      	ldr	r2, [r7, #12]
 8003aa0:	4313      	orrs	r3, r2
 8003aa2:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8003aa4:	68fb      	ldr	r3, [r7, #12]
 8003aa6:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8003aaa:	683b      	ldr	r3, [r7, #0]
 8003aac:	695b      	ldr	r3, [r3, #20]
 8003aae:	4313      	orrs	r3, r2
 8003ab0:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8003ab2:	687b      	ldr	r3, [r7, #4]
 8003ab4:	68fa      	ldr	r2, [r7, #12]
 8003ab6:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8003ab8:	683b      	ldr	r3, [r7, #0]
 8003aba:	689a      	ldr	r2, [r3, #8]
 8003abc:	687b      	ldr	r3, [r7, #4]
 8003abe:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8003ac0:	683b      	ldr	r3, [r7, #0]
 8003ac2:	681a      	ldr	r2, [r3, #0]
 8003ac4:	687b      	ldr	r3, [r7, #4]
 8003ac6:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8003ac8:	687b      	ldr	r3, [r7, #4]
 8003aca:	4a10      	ldr	r2, [pc, #64]	; (8003b0c <TIM_Base_SetConfig+0x114>)
 8003acc:	4293      	cmp	r3, r2
 8003ace:	d00f      	beq.n	8003af0 <TIM_Base_SetConfig+0xf8>
 8003ad0:	687b      	ldr	r3, [r7, #4]
 8003ad2:	4a12      	ldr	r2, [pc, #72]	; (8003b1c <TIM_Base_SetConfig+0x124>)
 8003ad4:	4293      	cmp	r3, r2
 8003ad6:	d00b      	beq.n	8003af0 <TIM_Base_SetConfig+0xf8>
 8003ad8:	687b      	ldr	r3, [r7, #4]
 8003ada:	4a11      	ldr	r2, [pc, #68]	; (8003b20 <TIM_Base_SetConfig+0x128>)
 8003adc:	4293      	cmp	r3, r2
 8003ade:	d007      	beq.n	8003af0 <TIM_Base_SetConfig+0xf8>
 8003ae0:	687b      	ldr	r3, [r7, #4]
 8003ae2:	4a10      	ldr	r2, [pc, #64]	; (8003b24 <TIM_Base_SetConfig+0x12c>)
 8003ae4:	4293      	cmp	r3, r2
 8003ae6:	d003      	beq.n	8003af0 <TIM_Base_SetConfig+0xf8>
 8003ae8:	687b      	ldr	r3, [r7, #4]
 8003aea:	4a0f      	ldr	r2, [pc, #60]	; (8003b28 <TIM_Base_SetConfig+0x130>)
 8003aec:	4293      	cmp	r3, r2
 8003aee:	d103      	bne.n	8003af8 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8003af0:	683b      	ldr	r3, [r7, #0]
 8003af2:	691a      	ldr	r2, [r3, #16]
 8003af4:	687b      	ldr	r3, [r7, #4]
 8003af6:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8003af8:	687b      	ldr	r3, [r7, #4]
 8003afa:	2201      	movs	r2, #1
 8003afc:	615a      	str	r2, [r3, #20]
}
 8003afe:	bf00      	nop
 8003b00:	3714      	adds	r7, #20
 8003b02:	46bd      	mov	sp, r7
 8003b04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b08:	4770      	bx	lr
 8003b0a:	bf00      	nop
 8003b0c:	40012c00 	.word	0x40012c00
 8003b10:	40000400 	.word	0x40000400
 8003b14:	40000800 	.word	0x40000800
 8003b18:	40000c00 	.word	0x40000c00
 8003b1c:	40013400 	.word	0x40013400
 8003b20:	40014000 	.word	0x40014000
 8003b24:	40014400 	.word	0x40014400
 8003b28:	40014800 	.word	0x40014800

08003b2c <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8003b2c:	b480      	push	{r7}
 8003b2e:	b083      	sub	sp, #12
 8003b30:	af00      	add	r7, sp, #0
 8003b32:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8003b34:	bf00      	nop
 8003b36:	370c      	adds	r7, #12
 8003b38:	46bd      	mov	sp, r7
 8003b3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b3e:	4770      	bx	lr

08003b40 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8003b40:	b480      	push	{r7}
 8003b42:	b083      	sub	sp, #12
 8003b44:	af00      	add	r7, sp, #0
 8003b46:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8003b48:	bf00      	nop
 8003b4a:	370c      	adds	r7, #12
 8003b4c:	46bd      	mov	sp, r7
 8003b4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b52:	4770      	bx	lr

08003b54 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8003b54:	b480      	push	{r7}
 8003b56:	b083      	sub	sp, #12
 8003b58:	af00      	add	r7, sp, #0
 8003b5a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8003b5c:	bf00      	nop
 8003b5e:	370c      	adds	r7, #12
 8003b60:	46bd      	mov	sp, r7
 8003b62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b66:	4770      	bx	lr

08003b68 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8003b68:	b084      	sub	sp, #16
 8003b6a:	b580      	push	{r7, lr}
 8003b6c:	b084      	sub	sp, #16
 8003b6e:	af00      	add	r7, sp, #0
 8003b70:	6078      	str	r0, [r7, #4]
 8003b72:	f107 001c 	add.w	r0, r7, #28
 8003b76:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;

  /* Select FS Embedded PHY */
  USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 8003b7a:	687b      	ldr	r3, [r7, #4]
 8003b7c:	68db      	ldr	r3, [r3, #12]
 8003b7e:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8003b82:	687b      	ldr	r3, [r7, #4]
 8003b84:	60da      	str	r2, [r3, #12]

  /* Reset after a PHY select */
  ret = USB_CoreReset(USBx);
 8003b86:	6878      	ldr	r0, [r7, #4]
 8003b88:	f001 fa40 	bl	800500c <USB_CoreReset>
 8003b8c:	4603      	mov	r3, r0
 8003b8e:	73fb      	strb	r3, [r7, #15]

  if (cfg.battery_charging_enable == 0U)
 8003b90:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003b92:	2b00      	cmp	r3, #0
 8003b94:	d106      	bne.n	8003ba4 <USB_CoreInit+0x3c>
  {
    /* Activate the USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8003b96:	687b      	ldr	r3, [r7, #4]
 8003b98:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003b9a:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8003b9e:	687b      	ldr	r3, [r7, #4]
 8003ba0:	639a      	str	r2, [r3, #56]	; 0x38
 8003ba2:	e005      	b.n	8003bb0 <USB_CoreInit+0x48>
  }
  else
  {
    /* Deactivate the USB Transceiver */
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8003ba4:	687b      	ldr	r3, [r7, #4]
 8003ba6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003ba8:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8003bac:	687b      	ldr	r3, [r7, #4]
 8003bae:	639a      	str	r2, [r3, #56]	; 0x38
  }

  return ret;
 8003bb0:	7bfb      	ldrb	r3, [r7, #15]
}
 8003bb2:	4618      	mov	r0, r3
 8003bb4:	3710      	adds	r7, #16
 8003bb6:	46bd      	mov	sp, r7
 8003bb8:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8003bbc:	b004      	add	sp, #16
 8003bbe:	4770      	bx	lr

08003bc0 <USB_SetTurnaroundTime>:
  * @param  hclk: AHB clock frequency
  * @retval USB turnaround time In PHY Clocks number
  */
HAL_StatusTypeDef USB_SetTurnaroundTime(USB_OTG_GlobalTypeDef *USBx,
                                        uint32_t hclk, uint8_t speed)
{
 8003bc0:	b480      	push	{r7}
 8003bc2:	b087      	sub	sp, #28
 8003bc4:	af00      	add	r7, sp, #0
 8003bc6:	60f8      	str	r0, [r7, #12]
 8003bc8:	60b9      	str	r1, [r7, #8]
 8003bca:	4613      	mov	r3, r2
 8003bcc:	71fb      	strb	r3, [r7, #7]

  /* The USBTRD is configured according to the tables below, depending on AHB frequency
  used by application. In the low AHB frequency range it is used to stretch enough the USB response
  time to IN tokens, the USB turnaround time, so to compensate for the longer AHB read access
  latency to the Data FIFO */
  if (speed == USBD_FS_SPEED)
 8003bce:	79fb      	ldrb	r3, [r7, #7]
 8003bd0:	2b02      	cmp	r3, #2
 8003bd2:	d165      	bne.n	8003ca0 <USB_SetTurnaroundTime+0xe0>
  {
    if ((hclk >= 14200000U) && (hclk < 15000000U))
 8003bd4:	68bb      	ldr	r3, [r7, #8]
 8003bd6:	4a3e      	ldr	r2, [pc, #248]	; (8003cd0 <USB_SetTurnaroundTime+0x110>)
 8003bd8:	4293      	cmp	r3, r2
 8003bda:	d906      	bls.n	8003bea <USB_SetTurnaroundTime+0x2a>
 8003bdc:	68bb      	ldr	r3, [r7, #8]
 8003bde:	4a3d      	ldr	r2, [pc, #244]	; (8003cd4 <USB_SetTurnaroundTime+0x114>)
 8003be0:	4293      	cmp	r3, r2
 8003be2:	d202      	bcs.n	8003bea <USB_SetTurnaroundTime+0x2a>
    {
      /* hclk Clock Range between 14.2-15 MHz */
      UsbTrd = 0xFU;
 8003be4:	230f      	movs	r3, #15
 8003be6:	617b      	str	r3, [r7, #20]
 8003be8:	e05c      	b.n	8003ca4 <USB_SetTurnaroundTime+0xe4>
    }
    else if ((hclk >= 15000000U) && (hclk < 16000000U))
 8003bea:	68bb      	ldr	r3, [r7, #8]
 8003bec:	4a39      	ldr	r2, [pc, #228]	; (8003cd4 <USB_SetTurnaroundTime+0x114>)
 8003bee:	4293      	cmp	r3, r2
 8003bf0:	d306      	bcc.n	8003c00 <USB_SetTurnaroundTime+0x40>
 8003bf2:	68bb      	ldr	r3, [r7, #8]
 8003bf4:	4a38      	ldr	r2, [pc, #224]	; (8003cd8 <USB_SetTurnaroundTime+0x118>)
 8003bf6:	4293      	cmp	r3, r2
 8003bf8:	d202      	bcs.n	8003c00 <USB_SetTurnaroundTime+0x40>
    {
      /* hclk Clock Range between 15-16 MHz */
      UsbTrd = 0xEU;
 8003bfa:	230e      	movs	r3, #14
 8003bfc:	617b      	str	r3, [r7, #20]
 8003bfe:	e051      	b.n	8003ca4 <USB_SetTurnaroundTime+0xe4>
    }
    else if ((hclk >= 16000000U) && (hclk < 17200000U))
 8003c00:	68bb      	ldr	r3, [r7, #8]
 8003c02:	4a35      	ldr	r2, [pc, #212]	; (8003cd8 <USB_SetTurnaroundTime+0x118>)
 8003c04:	4293      	cmp	r3, r2
 8003c06:	d306      	bcc.n	8003c16 <USB_SetTurnaroundTime+0x56>
 8003c08:	68bb      	ldr	r3, [r7, #8]
 8003c0a:	4a34      	ldr	r2, [pc, #208]	; (8003cdc <USB_SetTurnaroundTime+0x11c>)
 8003c0c:	4293      	cmp	r3, r2
 8003c0e:	d202      	bcs.n	8003c16 <USB_SetTurnaroundTime+0x56>
    {
      /* hclk Clock Range between 16-17.2 MHz */
      UsbTrd = 0xDU;
 8003c10:	230d      	movs	r3, #13
 8003c12:	617b      	str	r3, [r7, #20]
 8003c14:	e046      	b.n	8003ca4 <USB_SetTurnaroundTime+0xe4>
    }
    else if ((hclk >= 17200000U) && (hclk < 18500000U))
 8003c16:	68bb      	ldr	r3, [r7, #8]
 8003c18:	4a30      	ldr	r2, [pc, #192]	; (8003cdc <USB_SetTurnaroundTime+0x11c>)
 8003c1a:	4293      	cmp	r3, r2
 8003c1c:	d306      	bcc.n	8003c2c <USB_SetTurnaroundTime+0x6c>
 8003c1e:	68bb      	ldr	r3, [r7, #8]
 8003c20:	4a2f      	ldr	r2, [pc, #188]	; (8003ce0 <USB_SetTurnaroundTime+0x120>)
 8003c22:	4293      	cmp	r3, r2
 8003c24:	d802      	bhi.n	8003c2c <USB_SetTurnaroundTime+0x6c>
    {
      /* hclk Clock Range between 17.2-18.5 MHz */
      UsbTrd = 0xCU;
 8003c26:	230c      	movs	r3, #12
 8003c28:	617b      	str	r3, [r7, #20]
 8003c2a:	e03b      	b.n	8003ca4 <USB_SetTurnaroundTime+0xe4>
    }
    else if ((hclk >= 18500000U) && (hclk < 20000000U))
 8003c2c:	68bb      	ldr	r3, [r7, #8]
 8003c2e:	4a2c      	ldr	r2, [pc, #176]	; (8003ce0 <USB_SetTurnaroundTime+0x120>)
 8003c30:	4293      	cmp	r3, r2
 8003c32:	d906      	bls.n	8003c42 <USB_SetTurnaroundTime+0x82>
 8003c34:	68bb      	ldr	r3, [r7, #8]
 8003c36:	4a2b      	ldr	r2, [pc, #172]	; (8003ce4 <USB_SetTurnaroundTime+0x124>)
 8003c38:	4293      	cmp	r3, r2
 8003c3a:	d802      	bhi.n	8003c42 <USB_SetTurnaroundTime+0x82>
    {
      /* hclk Clock Range between 18.5-20 MHz */
      UsbTrd = 0xBU;
 8003c3c:	230b      	movs	r3, #11
 8003c3e:	617b      	str	r3, [r7, #20]
 8003c40:	e030      	b.n	8003ca4 <USB_SetTurnaroundTime+0xe4>
    }
    else if ((hclk >= 20000000U) && (hclk < 21800000U))
 8003c42:	68bb      	ldr	r3, [r7, #8]
 8003c44:	4a27      	ldr	r2, [pc, #156]	; (8003ce4 <USB_SetTurnaroundTime+0x124>)
 8003c46:	4293      	cmp	r3, r2
 8003c48:	d906      	bls.n	8003c58 <USB_SetTurnaroundTime+0x98>
 8003c4a:	68bb      	ldr	r3, [r7, #8]
 8003c4c:	4a26      	ldr	r2, [pc, #152]	; (8003ce8 <USB_SetTurnaroundTime+0x128>)
 8003c4e:	4293      	cmp	r3, r2
 8003c50:	d802      	bhi.n	8003c58 <USB_SetTurnaroundTime+0x98>
    {
      /* hclk Clock Range between 20-21.8 MHz */
      UsbTrd = 0xAU;
 8003c52:	230a      	movs	r3, #10
 8003c54:	617b      	str	r3, [r7, #20]
 8003c56:	e025      	b.n	8003ca4 <USB_SetTurnaroundTime+0xe4>
    }
    else if ((hclk >= 21800000U) && (hclk < 24000000U))
 8003c58:	68bb      	ldr	r3, [r7, #8]
 8003c5a:	4a23      	ldr	r2, [pc, #140]	; (8003ce8 <USB_SetTurnaroundTime+0x128>)
 8003c5c:	4293      	cmp	r3, r2
 8003c5e:	d906      	bls.n	8003c6e <USB_SetTurnaroundTime+0xae>
 8003c60:	68bb      	ldr	r3, [r7, #8]
 8003c62:	4a22      	ldr	r2, [pc, #136]	; (8003cec <USB_SetTurnaroundTime+0x12c>)
 8003c64:	4293      	cmp	r3, r2
 8003c66:	d202      	bcs.n	8003c6e <USB_SetTurnaroundTime+0xae>
    {
      /* hclk Clock Range between 21.8-24 MHz */
      UsbTrd = 0x9U;
 8003c68:	2309      	movs	r3, #9
 8003c6a:	617b      	str	r3, [r7, #20]
 8003c6c:	e01a      	b.n	8003ca4 <USB_SetTurnaroundTime+0xe4>
    }
    else if ((hclk >= 24000000U) && (hclk < 27700000U))
 8003c6e:	68bb      	ldr	r3, [r7, #8]
 8003c70:	4a1e      	ldr	r2, [pc, #120]	; (8003cec <USB_SetTurnaroundTime+0x12c>)
 8003c72:	4293      	cmp	r3, r2
 8003c74:	d306      	bcc.n	8003c84 <USB_SetTurnaroundTime+0xc4>
 8003c76:	68bb      	ldr	r3, [r7, #8]
 8003c78:	4a1d      	ldr	r2, [pc, #116]	; (8003cf0 <USB_SetTurnaroundTime+0x130>)
 8003c7a:	4293      	cmp	r3, r2
 8003c7c:	d802      	bhi.n	8003c84 <USB_SetTurnaroundTime+0xc4>
    {
      /* hclk Clock Range between 24-27.7 MHz */
      UsbTrd = 0x8U;
 8003c7e:	2308      	movs	r3, #8
 8003c80:	617b      	str	r3, [r7, #20]
 8003c82:	e00f      	b.n	8003ca4 <USB_SetTurnaroundTime+0xe4>
    }
    else if ((hclk >= 27700000U) && (hclk < 32000000U))
 8003c84:	68bb      	ldr	r3, [r7, #8]
 8003c86:	4a1a      	ldr	r2, [pc, #104]	; (8003cf0 <USB_SetTurnaroundTime+0x130>)
 8003c88:	4293      	cmp	r3, r2
 8003c8a:	d906      	bls.n	8003c9a <USB_SetTurnaroundTime+0xda>
 8003c8c:	68bb      	ldr	r3, [r7, #8]
 8003c8e:	4a19      	ldr	r2, [pc, #100]	; (8003cf4 <USB_SetTurnaroundTime+0x134>)
 8003c90:	4293      	cmp	r3, r2
 8003c92:	d202      	bcs.n	8003c9a <USB_SetTurnaroundTime+0xda>
    {
      /* hclk Clock Range between 27.7-32 MHz */
      UsbTrd = 0x7U;
 8003c94:	2307      	movs	r3, #7
 8003c96:	617b      	str	r3, [r7, #20]
 8003c98:	e004      	b.n	8003ca4 <USB_SetTurnaroundTime+0xe4>
    }
    else /* if(hclk >= 32000000) */
    {
      /* hclk Clock Range between 32-200 MHz */
      UsbTrd = 0x6U;
 8003c9a:	2306      	movs	r3, #6
 8003c9c:	617b      	str	r3, [r7, #20]
 8003c9e:	e001      	b.n	8003ca4 <USB_SetTurnaroundTime+0xe4>
    }
  }
  else
  {
    UsbTrd = USBD_DEFAULT_TRDT_VALUE;
 8003ca0:	2309      	movs	r3, #9
 8003ca2:	617b      	str	r3, [r7, #20]
  }

  USBx->GUSBCFG &= ~USB_OTG_GUSBCFG_TRDT;
 8003ca4:	68fb      	ldr	r3, [r7, #12]
 8003ca6:	68db      	ldr	r3, [r3, #12]
 8003ca8:	f423 5270 	bic.w	r2, r3, #15360	; 0x3c00
 8003cac:	68fb      	ldr	r3, [r7, #12]
 8003cae:	60da      	str	r2, [r3, #12]
  USBx->GUSBCFG |= (uint32_t)((UsbTrd << 10) & USB_OTG_GUSBCFG_TRDT);
 8003cb0:	68fb      	ldr	r3, [r7, #12]
 8003cb2:	68da      	ldr	r2, [r3, #12]
 8003cb4:	697b      	ldr	r3, [r7, #20]
 8003cb6:	029b      	lsls	r3, r3, #10
 8003cb8:	f403 5370 	and.w	r3, r3, #15360	; 0x3c00
 8003cbc:	431a      	orrs	r2, r3
 8003cbe:	68fb      	ldr	r3, [r7, #12]
 8003cc0:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 8003cc2:	2300      	movs	r3, #0
}
 8003cc4:	4618      	mov	r0, r3
 8003cc6:	371c      	adds	r7, #28
 8003cc8:	46bd      	mov	sp, r7
 8003cca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cce:	4770      	bx	lr
 8003cd0:	00d8acbf 	.word	0x00d8acbf
 8003cd4:	00e4e1c0 	.word	0x00e4e1c0
 8003cd8:	00f42400 	.word	0x00f42400
 8003cdc:	01067380 	.word	0x01067380
 8003ce0:	011a499f 	.word	0x011a499f
 8003ce4:	01312cff 	.word	0x01312cff
 8003ce8:	014ca43f 	.word	0x014ca43f
 8003cec:	016e3600 	.word	0x016e3600
 8003cf0:	01a6ab1f 	.word	0x01a6ab1f
 8003cf4:	01e84800 	.word	0x01e84800

08003cf8 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8003cf8:	b480      	push	{r7}
 8003cfa:	b083      	sub	sp, #12
 8003cfc:	af00      	add	r7, sp, #0
 8003cfe:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 8003d00:	687b      	ldr	r3, [r7, #4]
 8003d02:	689b      	ldr	r3, [r3, #8]
 8003d04:	f043 0201 	orr.w	r2, r3, #1
 8003d08:	687b      	ldr	r3, [r7, #4]
 8003d0a:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8003d0c:	2300      	movs	r3, #0
}
 8003d0e:	4618      	mov	r0, r3
 8003d10:	370c      	adds	r7, #12
 8003d12:	46bd      	mov	sp, r7
 8003d14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d18:	4770      	bx	lr

08003d1a <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8003d1a:	b480      	push	{r7}
 8003d1c:	b083      	sub	sp, #12
 8003d1e:	af00      	add	r7, sp, #0
 8003d20:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 8003d22:	687b      	ldr	r3, [r7, #4]
 8003d24:	689b      	ldr	r3, [r3, #8]
 8003d26:	f023 0201 	bic.w	r2, r3, #1
 8003d2a:	687b      	ldr	r3, [r7, #4]
 8003d2c:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8003d2e:	2300      	movs	r3, #0
}
 8003d30:	4618      	mov	r0, r3
 8003d32:	370c      	adds	r7, #12
 8003d34:	46bd      	mov	sp, r7
 8003d36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d3a:	4770      	bx	lr

08003d3c <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_ModeTypeDef mode)
{
 8003d3c:	b580      	push	{r7, lr}
 8003d3e:	b084      	sub	sp, #16
 8003d40:	af00      	add	r7, sp, #0
 8003d42:	6078      	str	r0, [r7, #4]
 8003d44:	460b      	mov	r3, r1
 8003d46:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 8003d48:	2300      	movs	r3, #0
 8003d4a:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 8003d4c:	687b      	ldr	r3, [r7, #4]
 8003d4e:	68db      	ldr	r3, [r3, #12]
 8003d50:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 8003d54:	687b      	ldr	r3, [r7, #4]
 8003d56:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 8003d58:	78fb      	ldrb	r3, [r7, #3]
 8003d5a:	2b01      	cmp	r3, #1
 8003d5c:	d115      	bne.n	8003d8a <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 8003d5e:	687b      	ldr	r3, [r7, #4]
 8003d60:	68db      	ldr	r3, [r3, #12]
 8003d62:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 8003d66:	687b      	ldr	r3, [r7, #4]
 8003d68:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 8003d6a:	2001      	movs	r0, #1
 8003d6c:	f7fc fc1e 	bl	80005ac <HAL_Delay>
      ms++;
 8003d70:	68fb      	ldr	r3, [r7, #12]
 8003d72:	3301      	adds	r3, #1
 8003d74:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < 50U));
 8003d76:	6878      	ldr	r0, [r7, #4]
 8003d78:	f001 f8cf 	bl	8004f1a <USB_GetMode>
 8003d7c:	4603      	mov	r3, r0
 8003d7e:	2b01      	cmp	r3, #1
 8003d80:	d01e      	beq.n	8003dc0 <USB_SetCurrentMode+0x84>
 8003d82:	68fb      	ldr	r3, [r7, #12]
 8003d84:	2b31      	cmp	r3, #49	; 0x31
 8003d86:	d9f0      	bls.n	8003d6a <USB_SetCurrentMode+0x2e>
 8003d88:	e01a      	b.n	8003dc0 <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 8003d8a:	78fb      	ldrb	r3, [r7, #3]
 8003d8c:	2b00      	cmp	r3, #0
 8003d8e:	d115      	bne.n	8003dbc <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 8003d90:	687b      	ldr	r3, [r7, #4]
 8003d92:	68db      	ldr	r3, [r3, #12]
 8003d94:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 8003d98:	687b      	ldr	r3, [r7, #4]
 8003d9a:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 8003d9c:	2001      	movs	r0, #1
 8003d9e:	f7fc fc05 	bl	80005ac <HAL_Delay>
      ms++;
 8003da2:	68fb      	ldr	r3, [r7, #12]
 8003da4:	3301      	adds	r3, #1
 8003da6:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < 50U));
 8003da8:	6878      	ldr	r0, [r7, #4]
 8003daa:	f001 f8b6 	bl	8004f1a <USB_GetMode>
 8003dae:	4603      	mov	r3, r0
 8003db0:	2b00      	cmp	r3, #0
 8003db2:	d005      	beq.n	8003dc0 <USB_SetCurrentMode+0x84>
 8003db4:	68fb      	ldr	r3, [r7, #12]
 8003db6:	2b31      	cmp	r3, #49	; 0x31
 8003db8:	d9f0      	bls.n	8003d9c <USB_SetCurrentMode+0x60>
 8003dba:	e001      	b.n	8003dc0 <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 8003dbc:	2301      	movs	r3, #1
 8003dbe:	e005      	b.n	8003dcc <USB_SetCurrentMode+0x90>
  }

  if (ms == 50U)
 8003dc0:	68fb      	ldr	r3, [r7, #12]
 8003dc2:	2b32      	cmp	r3, #50	; 0x32
 8003dc4:	d101      	bne.n	8003dca <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 8003dc6:	2301      	movs	r3, #1
 8003dc8:	e000      	b.n	8003dcc <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 8003dca:	2300      	movs	r3, #0
}
 8003dcc:	4618      	mov	r0, r3
 8003dce:	3710      	adds	r7, #16
 8003dd0:	46bd      	mov	sp, r7
 8003dd2:	bd80      	pop	{r7, pc}

08003dd4 <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8003dd4:	b084      	sub	sp, #16
 8003dd6:	b580      	push	{r7, lr}
 8003dd8:	b086      	sub	sp, #24
 8003dda:	af00      	add	r7, sp, #0
 8003ddc:	6078      	str	r0, [r7, #4]
 8003dde:	f107 0024 	add.w	r0, r7, #36	; 0x24
 8003de2:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 8003de6:	2300      	movs	r3, #0
 8003de8:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003dea:	687b      	ldr	r3, [r7, #4]
 8003dec:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 8003dee:	2300      	movs	r3, #0
 8003df0:	613b      	str	r3, [r7, #16]
 8003df2:	e009      	b.n	8003e08 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 8003df4:	687a      	ldr	r2, [r7, #4]
 8003df6:	693b      	ldr	r3, [r7, #16]
 8003df8:	3340      	adds	r3, #64	; 0x40
 8003dfa:	009b      	lsls	r3, r3, #2
 8003dfc:	4413      	add	r3, r2
 8003dfe:	2200      	movs	r2, #0
 8003e00:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 8003e02:	693b      	ldr	r3, [r7, #16]
 8003e04:	3301      	adds	r3, #1
 8003e06:	613b      	str	r3, [r7, #16]
 8003e08:	693b      	ldr	r3, [r7, #16]
 8003e0a:	2b0e      	cmp	r3, #14
 8003e0c:	d9f2      	bls.n	8003df4 <USB_DevInit+0x20>
  }

  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 8003e0e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003e10:	2b00      	cmp	r3, #0
 8003e12:	d11c      	bne.n	8003e4e <USB_DevInit+0x7a>
  {
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8003e14:	68fb      	ldr	r3, [r7, #12]
 8003e16:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003e1a:	685b      	ldr	r3, [r3, #4]
 8003e1c:	68fa      	ldr	r2, [r7, #12]
 8003e1e:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8003e22:	f043 0302 	orr.w	r3, r3, #2
 8003e26:	6053      	str	r3, [r2, #4]

    /* Deactivate VBUS Sensing B */
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBDEN;
 8003e28:	687b      	ldr	r3, [r7, #4]
 8003e2a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003e2c:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 8003e30:	687b      	ldr	r3, [r7, #4]
 8003e32:	639a      	str	r2, [r3, #56]	; 0x38

    /* B-peripheral session valid override enable */
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOEN;
 8003e34:	687b      	ldr	r3, [r7, #4]
 8003e36:	681b      	ldr	r3, [r3, #0]
 8003e38:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8003e3c:	687b      	ldr	r3, [r7, #4]
 8003e3e:	601a      	str	r2, [r3, #0]
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOVAL;
 8003e40:	687b      	ldr	r3, [r7, #4]
 8003e42:	681b      	ldr	r3, [r3, #0]
 8003e44:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 8003e48:	687b      	ldr	r3, [r7, #4]
 8003e4a:	601a      	str	r2, [r3, #0]
 8003e4c:	e005      	b.n	8003e5a <USB_DevInit+0x86>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
 8003e4e:	687b      	ldr	r3, [r7, #4]
 8003e50:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003e52:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8003e56:	687b      	ldr	r3, [r7, #4]
 8003e58:	639a      	str	r2, [r3, #56]	; 0x38
  }

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 8003e5a:	68fb      	ldr	r3, [r7, #12]
 8003e5c:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8003e60:	461a      	mov	r2, r3
 8003e62:	2300      	movs	r3, #0
 8003e64:	6013      	str	r3, [r2, #0]

  /* Device mode configuration */
  USBx_DEVICE->DCFG |= DCFG_FRAME_INTERVAL_80;
 8003e66:	68fb      	ldr	r3, [r7, #12]
 8003e68:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003e6c:	4619      	mov	r1, r3
 8003e6e:	68fb      	ldr	r3, [r7, #12]
 8003e70:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003e74:	461a      	mov	r2, r3
 8003e76:	680b      	ldr	r3, [r1, #0]
 8003e78:	6013      	str	r3, [r2, #0]

  /* Set Core speed to Full speed mode */
  (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 8003e7a:	2103      	movs	r1, #3
 8003e7c:	6878      	ldr	r0, [r7, #4]
 8003e7e:	f000 f955 	bl	800412c <USB_SetDevSpeed>

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 8003e82:	2110      	movs	r1, #16
 8003e84:	6878      	ldr	r0, [r7, #4]
 8003e86:	f000 f8f1 	bl	800406c <USB_FlushTxFifo>
 8003e8a:	4603      	mov	r3, r0
 8003e8c:	2b00      	cmp	r3, #0
 8003e8e:	d001      	beq.n	8003e94 <USB_DevInit+0xc0>
  {
    ret = HAL_ERROR;
 8003e90:	2301      	movs	r3, #1
 8003e92:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 8003e94:	6878      	ldr	r0, [r7, #4]
 8003e96:	f000 f91b 	bl	80040d0 <USB_FlushRxFifo>
 8003e9a:	4603      	mov	r3, r0
 8003e9c:	2b00      	cmp	r3, #0
 8003e9e:	d001      	beq.n	8003ea4 <USB_DevInit+0xd0>
  {
    ret = HAL_ERROR;
 8003ea0:	2301      	movs	r3, #1
 8003ea2:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 8003ea4:	68fb      	ldr	r3, [r7, #12]
 8003ea6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003eaa:	461a      	mov	r2, r3
 8003eac:	2300      	movs	r3, #0
 8003eae:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 8003eb0:	68fb      	ldr	r3, [r7, #12]
 8003eb2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003eb6:	461a      	mov	r2, r3
 8003eb8:	2300      	movs	r3, #0
 8003eba:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 8003ebc:	68fb      	ldr	r3, [r7, #12]
 8003ebe:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003ec2:	461a      	mov	r2, r3
 8003ec4:	2300      	movs	r3, #0
 8003ec6:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8003ec8:	2300      	movs	r3, #0
 8003eca:	613b      	str	r3, [r7, #16]
 8003ecc:	e043      	b.n	8003f56 <USB_DevInit+0x182>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8003ece:	693b      	ldr	r3, [r7, #16]
 8003ed0:	015a      	lsls	r2, r3, #5
 8003ed2:	68fb      	ldr	r3, [r7, #12]
 8003ed4:	4413      	add	r3, r2
 8003ed6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003eda:	681b      	ldr	r3, [r3, #0]
 8003edc:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8003ee0:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8003ee4:	d118      	bne.n	8003f18 <USB_DevInit+0x144>
    {
      if (i == 0U)
 8003ee6:	693b      	ldr	r3, [r7, #16]
 8003ee8:	2b00      	cmp	r3, #0
 8003eea:	d10a      	bne.n	8003f02 <USB_DevInit+0x12e>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 8003eec:	693b      	ldr	r3, [r7, #16]
 8003eee:	015a      	lsls	r2, r3, #5
 8003ef0:	68fb      	ldr	r3, [r7, #12]
 8003ef2:	4413      	add	r3, r2
 8003ef4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003ef8:	461a      	mov	r2, r3
 8003efa:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8003efe:	6013      	str	r3, [r2, #0]
 8003f00:	e013      	b.n	8003f2a <USB_DevInit+0x156>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 8003f02:	693b      	ldr	r3, [r7, #16]
 8003f04:	015a      	lsls	r2, r3, #5
 8003f06:	68fb      	ldr	r3, [r7, #12]
 8003f08:	4413      	add	r3, r2
 8003f0a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003f0e:	461a      	mov	r2, r3
 8003f10:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8003f14:	6013      	str	r3, [r2, #0]
 8003f16:	e008      	b.n	8003f2a <USB_DevInit+0x156>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 8003f18:	693b      	ldr	r3, [r7, #16]
 8003f1a:	015a      	lsls	r2, r3, #5
 8003f1c:	68fb      	ldr	r3, [r7, #12]
 8003f1e:	4413      	add	r3, r2
 8003f20:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003f24:	461a      	mov	r2, r3
 8003f26:	2300      	movs	r3, #0
 8003f28:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 8003f2a:	693b      	ldr	r3, [r7, #16]
 8003f2c:	015a      	lsls	r2, r3, #5
 8003f2e:	68fb      	ldr	r3, [r7, #12]
 8003f30:	4413      	add	r3, r2
 8003f32:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003f36:	461a      	mov	r2, r3
 8003f38:	2300      	movs	r3, #0
 8003f3a:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 8003f3c:	693b      	ldr	r3, [r7, #16]
 8003f3e:	015a      	lsls	r2, r3, #5
 8003f40:	68fb      	ldr	r3, [r7, #12]
 8003f42:	4413      	add	r3, r2
 8003f44:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003f48:	461a      	mov	r2, r3
 8003f4a:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8003f4e:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8003f50:	693b      	ldr	r3, [r7, #16]
 8003f52:	3301      	adds	r3, #1
 8003f54:	613b      	str	r3, [r7, #16]
 8003f56:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003f58:	693a      	ldr	r2, [r7, #16]
 8003f5a:	429a      	cmp	r2, r3
 8003f5c:	d3b7      	bcc.n	8003ece <USB_DevInit+0xfa>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8003f5e:	2300      	movs	r3, #0
 8003f60:	613b      	str	r3, [r7, #16]
 8003f62:	e043      	b.n	8003fec <USB_DevInit+0x218>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8003f64:	693b      	ldr	r3, [r7, #16]
 8003f66:	015a      	lsls	r2, r3, #5
 8003f68:	68fb      	ldr	r3, [r7, #12]
 8003f6a:	4413      	add	r3, r2
 8003f6c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003f70:	681b      	ldr	r3, [r3, #0]
 8003f72:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8003f76:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8003f7a:	d118      	bne.n	8003fae <USB_DevInit+0x1da>
    {
      if (i == 0U)
 8003f7c:	693b      	ldr	r3, [r7, #16]
 8003f7e:	2b00      	cmp	r3, #0
 8003f80:	d10a      	bne.n	8003f98 <USB_DevInit+0x1c4>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 8003f82:	693b      	ldr	r3, [r7, #16]
 8003f84:	015a      	lsls	r2, r3, #5
 8003f86:	68fb      	ldr	r3, [r7, #12]
 8003f88:	4413      	add	r3, r2
 8003f8a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003f8e:	461a      	mov	r2, r3
 8003f90:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8003f94:	6013      	str	r3, [r2, #0]
 8003f96:	e013      	b.n	8003fc0 <USB_DevInit+0x1ec>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 8003f98:	693b      	ldr	r3, [r7, #16]
 8003f9a:	015a      	lsls	r2, r3, #5
 8003f9c:	68fb      	ldr	r3, [r7, #12]
 8003f9e:	4413      	add	r3, r2
 8003fa0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003fa4:	461a      	mov	r2, r3
 8003fa6:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8003faa:	6013      	str	r3, [r2, #0]
 8003fac:	e008      	b.n	8003fc0 <USB_DevInit+0x1ec>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 8003fae:	693b      	ldr	r3, [r7, #16]
 8003fb0:	015a      	lsls	r2, r3, #5
 8003fb2:	68fb      	ldr	r3, [r7, #12]
 8003fb4:	4413      	add	r3, r2
 8003fb6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003fba:	461a      	mov	r2, r3
 8003fbc:	2300      	movs	r3, #0
 8003fbe:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 8003fc0:	693b      	ldr	r3, [r7, #16]
 8003fc2:	015a      	lsls	r2, r3, #5
 8003fc4:	68fb      	ldr	r3, [r7, #12]
 8003fc6:	4413      	add	r3, r2
 8003fc8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003fcc:	461a      	mov	r2, r3
 8003fce:	2300      	movs	r3, #0
 8003fd0:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 8003fd2:	693b      	ldr	r3, [r7, #16]
 8003fd4:	015a      	lsls	r2, r3, #5
 8003fd6:	68fb      	ldr	r3, [r7, #12]
 8003fd8:	4413      	add	r3, r2
 8003fda:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003fde:	461a      	mov	r2, r3
 8003fe0:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8003fe4:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8003fe6:	693b      	ldr	r3, [r7, #16]
 8003fe8:	3301      	adds	r3, #1
 8003fea:	613b      	str	r3, [r7, #16]
 8003fec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003fee:	693a      	ldr	r2, [r7, #16]
 8003ff0:	429a      	cmp	r2, r3
 8003ff2:	d3b7      	bcc.n	8003f64 <USB_DevInit+0x190>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 8003ff4:	68fb      	ldr	r3, [r7, #12]
 8003ff6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003ffa:	691b      	ldr	r3, [r3, #16]
 8003ffc:	68fa      	ldr	r2, [r7, #12]
 8003ffe:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8004002:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8004006:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 8004008:	687b      	ldr	r3, [r7, #4]
 800400a:	2200      	movs	r2, #0
 800400c:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 800400e:	687b      	ldr	r3, [r7, #4]
 8004010:	f06f 4280 	mvn.w	r2, #1073741824	; 0x40000000
 8004014:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 8004016:	687b      	ldr	r3, [r7, #4]
 8004018:	699b      	ldr	r3, [r3, #24]
 800401a:	f043 0210 	orr.w	r2, r3, #16
 800401e:	687b      	ldr	r3, [r7, #4]
 8004020:	619a      	str	r2, [r3, #24]

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 8004022:	687b      	ldr	r3, [r7, #4]
 8004024:	699a      	ldr	r2, [r3, #24]
 8004026:	4b10      	ldr	r3, [pc, #64]	; (8004068 <USB_DevInit+0x294>)
 8004028:	4313      	orrs	r3, r2
 800402a:	687a      	ldr	r2, [r7, #4]
 800402c:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 800402e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004030:	2b00      	cmp	r3, #0
 8004032:	d005      	beq.n	8004040 <USB_DevInit+0x26c>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 8004034:	687b      	ldr	r3, [r7, #4]
 8004036:	699b      	ldr	r3, [r3, #24]
 8004038:	f043 0208 	orr.w	r2, r3, #8
 800403c:	687b      	ldr	r3, [r7, #4]
 800403e:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 8004040:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004042:	2b01      	cmp	r3, #1
 8004044:	d107      	bne.n	8004056 <USB_DevInit+0x282>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 8004046:	687b      	ldr	r3, [r7, #4]
 8004048:	699b      	ldr	r3, [r3, #24]
 800404a:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800404e:	f043 0304 	orr.w	r3, r3, #4
 8004052:	687a      	ldr	r2, [r7, #4]
 8004054:	6193      	str	r3, [r2, #24]
  }

  return ret;
 8004056:	7dfb      	ldrb	r3, [r7, #23]
}
 8004058:	4618      	mov	r0, r3
 800405a:	3718      	adds	r7, #24
 800405c:	46bd      	mov	sp, r7
 800405e:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8004062:	b004      	add	sp, #16
 8004064:	4770      	bx	lr
 8004066:	bf00      	nop
 8004068:	803c3800 	.word	0x803c3800

0800406c <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 800406c:	b480      	push	{r7}
 800406e:	b085      	sub	sp, #20
 8004070:	af00      	add	r7, sp, #0
 8004072:	6078      	str	r0, [r7, #4]
 8004074:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 8004076:	2300      	movs	r3, #0
 8004078:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    if (++count > 200000U)
 800407a:	68fb      	ldr	r3, [r7, #12]
 800407c:	3301      	adds	r3, #1
 800407e:	60fb      	str	r3, [r7, #12]
 8004080:	4a12      	ldr	r2, [pc, #72]	; (80040cc <USB_FlushTxFifo+0x60>)
 8004082:	4293      	cmp	r3, r2
 8004084:	d901      	bls.n	800408a <USB_FlushTxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 8004086:	2303      	movs	r3, #3
 8004088:	e01a      	b.n	80040c0 <USB_FlushTxFifo+0x54>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800408a:	687b      	ldr	r3, [r7, #4]
 800408c:	691b      	ldr	r3, [r3, #16]
 800408e:	2b00      	cmp	r3, #0
 8004090:	daf3      	bge.n	800407a <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 8004092:	2300      	movs	r3, #0
 8004094:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 8004096:	683b      	ldr	r3, [r7, #0]
 8004098:	019b      	lsls	r3, r3, #6
 800409a:	f043 0220 	orr.w	r2, r3, #32
 800409e:	687b      	ldr	r3, [r7, #4]
 80040a0:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 80040a2:	68fb      	ldr	r3, [r7, #12]
 80040a4:	3301      	adds	r3, #1
 80040a6:	60fb      	str	r3, [r7, #12]
 80040a8:	4a08      	ldr	r2, [pc, #32]	; (80040cc <USB_FlushTxFifo+0x60>)
 80040aa:	4293      	cmp	r3, r2
 80040ac:	d901      	bls.n	80040b2 <USB_FlushTxFifo+0x46>
    {
      return HAL_TIMEOUT;
 80040ae:	2303      	movs	r3, #3
 80040b0:	e006      	b.n	80040c0 <USB_FlushTxFifo+0x54>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 80040b2:	687b      	ldr	r3, [r7, #4]
 80040b4:	691b      	ldr	r3, [r3, #16]
 80040b6:	f003 0320 	and.w	r3, r3, #32
 80040ba:	2b20      	cmp	r3, #32
 80040bc:	d0f1      	beq.n	80040a2 <USB_FlushTxFifo+0x36>

  return HAL_OK;
 80040be:	2300      	movs	r3, #0
}
 80040c0:	4618      	mov	r0, r3
 80040c2:	3714      	adds	r7, #20
 80040c4:	46bd      	mov	sp, r7
 80040c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040ca:	4770      	bx	lr
 80040cc:	00030d40 	.word	0x00030d40

080040d0 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 80040d0:	b480      	push	{r7}
 80040d2:	b085      	sub	sp, #20
 80040d4:	af00      	add	r7, sp, #0
 80040d6:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 80040d8:	2300      	movs	r3, #0
 80040da:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    if (++count > 200000U)
 80040dc:	68fb      	ldr	r3, [r7, #12]
 80040de:	3301      	adds	r3, #1
 80040e0:	60fb      	str	r3, [r7, #12]
 80040e2:	4a11      	ldr	r2, [pc, #68]	; (8004128 <USB_FlushRxFifo+0x58>)
 80040e4:	4293      	cmp	r3, r2
 80040e6:	d901      	bls.n	80040ec <USB_FlushRxFifo+0x1c>
    {
      return HAL_TIMEOUT;
 80040e8:	2303      	movs	r3, #3
 80040ea:	e017      	b.n	800411c <USB_FlushRxFifo+0x4c>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 80040ec:	687b      	ldr	r3, [r7, #4]
 80040ee:	691b      	ldr	r3, [r3, #16]
 80040f0:	2b00      	cmp	r3, #0
 80040f2:	daf3      	bge.n	80040dc <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 80040f4:	2300      	movs	r3, #0
 80040f6:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 80040f8:	687b      	ldr	r3, [r7, #4]
 80040fa:	2210      	movs	r2, #16
 80040fc:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 80040fe:	68fb      	ldr	r3, [r7, #12]
 8004100:	3301      	adds	r3, #1
 8004102:	60fb      	str	r3, [r7, #12]
 8004104:	4a08      	ldr	r2, [pc, #32]	; (8004128 <USB_FlushRxFifo+0x58>)
 8004106:	4293      	cmp	r3, r2
 8004108:	d901      	bls.n	800410e <USB_FlushRxFifo+0x3e>
    {
      return HAL_TIMEOUT;
 800410a:	2303      	movs	r3, #3
 800410c:	e006      	b.n	800411c <USB_FlushRxFifo+0x4c>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 800410e:	687b      	ldr	r3, [r7, #4]
 8004110:	691b      	ldr	r3, [r3, #16]
 8004112:	f003 0310 	and.w	r3, r3, #16
 8004116:	2b10      	cmp	r3, #16
 8004118:	d0f1      	beq.n	80040fe <USB_FlushRxFifo+0x2e>

  return HAL_OK;
 800411a:	2300      	movs	r3, #0
}
 800411c:	4618      	mov	r0, r3
 800411e:	3714      	adds	r7, #20
 8004120:	46bd      	mov	sp, r7
 8004122:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004126:	4770      	bx	lr
 8004128:	00030d40 	.word	0x00030d40

0800412c <USB_SetDevSpeed>:
  *          This parameter can be one of these values:
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 800412c:	b480      	push	{r7}
 800412e:	b085      	sub	sp, #20
 8004130:	af00      	add	r7, sp, #0
 8004132:	6078      	str	r0, [r7, #4]
 8004134:	460b      	mov	r3, r1
 8004136:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004138:	687b      	ldr	r3, [r7, #4]
 800413a:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 800413c:	68fb      	ldr	r3, [r7, #12]
 800413e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004142:	681a      	ldr	r2, [r3, #0]
 8004144:	78fb      	ldrb	r3, [r7, #3]
 8004146:	68f9      	ldr	r1, [r7, #12]
 8004148:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800414c:	4313      	orrs	r3, r2
 800414e:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 8004150:	2300      	movs	r3, #0
}
 8004152:	4618      	mov	r0, r3
 8004154:	3714      	adds	r7, #20
 8004156:	46bd      	mov	sp, r7
 8004158:	f85d 7b04 	ldr.w	r7, [sp], #4
 800415c:	4770      	bx	lr

0800415e <USB_GetDevSpeed>:
  * @retval speed  device speed
  *          This parameter can be one of these values:
  *            @arg USBD_FS_SPEED: Full speed mode
  */
uint8_t USB_GetDevSpeed(USB_OTG_GlobalTypeDef *USBx)
{
 800415e:	b480      	push	{r7}
 8004160:	b087      	sub	sp, #28
 8004162:	af00      	add	r7, sp, #0
 8004164:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004166:	687b      	ldr	r3, [r7, #4]
 8004168:	613b      	str	r3, [r7, #16]
  uint8_t speed;
  uint32_t DevEnumSpeed = USBx_DEVICE->DSTS & USB_OTG_DSTS_ENUMSPD;
 800416a:	693b      	ldr	r3, [r7, #16]
 800416c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004170:	689b      	ldr	r3, [r3, #8]
 8004172:	f003 0306 	and.w	r3, r3, #6
 8004176:	60fb      	str	r3, [r7, #12]

  if ((DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_30MHZ_OR_60MHZ) ||
 8004178:	68fb      	ldr	r3, [r7, #12]
 800417a:	2b02      	cmp	r3, #2
 800417c:	d002      	beq.n	8004184 <USB_GetDevSpeed+0x26>
 800417e:	68fb      	ldr	r3, [r7, #12]
 8004180:	2b06      	cmp	r3, #6
 8004182:	d102      	bne.n	800418a <USB_GetDevSpeed+0x2c>
      (DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_48MHZ))
  {
    speed = USBD_FS_SPEED;
 8004184:	2302      	movs	r3, #2
 8004186:	75fb      	strb	r3, [r7, #23]
 8004188:	e001      	b.n	800418e <USB_GetDevSpeed+0x30>
  }
  else
  {
    speed = 0xFU;
 800418a:	230f      	movs	r3, #15
 800418c:	75fb      	strb	r3, [r7, #23]
  }

  return speed;
 800418e:	7dfb      	ldrb	r3, [r7, #23]
}
 8004190:	4618      	mov	r0, r3
 8004192:	371c      	adds	r7, #28
 8004194:	46bd      	mov	sp, r7
 8004196:	f85d 7b04 	ldr.w	r7, [sp], #4
 800419a:	4770      	bx	lr

0800419c <USB_ActivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 800419c:	b480      	push	{r7}
 800419e:	b085      	sub	sp, #20
 80041a0:	af00      	add	r7, sp, #0
 80041a2:	6078      	str	r0, [r7, #4]
 80041a4:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80041a6:	687b      	ldr	r3, [r7, #4]
 80041a8:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 80041aa:	683b      	ldr	r3, [r7, #0]
 80041ac:	781b      	ldrb	r3, [r3, #0]
 80041ae:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 80041b0:	683b      	ldr	r3, [r7, #0]
 80041b2:	785b      	ldrb	r3, [r3, #1]
 80041b4:	2b01      	cmp	r3, #1
 80041b6:	d13a      	bne.n	800422e <USB_ActivateEndpoint+0x92>
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK));
 80041b8:	68fb      	ldr	r3, [r7, #12]
 80041ba:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80041be:	69da      	ldr	r2, [r3, #28]
 80041c0:	683b      	ldr	r3, [r7, #0]
 80041c2:	781b      	ldrb	r3, [r3, #0]
 80041c4:	f003 030f 	and.w	r3, r3, #15
 80041c8:	2101      	movs	r1, #1
 80041ca:	fa01 f303 	lsl.w	r3, r1, r3
 80041ce:	b29b      	uxth	r3, r3
 80041d0:	68f9      	ldr	r1, [r7, #12]
 80041d2:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80041d6:	4313      	orrs	r3, r2
 80041d8:	61cb      	str	r3, [r1, #28]

    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_USBAEP) == 0U)
 80041da:	68bb      	ldr	r3, [r7, #8]
 80041dc:	015a      	lsls	r2, r3, #5
 80041de:	68fb      	ldr	r3, [r7, #12]
 80041e0:	4413      	add	r3, r2
 80041e2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80041e6:	681b      	ldr	r3, [r3, #0]
 80041e8:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80041ec:	2b00      	cmp	r3, #0
 80041ee:	d155      	bne.n	800429c <USB_ActivateEndpoint+0x100>
    {
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 80041f0:	68bb      	ldr	r3, [r7, #8]
 80041f2:	015a      	lsls	r2, r3, #5
 80041f4:	68fb      	ldr	r3, [r7, #12]
 80041f6:	4413      	add	r3, r2
 80041f8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80041fc:	681a      	ldr	r2, [r3, #0]
 80041fe:	683b      	ldr	r3, [r7, #0]
 8004200:	689b      	ldr	r3, [r3, #8]
 8004202:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 8004206:	683b      	ldr	r3, [r7, #0]
 8004208:	78db      	ldrb	r3, [r3, #3]
 800420a:	049b      	lsls	r3, r3, #18
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 800420c:	4319      	orrs	r1, r3
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 800420e:	68bb      	ldr	r3, [r7, #8]
 8004210:	059b      	lsls	r3, r3, #22
 8004212:	430b      	orrs	r3, r1
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8004214:	4313      	orrs	r3, r2
 8004216:	68ba      	ldr	r2, [r7, #8]
 8004218:	0151      	lsls	r1, r2, #5
 800421a:	68fa      	ldr	r2, [r7, #12]
 800421c:	440a      	add	r2, r1
 800421e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004222:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004226:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800422a:	6013      	str	r3, [r2, #0]
 800422c:	e036      	b.n	800429c <USB_ActivateEndpoint+0x100>
                                   USB_OTG_DIEPCTL_USBAEP;
    }
  }
  else
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16);
 800422e:	68fb      	ldr	r3, [r7, #12]
 8004230:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004234:	69da      	ldr	r2, [r3, #28]
 8004236:	683b      	ldr	r3, [r7, #0]
 8004238:	781b      	ldrb	r3, [r3, #0]
 800423a:	f003 030f 	and.w	r3, r3, #15
 800423e:	2101      	movs	r1, #1
 8004240:	fa01 f303 	lsl.w	r3, r1, r3
 8004244:	041b      	lsls	r3, r3, #16
 8004246:	68f9      	ldr	r1, [r7, #12]
 8004248:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800424c:	4313      	orrs	r3, r2
 800424e:	61cb      	str	r3, [r1, #28]

    if (((USBx_OUTEP(epnum)->DOEPCTL) & USB_OTG_DOEPCTL_USBAEP) == 0U)
 8004250:	68bb      	ldr	r3, [r7, #8]
 8004252:	015a      	lsls	r2, r3, #5
 8004254:	68fb      	ldr	r3, [r7, #12]
 8004256:	4413      	add	r3, r2
 8004258:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800425c:	681b      	ldr	r3, [r3, #0]
 800425e:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8004262:	2b00      	cmp	r3, #0
 8004264:	d11a      	bne.n	800429c <USB_ActivateEndpoint+0x100>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 8004266:	68bb      	ldr	r3, [r7, #8]
 8004268:	015a      	lsls	r2, r3, #5
 800426a:	68fb      	ldr	r3, [r7, #12]
 800426c:	4413      	add	r3, r2
 800426e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004272:	681a      	ldr	r2, [r3, #0]
 8004274:	683b      	ldr	r3, [r7, #0]
 8004276:	689b      	ldr	r3, [r3, #8]
 8004278:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                    ((uint32_t)ep->type << 18) |
 800427c:	683b      	ldr	r3, [r7, #0]
 800427e:	78db      	ldrb	r3, [r3, #3]
 8004280:	049b      	lsls	r3, r3, #18
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 8004282:	430b      	orrs	r3, r1
 8004284:	4313      	orrs	r3, r2
 8004286:	68ba      	ldr	r2, [r7, #8]
 8004288:	0151      	lsls	r1, r2, #5
 800428a:	68fa      	ldr	r2, [r7, #12]
 800428c:	440a      	add	r2, r1
 800428e:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8004292:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004296:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800429a:	6013      	str	r3, [r2, #0]
                                    USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_USBAEP;
    }
  }
  return HAL_OK;
 800429c:	2300      	movs	r3, #0
}
 800429e:	4618      	mov	r0, r3
 80042a0:	3714      	adds	r7, #20
 80042a2:	46bd      	mov	sp, r7
 80042a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042a8:	4770      	bx	lr
	...

080042ac <USB_DeactivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 80042ac:	b480      	push	{r7}
 80042ae:	b085      	sub	sp, #20
 80042b0:	af00      	add	r7, sp, #0
 80042b2:	6078      	str	r0, [r7, #4]
 80042b4:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80042b6:	687b      	ldr	r3, [r7, #4]
 80042b8:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 80042ba:	683b      	ldr	r3, [r7, #0]
 80042bc:	781b      	ldrb	r3, [r3, #0]
 80042be:	60bb      	str	r3, [r7, #8]

  /* Read DEPCTLn register */
  if (ep->is_in == 1U)
 80042c0:	683b      	ldr	r3, [r7, #0]
 80042c2:	785b      	ldrb	r3, [r3, #1]
 80042c4:	2b01      	cmp	r3, #1
 80042c6:	d161      	bne.n	800438c <USB_DeactivateEndpoint+0xe0>
  {
    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 80042c8:	68bb      	ldr	r3, [r7, #8]
 80042ca:	015a      	lsls	r2, r3, #5
 80042cc:	68fb      	ldr	r3, [r7, #12]
 80042ce:	4413      	add	r3, r2
 80042d0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80042d4:	681b      	ldr	r3, [r3, #0]
 80042d6:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80042da:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80042de:	d11f      	bne.n	8004320 <USB_DeactivateEndpoint+0x74>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SNAK;
 80042e0:	68bb      	ldr	r3, [r7, #8]
 80042e2:	015a      	lsls	r2, r3, #5
 80042e4:	68fb      	ldr	r3, [r7, #12]
 80042e6:	4413      	add	r3, r2
 80042e8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80042ec:	681b      	ldr	r3, [r3, #0]
 80042ee:	68ba      	ldr	r2, [r7, #8]
 80042f0:	0151      	lsls	r1, r2, #5
 80042f2:	68fa      	ldr	r2, [r7, #12]
 80042f4:	440a      	add	r2, r1
 80042f6:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80042fa:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 80042fe:	6013      	str	r3, [r2, #0]
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_EPDIS;
 8004300:	68bb      	ldr	r3, [r7, #8]
 8004302:	015a      	lsls	r2, r3, #5
 8004304:	68fb      	ldr	r3, [r7, #12]
 8004306:	4413      	add	r3, r2
 8004308:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800430c:	681b      	ldr	r3, [r3, #0]
 800430e:	68ba      	ldr	r2, [r7, #8]
 8004310:	0151      	lsls	r1, r2, #5
 8004312:	68fa      	ldr	r2, [r7, #12]
 8004314:	440a      	add	r2, r1
 8004316:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800431a:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800431e:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 8004320:	68fb      	ldr	r3, [r7, #12]
 8004322:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004326:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8004328:	683b      	ldr	r3, [r7, #0]
 800432a:	781b      	ldrb	r3, [r3, #0]
 800432c:	f003 030f 	and.w	r3, r3, #15
 8004330:	2101      	movs	r1, #1
 8004332:	fa01 f303 	lsl.w	r3, r1, r3
 8004336:	b29b      	uxth	r3, r3
 8004338:	43db      	mvns	r3, r3
 800433a:	68f9      	ldr	r1, [r7, #12]
 800433c:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8004340:	4013      	ands	r3, r2
 8004342:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 8004344:	68fb      	ldr	r3, [r7, #12]
 8004346:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800434a:	69da      	ldr	r2, [r3, #28]
 800434c:	683b      	ldr	r3, [r7, #0]
 800434e:	781b      	ldrb	r3, [r3, #0]
 8004350:	f003 030f 	and.w	r3, r3, #15
 8004354:	2101      	movs	r1, #1
 8004356:	fa01 f303 	lsl.w	r3, r1, r3
 800435a:	b29b      	uxth	r3, r3
 800435c:	43db      	mvns	r3, r3
 800435e:	68f9      	ldr	r1, [r7, #12]
 8004360:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8004364:	4013      	ands	r3, r2
 8004366:	61cb      	str	r3, [r1, #28]
    USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_USBAEP |
 8004368:	68bb      	ldr	r3, [r7, #8]
 800436a:	015a      	lsls	r2, r3, #5
 800436c:	68fb      	ldr	r3, [r7, #12]
 800436e:	4413      	add	r3, r2
 8004370:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004374:	681a      	ldr	r2, [r3, #0]
 8004376:	68bb      	ldr	r3, [r7, #8]
 8004378:	0159      	lsls	r1, r3, #5
 800437a:	68fb      	ldr	r3, [r7, #12]
 800437c:	440b      	add	r3, r1
 800437e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004382:	4619      	mov	r1, r3
 8004384:	4b35      	ldr	r3, [pc, #212]	; (800445c <USB_DeactivateEndpoint+0x1b0>)
 8004386:	4013      	ands	r3, r2
 8004388:	600b      	str	r3, [r1, #0]
 800438a:	e060      	b.n	800444e <USB_DeactivateEndpoint+0x1a2>
                                   USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                   USB_OTG_DIEPCTL_EPTYP);
  }
  else
  {
    if ((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 800438c:	68bb      	ldr	r3, [r7, #8]
 800438e:	015a      	lsls	r2, r3, #5
 8004390:	68fb      	ldr	r3, [r7, #12]
 8004392:	4413      	add	r3, r2
 8004394:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004398:	681b      	ldr	r3, [r3, #0]
 800439a:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800439e:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80043a2:	d11f      	bne.n	80043e4 <USB_DeactivateEndpoint+0x138>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 80043a4:	68bb      	ldr	r3, [r7, #8]
 80043a6:	015a      	lsls	r2, r3, #5
 80043a8:	68fb      	ldr	r3, [r7, #12]
 80043aa:	4413      	add	r3, r2
 80043ac:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80043b0:	681b      	ldr	r3, [r3, #0]
 80043b2:	68ba      	ldr	r2, [r7, #8]
 80043b4:	0151      	lsls	r1, r2, #5
 80043b6:	68fa      	ldr	r2, [r7, #12]
 80043b8:	440a      	add	r2, r1
 80043ba:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80043be:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 80043c2:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_EPDIS;
 80043c4:	68bb      	ldr	r3, [r7, #8]
 80043c6:	015a      	lsls	r2, r3, #5
 80043c8:	68fb      	ldr	r3, [r7, #12]
 80043ca:	4413      	add	r3, r2
 80043cc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80043d0:	681b      	ldr	r3, [r3, #0]
 80043d2:	68ba      	ldr	r2, [r7, #8]
 80043d4:	0151      	lsls	r1, r2, #5
 80043d6:	68fa      	ldr	r2, [r7, #12]
 80043d8:	440a      	add	r2, r1
 80043da:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80043de:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 80043e2:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 80043e4:	68fb      	ldr	r3, [r7, #12]
 80043e6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80043ea:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80043ec:	683b      	ldr	r3, [r7, #0]
 80043ee:	781b      	ldrb	r3, [r3, #0]
 80043f0:	f003 030f 	and.w	r3, r3, #15
 80043f4:	2101      	movs	r1, #1
 80043f6:	fa01 f303 	lsl.w	r3, r1, r3
 80043fa:	041b      	lsls	r3, r3, #16
 80043fc:	43db      	mvns	r3, r3
 80043fe:	68f9      	ldr	r1, [r7, #12]
 8004400:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8004404:	4013      	ands	r3, r2
 8004406:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 8004408:	68fb      	ldr	r3, [r7, #12]
 800440a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800440e:	69da      	ldr	r2, [r3, #28]
 8004410:	683b      	ldr	r3, [r7, #0]
 8004412:	781b      	ldrb	r3, [r3, #0]
 8004414:	f003 030f 	and.w	r3, r3, #15
 8004418:	2101      	movs	r1, #1
 800441a:	fa01 f303 	lsl.w	r3, r1, r3
 800441e:	041b      	lsls	r3, r3, #16
 8004420:	43db      	mvns	r3, r3
 8004422:	68f9      	ldr	r1, [r7, #12]
 8004424:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8004428:	4013      	ands	r3, r2
 800442a:	61cb      	str	r3, [r1, #28]
    USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_USBAEP |
 800442c:	68bb      	ldr	r3, [r7, #8]
 800442e:	015a      	lsls	r2, r3, #5
 8004430:	68fb      	ldr	r3, [r7, #12]
 8004432:	4413      	add	r3, r2
 8004434:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004438:	681a      	ldr	r2, [r3, #0]
 800443a:	68bb      	ldr	r3, [r7, #8]
 800443c:	0159      	lsls	r1, r3, #5
 800443e:	68fb      	ldr	r3, [r7, #12]
 8004440:	440b      	add	r3, r1
 8004442:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004446:	4619      	mov	r1, r3
 8004448:	4b05      	ldr	r3, [pc, #20]	; (8004460 <USB_DeactivateEndpoint+0x1b4>)
 800444a:	4013      	ands	r3, r2
 800444c:	600b      	str	r3, [r1, #0]
                                    USB_OTG_DOEPCTL_MPSIZ |
                                    USB_OTG_DOEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_EPTYP);
  }

  return HAL_OK;
 800444e:	2300      	movs	r3, #0
}
 8004450:	4618      	mov	r0, r3
 8004452:	3714      	adds	r7, #20
 8004454:	46bd      	mov	sp, r7
 8004456:	f85d 7b04 	ldr.w	r7, [sp], #4
 800445a:	4770      	bx	lr
 800445c:	ec337800 	.word	0xec337800
 8004460:	eff37800 	.word	0xeff37800

08004464 <USB_EPStartXfer>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8004464:	b580      	push	{r7, lr}
 8004466:	b086      	sub	sp, #24
 8004468:	af00      	add	r7, sp, #0
 800446a:	6078      	str	r0, [r7, #4]
 800446c:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800446e:	687b      	ldr	r3, [r7, #4]
 8004470:	617b      	str	r3, [r7, #20]
  uint32_t epnum = (uint32_t)ep->num;
 8004472:	683b      	ldr	r3, [r7, #0]
 8004474:	781b      	ldrb	r3, [r3, #0]
 8004476:	613b      	str	r3, [r7, #16]
  uint16_t pktcnt;

  /* IN endpoint */
  if (ep->is_in == 1U)
 8004478:	683b      	ldr	r3, [r7, #0]
 800447a:	785b      	ldrb	r3, [r3, #1]
 800447c:	2b01      	cmp	r3, #1
 800447e:	f040 810a 	bne.w	8004696 <USB_EPStartXfer+0x232>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 8004482:	683b      	ldr	r3, [r7, #0]
 8004484:	695b      	ldr	r3, [r3, #20]
 8004486:	2b00      	cmp	r3, #0
 8004488:	d132      	bne.n	80044f0 <USB_EPStartXfer+0x8c>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 800448a:	693b      	ldr	r3, [r7, #16]
 800448c:	015a      	lsls	r2, r3, #5
 800448e:	697b      	ldr	r3, [r7, #20]
 8004490:	4413      	add	r3, r2
 8004492:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004496:	691b      	ldr	r3, [r3, #16]
 8004498:	693a      	ldr	r2, [r7, #16]
 800449a:	0151      	lsls	r1, r2, #5
 800449c:	697a      	ldr	r2, [r7, #20]
 800449e:	440a      	add	r2, r1
 80044a0:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80044a4:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 80044a8:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 80044ac:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 80044ae:	693b      	ldr	r3, [r7, #16]
 80044b0:	015a      	lsls	r2, r3, #5
 80044b2:	697b      	ldr	r3, [r7, #20]
 80044b4:	4413      	add	r3, r2
 80044b6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80044ba:	691b      	ldr	r3, [r3, #16]
 80044bc:	693a      	ldr	r2, [r7, #16]
 80044be:	0151      	lsls	r1, r2, #5
 80044c0:	697a      	ldr	r2, [r7, #20]
 80044c2:	440a      	add	r2, r1
 80044c4:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80044c8:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80044cc:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 80044ce:	693b      	ldr	r3, [r7, #16]
 80044d0:	015a      	lsls	r2, r3, #5
 80044d2:	697b      	ldr	r3, [r7, #20]
 80044d4:	4413      	add	r3, r2
 80044d6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80044da:	691b      	ldr	r3, [r3, #16]
 80044dc:	693a      	ldr	r2, [r7, #16]
 80044de:	0151      	lsls	r1, r2, #5
 80044e0:	697a      	ldr	r2, [r7, #20]
 80044e2:	440a      	add	r2, r1
 80044e4:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80044e8:	0cdb      	lsrs	r3, r3, #19
 80044ea:	04db      	lsls	r3, r3, #19
 80044ec:	6113      	str	r3, [r2, #16]
 80044ee:	e074      	b.n	80045da <USB_EPStartXfer+0x176>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 80044f0:	693b      	ldr	r3, [r7, #16]
 80044f2:	015a      	lsls	r2, r3, #5
 80044f4:	697b      	ldr	r3, [r7, #20]
 80044f6:	4413      	add	r3, r2
 80044f8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80044fc:	691b      	ldr	r3, [r3, #16]
 80044fe:	693a      	ldr	r2, [r7, #16]
 8004500:	0151      	lsls	r1, r2, #5
 8004502:	697a      	ldr	r2, [r7, #20]
 8004504:	440a      	add	r2, r1
 8004506:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800450a:	0cdb      	lsrs	r3, r3, #19
 800450c:	04db      	lsls	r3, r3, #19
 800450e:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8004510:	693b      	ldr	r3, [r7, #16]
 8004512:	015a      	lsls	r2, r3, #5
 8004514:	697b      	ldr	r3, [r7, #20]
 8004516:	4413      	add	r3, r2
 8004518:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800451c:	691b      	ldr	r3, [r3, #16]
 800451e:	693a      	ldr	r2, [r7, #16]
 8004520:	0151      	lsls	r1, r2, #5
 8004522:	697a      	ldr	r2, [r7, #20]
 8004524:	440a      	add	r2, r1
 8004526:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800452a:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 800452e:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8004532:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT &
 8004534:	693b      	ldr	r3, [r7, #16]
 8004536:	015a      	lsls	r2, r3, #5
 8004538:	697b      	ldr	r3, [r7, #20]
 800453a:	4413      	add	r3, r2
 800453c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004540:	691a      	ldr	r2, [r3, #16]
                                     (((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket) << 19));
 8004542:	683b      	ldr	r3, [r7, #0]
 8004544:	6959      	ldr	r1, [r3, #20]
 8004546:	683b      	ldr	r3, [r7, #0]
 8004548:	689b      	ldr	r3, [r3, #8]
 800454a:	440b      	add	r3, r1
 800454c:	1e59      	subs	r1, r3, #1
 800454e:	683b      	ldr	r3, [r7, #0]
 8004550:	689b      	ldr	r3, [r3, #8]
 8004552:	fbb1 f3f3 	udiv	r3, r1, r3
 8004556:	04d9      	lsls	r1, r3, #19
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT &
 8004558:	4baf      	ldr	r3, [pc, #700]	; (8004818 <USB_EPStartXfer+0x3b4>)
 800455a:	400b      	ands	r3, r1
 800455c:	6939      	ldr	r1, [r7, #16]
 800455e:	0148      	lsls	r0, r1, #5
 8004560:	6979      	ldr	r1, [r7, #20]
 8004562:	4401      	add	r1, r0
 8004564:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 8004568:	4313      	orrs	r3, r2
 800456a:	610b      	str	r3, [r1, #16]

      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 800456c:	693b      	ldr	r3, [r7, #16]
 800456e:	015a      	lsls	r2, r3, #5
 8004570:	697b      	ldr	r3, [r7, #20]
 8004572:	4413      	add	r3, r2
 8004574:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004578:	691a      	ldr	r2, [r3, #16]
 800457a:	683b      	ldr	r3, [r7, #0]
 800457c:	695b      	ldr	r3, [r3, #20]
 800457e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004582:	6939      	ldr	r1, [r7, #16]
 8004584:	0148      	lsls	r0, r1, #5
 8004586:	6979      	ldr	r1, [r7, #20]
 8004588:	4401      	add	r1, r0
 800458a:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 800458e:	4313      	orrs	r3, r2
 8004590:	610b      	str	r3, [r1, #16]

      if (ep->type == EP_TYPE_ISOC)
 8004592:	683b      	ldr	r3, [r7, #0]
 8004594:	78db      	ldrb	r3, [r3, #3]
 8004596:	2b01      	cmp	r3, #1
 8004598:	d11f      	bne.n	80045da <USB_EPStartXfer+0x176>
      {
        USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_MULCNT);
 800459a:	693b      	ldr	r3, [r7, #16]
 800459c:	015a      	lsls	r2, r3, #5
 800459e:	697b      	ldr	r3, [r7, #20]
 80045a0:	4413      	add	r3, r2
 80045a2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80045a6:	691b      	ldr	r3, [r3, #16]
 80045a8:	693a      	ldr	r2, [r7, #16]
 80045aa:	0151      	lsls	r1, r2, #5
 80045ac:	697a      	ldr	r2, [r7, #20]
 80045ae:	440a      	add	r2, r1
 80045b0:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80045b4:	f023 43c0 	bic.w	r3, r3, #1610612736	; 0x60000000
 80045b8:	6113      	str	r3, [r2, #16]
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_MULCNT & (1U << 29));
 80045ba:	693b      	ldr	r3, [r7, #16]
 80045bc:	015a      	lsls	r2, r3, #5
 80045be:	697b      	ldr	r3, [r7, #20]
 80045c0:	4413      	add	r3, r2
 80045c2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80045c6:	691b      	ldr	r3, [r3, #16]
 80045c8:	693a      	ldr	r2, [r7, #16]
 80045ca:	0151      	lsls	r1, r2, #5
 80045cc:	697a      	ldr	r2, [r7, #20]
 80045ce:	440a      	add	r2, r1
 80045d0:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80045d4:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 80045d8:	6113      	str	r3, [r2, #16]
      }
    }
    /* EP enable, IN data in FIFO */
    USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 80045da:	693b      	ldr	r3, [r7, #16]
 80045dc:	015a      	lsls	r2, r3, #5
 80045de:	697b      	ldr	r3, [r7, #20]
 80045e0:	4413      	add	r3, r2
 80045e2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80045e6:	681b      	ldr	r3, [r3, #0]
 80045e8:	693a      	ldr	r2, [r7, #16]
 80045ea:	0151      	lsls	r1, r2, #5
 80045ec:	697a      	ldr	r2, [r7, #20]
 80045ee:	440a      	add	r2, r1
 80045f0:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80045f4:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 80045f8:	6013      	str	r3, [r2, #0]

    if (ep->type != EP_TYPE_ISOC)
 80045fa:	683b      	ldr	r3, [r7, #0]
 80045fc:	78db      	ldrb	r3, [r3, #3]
 80045fe:	2b01      	cmp	r3, #1
 8004600:	d015      	beq.n	800462e <USB_EPStartXfer+0x1ca>
    {
      /* Enable the Tx FIFO Empty Interrupt for this EP */
      if (ep->xfer_len > 0U)
 8004602:	683b      	ldr	r3, [r7, #0]
 8004604:	695b      	ldr	r3, [r3, #20]
 8004606:	2b00      	cmp	r3, #0
 8004608:	f000 8100 	beq.w	800480c <USB_EPStartXfer+0x3a8>
      {
        USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 800460c:	697b      	ldr	r3, [r7, #20]
 800460e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004612:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8004614:	683b      	ldr	r3, [r7, #0]
 8004616:	781b      	ldrb	r3, [r3, #0]
 8004618:	f003 030f 	and.w	r3, r3, #15
 800461c:	2101      	movs	r1, #1
 800461e:	fa01 f303 	lsl.w	r3, r1, r3
 8004622:	6979      	ldr	r1, [r7, #20]
 8004624:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8004628:	4313      	orrs	r3, r2
 800462a:	634b      	str	r3, [r1, #52]	; 0x34
 800462c:	e0ee      	b.n	800480c <USB_EPStartXfer+0x3a8>
      }
    }
    else
    {
      if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 800462e:	697b      	ldr	r3, [r7, #20]
 8004630:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004634:	689b      	ldr	r3, [r3, #8]
 8004636:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800463a:	2b00      	cmp	r3, #0
 800463c:	d110      	bne.n	8004660 <USB_EPStartXfer+0x1fc>
      {
        USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 800463e:	693b      	ldr	r3, [r7, #16]
 8004640:	015a      	lsls	r2, r3, #5
 8004642:	697b      	ldr	r3, [r7, #20]
 8004644:	4413      	add	r3, r2
 8004646:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800464a:	681b      	ldr	r3, [r3, #0]
 800464c:	693a      	ldr	r2, [r7, #16]
 800464e:	0151      	lsls	r1, r2, #5
 8004650:	697a      	ldr	r2, [r7, #20]
 8004652:	440a      	add	r2, r1
 8004654:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004658:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 800465c:	6013      	str	r3, [r2, #0]
 800465e:	e00f      	b.n	8004680 <USB_EPStartXfer+0x21c>
      }
      else
      {
        USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 8004660:	693b      	ldr	r3, [r7, #16]
 8004662:	015a      	lsls	r2, r3, #5
 8004664:	697b      	ldr	r3, [r7, #20]
 8004666:	4413      	add	r3, r2
 8004668:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800466c:	681b      	ldr	r3, [r3, #0]
 800466e:	693a      	ldr	r2, [r7, #16]
 8004670:	0151      	lsls	r1, r2, #5
 8004672:	697a      	ldr	r2, [r7, #20]
 8004674:	440a      	add	r2, r1
 8004676:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800467a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800467e:	6013      	str	r3, [r2, #0]
      }

      (void)USB_WritePacket(USBx, ep->xfer_buff, ep->num, (uint16_t)ep->xfer_len);
 8004680:	683b      	ldr	r3, [r7, #0]
 8004682:	68d9      	ldr	r1, [r3, #12]
 8004684:	683b      	ldr	r3, [r7, #0]
 8004686:	781a      	ldrb	r2, [r3, #0]
 8004688:	683b      	ldr	r3, [r7, #0]
 800468a:	695b      	ldr	r3, [r3, #20]
 800468c:	b29b      	uxth	r3, r3
 800468e:	6878      	ldr	r0, [r7, #4]
 8004690:	f000 f9e2 	bl	8004a58 <USB_WritePacket>
 8004694:	e0ba      	b.n	800480c <USB_EPStartXfer+0x3a8>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 8004696:	693b      	ldr	r3, [r7, #16]
 8004698:	015a      	lsls	r2, r3, #5
 800469a:	697b      	ldr	r3, [r7, #20]
 800469c:	4413      	add	r3, r2
 800469e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80046a2:	691b      	ldr	r3, [r3, #16]
 80046a4:	693a      	ldr	r2, [r7, #16]
 80046a6:	0151      	lsls	r1, r2, #5
 80046a8:	697a      	ldr	r2, [r7, #20]
 80046aa:	440a      	add	r2, r1
 80046ac:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80046b0:	0cdb      	lsrs	r3, r3, #19
 80046b2:	04db      	lsls	r3, r3, #19
 80046b4:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 80046b6:	693b      	ldr	r3, [r7, #16]
 80046b8:	015a      	lsls	r2, r3, #5
 80046ba:	697b      	ldr	r3, [r7, #20]
 80046bc:	4413      	add	r3, r2
 80046be:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80046c2:	691b      	ldr	r3, [r3, #16]
 80046c4:	693a      	ldr	r2, [r7, #16]
 80046c6:	0151      	lsls	r1, r2, #5
 80046c8:	697a      	ldr	r2, [r7, #20]
 80046ca:	440a      	add	r2, r1
 80046cc:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80046d0:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 80046d4:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 80046d8:	6113      	str	r3, [r2, #16]

    if (ep->xfer_len == 0U)
 80046da:	683b      	ldr	r3, [r7, #0]
 80046dc:	695b      	ldr	r3, [r3, #20]
 80046de:	2b00      	cmp	r3, #0
 80046e0:	d123      	bne.n	800472a <USB_EPStartXfer+0x2c6>
    {
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->maxpacket);
 80046e2:	693b      	ldr	r3, [r7, #16]
 80046e4:	015a      	lsls	r2, r3, #5
 80046e6:	697b      	ldr	r3, [r7, #20]
 80046e8:	4413      	add	r3, r2
 80046ea:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80046ee:	691a      	ldr	r2, [r3, #16]
 80046f0:	683b      	ldr	r3, [r7, #0]
 80046f2:	689b      	ldr	r3, [r3, #8]
 80046f4:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80046f8:	6939      	ldr	r1, [r7, #16]
 80046fa:	0148      	lsls	r0, r1, #5
 80046fc:	6979      	ldr	r1, [r7, #20]
 80046fe:	4401      	add	r1, r0
 8004700:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8004704:	4313      	orrs	r3, r2
 8004706:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8004708:	693b      	ldr	r3, [r7, #16]
 800470a:	015a      	lsls	r2, r3, #5
 800470c:	697b      	ldr	r3, [r7, #20]
 800470e:	4413      	add	r3, r2
 8004710:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004714:	691b      	ldr	r3, [r3, #16]
 8004716:	693a      	ldr	r2, [r7, #16]
 8004718:	0151      	lsls	r1, r2, #5
 800471a:	697a      	ldr	r2, [r7, #20]
 800471c:	440a      	add	r2, r1
 800471e:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8004722:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8004726:	6113      	str	r3, [r2, #16]
 8004728:	e033      	b.n	8004792 <USB_EPStartXfer+0x32e>
    }
    else
    {
      pktcnt = (uint16_t)((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket);
 800472a:	683b      	ldr	r3, [r7, #0]
 800472c:	695a      	ldr	r2, [r3, #20]
 800472e:	683b      	ldr	r3, [r7, #0]
 8004730:	689b      	ldr	r3, [r3, #8]
 8004732:	4413      	add	r3, r2
 8004734:	1e5a      	subs	r2, r3, #1
 8004736:	683b      	ldr	r3, [r7, #0]
 8004738:	689b      	ldr	r3, [r3, #8]
 800473a:	fbb2 f3f3 	udiv	r3, r2, r3
 800473e:	81fb      	strh	r3, [r7, #14]
      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_PKTCNT & ((uint32_t)pktcnt << 19);
 8004740:	693b      	ldr	r3, [r7, #16]
 8004742:	015a      	lsls	r2, r3, #5
 8004744:	697b      	ldr	r3, [r7, #20]
 8004746:	4413      	add	r3, r2
 8004748:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800474c:	691a      	ldr	r2, [r3, #16]
 800474e:	89fb      	ldrh	r3, [r7, #14]
 8004750:	04d9      	lsls	r1, r3, #19
 8004752:	4b31      	ldr	r3, [pc, #196]	; (8004818 <USB_EPStartXfer+0x3b4>)
 8004754:	400b      	ands	r3, r1
 8004756:	6939      	ldr	r1, [r7, #16]
 8004758:	0148      	lsls	r0, r1, #5
 800475a:	6979      	ldr	r1, [r7, #20]
 800475c:	4401      	add	r1, r0
 800475e:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8004762:	4313      	orrs	r3, r2
 8004764:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_XFRSIZ & (ep->maxpacket * pktcnt);
 8004766:	693b      	ldr	r3, [r7, #16]
 8004768:	015a      	lsls	r2, r3, #5
 800476a:	697b      	ldr	r3, [r7, #20]
 800476c:	4413      	add	r3, r2
 800476e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004772:	691a      	ldr	r2, [r3, #16]
 8004774:	683b      	ldr	r3, [r7, #0]
 8004776:	689b      	ldr	r3, [r3, #8]
 8004778:	89f9      	ldrh	r1, [r7, #14]
 800477a:	fb01 f303 	mul.w	r3, r1, r3
 800477e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004782:	6939      	ldr	r1, [r7, #16]
 8004784:	0148      	lsls	r0, r1, #5
 8004786:	6979      	ldr	r1, [r7, #20]
 8004788:	4401      	add	r1, r0
 800478a:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 800478e:	4313      	orrs	r3, r2
 8004790:	610b      	str	r3, [r1, #16]
    }

    if (ep->type == EP_TYPE_ISOC)
 8004792:	683b      	ldr	r3, [r7, #0]
 8004794:	78db      	ldrb	r3, [r3, #3]
 8004796:	2b01      	cmp	r3, #1
 8004798:	d128      	bne.n	80047ec <USB_EPStartXfer+0x388>
    {
      if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 800479a:	697b      	ldr	r3, [r7, #20]
 800479c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80047a0:	689b      	ldr	r3, [r3, #8]
 80047a2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80047a6:	2b00      	cmp	r3, #0
 80047a8:	d110      	bne.n	80047cc <USB_EPStartXfer+0x368>
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SODDFRM;
 80047aa:	693b      	ldr	r3, [r7, #16]
 80047ac:	015a      	lsls	r2, r3, #5
 80047ae:	697b      	ldr	r3, [r7, #20]
 80047b0:	4413      	add	r3, r2
 80047b2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80047b6:	681b      	ldr	r3, [r3, #0]
 80047b8:	693a      	ldr	r2, [r7, #16]
 80047ba:	0151      	lsls	r1, r2, #5
 80047bc:	697a      	ldr	r2, [r7, #20]
 80047be:	440a      	add	r2, r1
 80047c0:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80047c4:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 80047c8:	6013      	str	r3, [r2, #0]
 80047ca:	e00f      	b.n	80047ec <USB_EPStartXfer+0x388>
      }
      else
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM;
 80047cc:	693b      	ldr	r3, [r7, #16]
 80047ce:	015a      	lsls	r2, r3, #5
 80047d0:	697b      	ldr	r3, [r7, #20]
 80047d2:	4413      	add	r3, r2
 80047d4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80047d8:	681b      	ldr	r3, [r3, #0]
 80047da:	693a      	ldr	r2, [r7, #16]
 80047dc:	0151      	lsls	r1, r2, #5
 80047de:	697a      	ldr	r2, [r7, #20]
 80047e0:	440a      	add	r2, r1
 80047e2:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80047e6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80047ea:	6013      	str	r3, [r2, #0]
      }
    }
    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 80047ec:	693b      	ldr	r3, [r7, #16]
 80047ee:	015a      	lsls	r2, r3, #5
 80047f0:	697b      	ldr	r3, [r7, #20]
 80047f2:	4413      	add	r3, r2
 80047f4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80047f8:	681b      	ldr	r3, [r3, #0]
 80047fa:	693a      	ldr	r2, [r7, #16]
 80047fc:	0151      	lsls	r1, r2, #5
 80047fe:	697a      	ldr	r2, [r7, #20]
 8004800:	440a      	add	r2, r1
 8004802:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8004806:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 800480a:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 800480c:	2300      	movs	r3, #0
}
 800480e:	4618      	mov	r0, r3
 8004810:	3718      	adds	r7, #24
 8004812:	46bd      	mov	sp, r7
 8004814:	bd80      	pop	{r7, pc}
 8004816:	bf00      	nop
 8004818:	1ff80000 	.word	0x1ff80000

0800481c <USB_EP0StartXfer>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0StartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 800481c:	b480      	push	{r7}
 800481e:	b085      	sub	sp, #20
 8004820:	af00      	add	r7, sp, #0
 8004822:	6078      	str	r0, [r7, #4]
 8004824:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004826:	687b      	ldr	r3, [r7, #4]
 8004828:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 800482a:	683b      	ldr	r3, [r7, #0]
 800482c:	781b      	ldrb	r3, [r3, #0]
 800482e:	60bb      	str	r3, [r7, #8]

  /* IN endpoint */
  if (ep->is_in == 1U)
 8004830:	683b      	ldr	r3, [r7, #0]
 8004832:	785b      	ldrb	r3, [r3, #1]
 8004834:	2b01      	cmp	r3, #1
 8004836:	f040 80ab 	bne.w	8004990 <USB_EP0StartXfer+0x174>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 800483a:	683b      	ldr	r3, [r7, #0]
 800483c:	695b      	ldr	r3, [r3, #20]
 800483e:	2b00      	cmp	r3, #0
 8004840:	d132      	bne.n	80048a8 <USB_EP0StartXfer+0x8c>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8004842:	68bb      	ldr	r3, [r7, #8]
 8004844:	015a      	lsls	r2, r3, #5
 8004846:	68fb      	ldr	r3, [r7, #12]
 8004848:	4413      	add	r3, r2
 800484a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800484e:	691b      	ldr	r3, [r3, #16]
 8004850:	68ba      	ldr	r2, [r7, #8]
 8004852:	0151      	lsls	r1, r2, #5
 8004854:	68fa      	ldr	r2, [r7, #12]
 8004856:	440a      	add	r2, r1
 8004858:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800485c:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8004860:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8004864:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8004866:	68bb      	ldr	r3, [r7, #8]
 8004868:	015a      	lsls	r2, r3, #5
 800486a:	68fb      	ldr	r3, [r7, #12]
 800486c:	4413      	add	r3, r2
 800486e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004872:	691b      	ldr	r3, [r3, #16]
 8004874:	68ba      	ldr	r2, [r7, #8]
 8004876:	0151      	lsls	r1, r2, #5
 8004878:	68fa      	ldr	r2, [r7, #12]
 800487a:	440a      	add	r2, r1
 800487c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004880:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8004884:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8004886:	68bb      	ldr	r3, [r7, #8]
 8004888:	015a      	lsls	r2, r3, #5
 800488a:	68fb      	ldr	r3, [r7, #12]
 800488c:	4413      	add	r3, r2
 800488e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004892:	691b      	ldr	r3, [r3, #16]
 8004894:	68ba      	ldr	r2, [r7, #8]
 8004896:	0151      	lsls	r1, r2, #5
 8004898:	68fa      	ldr	r2, [r7, #12]
 800489a:	440a      	add	r2, r1
 800489c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80048a0:	0cdb      	lsrs	r3, r3, #19
 80048a2:	04db      	lsls	r3, r3, #19
 80048a4:	6113      	str	r3, [r2, #16]
 80048a6:	e04e      	b.n	8004946 <USB_EP0StartXfer+0x12a>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 80048a8:	68bb      	ldr	r3, [r7, #8]
 80048aa:	015a      	lsls	r2, r3, #5
 80048ac:	68fb      	ldr	r3, [r7, #12]
 80048ae:	4413      	add	r3, r2
 80048b0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80048b4:	691b      	ldr	r3, [r3, #16]
 80048b6:	68ba      	ldr	r2, [r7, #8]
 80048b8:	0151      	lsls	r1, r2, #5
 80048ba:	68fa      	ldr	r2, [r7, #12]
 80048bc:	440a      	add	r2, r1
 80048be:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80048c2:	0cdb      	lsrs	r3, r3, #19
 80048c4:	04db      	lsls	r3, r3, #19
 80048c6:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 80048c8:	68bb      	ldr	r3, [r7, #8]
 80048ca:	015a      	lsls	r2, r3, #5
 80048cc:	68fb      	ldr	r3, [r7, #12]
 80048ce:	4413      	add	r3, r2
 80048d0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80048d4:	691b      	ldr	r3, [r3, #16]
 80048d6:	68ba      	ldr	r2, [r7, #8]
 80048d8:	0151      	lsls	r1, r2, #5
 80048da:	68fa      	ldr	r2, [r7, #12]
 80048dc:	440a      	add	r2, r1
 80048de:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80048e2:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 80048e6:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 80048ea:	6113      	str	r3, [r2, #16]

      if (ep->xfer_len > ep->maxpacket)
 80048ec:	683b      	ldr	r3, [r7, #0]
 80048ee:	695a      	ldr	r2, [r3, #20]
 80048f0:	683b      	ldr	r3, [r7, #0]
 80048f2:	689b      	ldr	r3, [r3, #8]
 80048f4:	429a      	cmp	r2, r3
 80048f6:	d903      	bls.n	8004900 <USB_EP0StartXfer+0xe4>
      {
        ep->xfer_len = ep->maxpacket;
 80048f8:	683b      	ldr	r3, [r7, #0]
 80048fa:	689a      	ldr	r2, [r3, #8]
 80048fc:	683b      	ldr	r3, [r7, #0]
 80048fe:	615a      	str	r2, [r3, #20]
      }
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8004900:	68bb      	ldr	r3, [r7, #8]
 8004902:	015a      	lsls	r2, r3, #5
 8004904:	68fb      	ldr	r3, [r7, #12]
 8004906:	4413      	add	r3, r2
 8004908:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800490c:	691b      	ldr	r3, [r3, #16]
 800490e:	68ba      	ldr	r2, [r7, #8]
 8004910:	0151      	lsls	r1, r2, #5
 8004912:	68fa      	ldr	r2, [r7, #12]
 8004914:	440a      	add	r2, r1
 8004916:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800491a:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800491e:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 8004920:	68bb      	ldr	r3, [r7, #8]
 8004922:	015a      	lsls	r2, r3, #5
 8004924:	68fb      	ldr	r3, [r7, #12]
 8004926:	4413      	add	r3, r2
 8004928:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800492c:	691a      	ldr	r2, [r3, #16]
 800492e:	683b      	ldr	r3, [r7, #0]
 8004930:	695b      	ldr	r3, [r3, #20]
 8004932:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004936:	68b9      	ldr	r1, [r7, #8]
 8004938:	0148      	lsls	r0, r1, #5
 800493a:	68f9      	ldr	r1, [r7, #12]
 800493c:	4401      	add	r1, r0
 800493e:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 8004942:	4313      	orrs	r3, r2
 8004944:	610b      	str	r3, [r1, #16]
    }

    /* EP enable, IN data in FIFO */
    USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8004946:	68bb      	ldr	r3, [r7, #8]
 8004948:	015a      	lsls	r2, r3, #5
 800494a:	68fb      	ldr	r3, [r7, #12]
 800494c:	4413      	add	r3, r2
 800494e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004952:	681b      	ldr	r3, [r3, #0]
 8004954:	68ba      	ldr	r2, [r7, #8]
 8004956:	0151      	lsls	r1, r2, #5
 8004958:	68fa      	ldr	r2, [r7, #12]
 800495a:	440a      	add	r2, r1
 800495c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004960:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8004964:	6013      	str	r3, [r2, #0]

    /* Enable the Tx FIFO Empty Interrupt for this EP */
    if (ep->xfer_len > 0U)
 8004966:	683b      	ldr	r3, [r7, #0]
 8004968:	695b      	ldr	r3, [r3, #20]
 800496a:	2b00      	cmp	r3, #0
 800496c:	d06d      	beq.n	8004a4a <USB_EP0StartXfer+0x22e>
    {
      USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 800496e:	68fb      	ldr	r3, [r7, #12]
 8004970:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004974:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8004976:	683b      	ldr	r3, [r7, #0]
 8004978:	781b      	ldrb	r3, [r3, #0]
 800497a:	f003 030f 	and.w	r3, r3, #15
 800497e:	2101      	movs	r1, #1
 8004980:	fa01 f303 	lsl.w	r3, r1, r3
 8004984:	68f9      	ldr	r1, [r7, #12]
 8004986:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800498a:	4313      	orrs	r3, r2
 800498c:	634b      	str	r3, [r1, #52]	; 0x34
 800498e:	e05c      	b.n	8004a4a <USB_EP0StartXfer+0x22e>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 8004990:	68bb      	ldr	r3, [r7, #8]
 8004992:	015a      	lsls	r2, r3, #5
 8004994:	68fb      	ldr	r3, [r7, #12]
 8004996:	4413      	add	r3, r2
 8004998:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800499c:	691b      	ldr	r3, [r3, #16]
 800499e:	68ba      	ldr	r2, [r7, #8]
 80049a0:	0151      	lsls	r1, r2, #5
 80049a2:	68fa      	ldr	r2, [r7, #12]
 80049a4:	440a      	add	r2, r1
 80049a6:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80049aa:	0cdb      	lsrs	r3, r3, #19
 80049ac:	04db      	lsls	r3, r3, #19
 80049ae:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 80049b0:	68bb      	ldr	r3, [r7, #8]
 80049b2:	015a      	lsls	r2, r3, #5
 80049b4:	68fb      	ldr	r3, [r7, #12]
 80049b6:	4413      	add	r3, r2
 80049b8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80049bc:	691b      	ldr	r3, [r3, #16]
 80049be:	68ba      	ldr	r2, [r7, #8]
 80049c0:	0151      	lsls	r1, r2, #5
 80049c2:	68fa      	ldr	r2, [r7, #12]
 80049c4:	440a      	add	r2, r1
 80049c6:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80049ca:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 80049ce:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 80049d2:	6113      	str	r3, [r2, #16]

    if (ep->xfer_len > 0U)
 80049d4:	683b      	ldr	r3, [r7, #0]
 80049d6:	695b      	ldr	r3, [r3, #20]
 80049d8:	2b00      	cmp	r3, #0
 80049da:	d003      	beq.n	80049e4 <USB_EP0StartXfer+0x1c8>
    {
      ep->xfer_len = ep->maxpacket;
 80049dc:	683b      	ldr	r3, [r7, #0]
 80049de:	689a      	ldr	r2, [r3, #8]
 80049e0:	683b      	ldr	r3, [r7, #0]
 80049e2:	615a      	str	r2, [r3, #20]
    }

    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 80049e4:	68bb      	ldr	r3, [r7, #8]
 80049e6:	015a      	lsls	r2, r3, #5
 80049e8:	68fb      	ldr	r3, [r7, #12]
 80049ea:	4413      	add	r3, r2
 80049ec:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80049f0:	691b      	ldr	r3, [r3, #16]
 80049f2:	68ba      	ldr	r2, [r7, #8]
 80049f4:	0151      	lsls	r1, r2, #5
 80049f6:	68fa      	ldr	r2, [r7, #12]
 80049f8:	440a      	add	r2, r1
 80049fa:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80049fe:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8004a02:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & (ep->maxpacket));
 8004a04:	68bb      	ldr	r3, [r7, #8]
 8004a06:	015a      	lsls	r2, r3, #5
 8004a08:	68fb      	ldr	r3, [r7, #12]
 8004a0a:	4413      	add	r3, r2
 8004a0c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004a10:	691a      	ldr	r2, [r3, #16]
 8004a12:	683b      	ldr	r3, [r7, #0]
 8004a14:	689b      	ldr	r3, [r3, #8]
 8004a16:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004a1a:	68b9      	ldr	r1, [r7, #8]
 8004a1c:	0148      	lsls	r0, r1, #5
 8004a1e:	68f9      	ldr	r1, [r7, #12]
 8004a20:	4401      	add	r1, r0
 8004a22:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8004a26:	4313      	orrs	r3, r2
 8004a28:	610b      	str	r3, [r1, #16]

    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 8004a2a:	68bb      	ldr	r3, [r7, #8]
 8004a2c:	015a      	lsls	r2, r3, #5
 8004a2e:	68fb      	ldr	r3, [r7, #12]
 8004a30:	4413      	add	r3, r2
 8004a32:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004a36:	681b      	ldr	r3, [r3, #0]
 8004a38:	68ba      	ldr	r2, [r7, #8]
 8004a3a:	0151      	lsls	r1, r2, #5
 8004a3c:	68fa      	ldr	r2, [r7, #12]
 8004a3e:	440a      	add	r2, r1
 8004a40:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8004a44:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8004a48:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8004a4a:	2300      	movs	r3, #0
}
 8004a4c:	4618      	mov	r0, r3
 8004a4e:	3714      	adds	r7, #20
 8004a50:	46bd      	mov	sp, r7
 8004a52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a56:	4770      	bx	lr

08004a58 <USB_WritePacket>:
  * @param  len  Number of bytes to write
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *src,
                                  uint8_t ch_ep_num, uint16_t len)
{
 8004a58:	b480      	push	{r7}
 8004a5a:	b089      	sub	sp, #36	; 0x24
 8004a5c:	af00      	add	r7, sp, #0
 8004a5e:	60f8      	str	r0, [r7, #12]
 8004a60:	60b9      	str	r1, [r7, #8]
 8004a62:	4611      	mov	r1, r2
 8004a64:	461a      	mov	r2, r3
 8004a66:	460b      	mov	r3, r1
 8004a68:	71fb      	strb	r3, [r7, #7]
 8004a6a:	4613      	mov	r3, r2
 8004a6c:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004a6e:	68fb      	ldr	r3, [r7, #12]
 8004a70:	617b      	str	r3, [r7, #20]
  uint8_t *pSrc = src;
 8004a72:	68bb      	ldr	r3, [r7, #8]
 8004a74:	61fb      	str	r3, [r7, #28]
  uint32_t count32b;
  uint32_t i;

  count32b = ((uint32_t)len + 3U) / 4U;
 8004a76:	88bb      	ldrh	r3, [r7, #4]
 8004a78:	3303      	adds	r3, #3
 8004a7a:	089b      	lsrs	r3, r3, #2
 8004a7c:	613b      	str	r3, [r7, #16]
  for (i = 0U; i < count32b; i++)
 8004a7e:	2300      	movs	r3, #0
 8004a80:	61bb      	str	r3, [r7, #24]
 8004a82:	e018      	b.n	8004ab6 <USB_WritePacket+0x5e>
  {
    USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 8004a84:	79fb      	ldrb	r3, [r7, #7]
 8004a86:	031a      	lsls	r2, r3, #12
 8004a88:	697b      	ldr	r3, [r7, #20]
 8004a8a:	4413      	add	r3, r2
 8004a8c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004a90:	461a      	mov	r2, r3
 8004a92:	69fb      	ldr	r3, [r7, #28]
 8004a94:	681b      	ldr	r3, [r3, #0]
 8004a96:	6013      	str	r3, [r2, #0]
    pSrc++;
 8004a98:	69fb      	ldr	r3, [r7, #28]
 8004a9a:	3301      	adds	r3, #1
 8004a9c:	61fb      	str	r3, [r7, #28]
    pSrc++;
 8004a9e:	69fb      	ldr	r3, [r7, #28]
 8004aa0:	3301      	adds	r3, #1
 8004aa2:	61fb      	str	r3, [r7, #28]
    pSrc++;
 8004aa4:	69fb      	ldr	r3, [r7, #28]
 8004aa6:	3301      	adds	r3, #1
 8004aa8:	61fb      	str	r3, [r7, #28]
    pSrc++;
 8004aaa:	69fb      	ldr	r3, [r7, #28]
 8004aac:	3301      	adds	r3, #1
 8004aae:	61fb      	str	r3, [r7, #28]
  for (i = 0U; i < count32b; i++)
 8004ab0:	69bb      	ldr	r3, [r7, #24]
 8004ab2:	3301      	adds	r3, #1
 8004ab4:	61bb      	str	r3, [r7, #24]
 8004ab6:	69ba      	ldr	r2, [r7, #24]
 8004ab8:	693b      	ldr	r3, [r7, #16]
 8004aba:	429a      	cmp	r2, r3
 8004abc:	d3e2      	bcc.n	8004a84 <USB_WritePacket+0x2c>
  }

  return HAL_OK;
 8004abe:	2300      	movs	r3, #0
}
 8004ac0:	4618      	mov	r0, r3
 8004ac2:	3724      	adds	r7, #36	; 0x24
 8004ac4:	46bd      	mov	sp, r7
 8004ac6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004aca:	4770      	bx	lr

08004acc <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 8004acc:	b480      	push	{r7}
 8004ace:	b08b      	sub	sp, #44	; 0x2c
 8004ad0:	af00      	add	r7, sp, #0
 8004ad2:	60f8      	str	r0, [r7, #12]
 8004ad4:	60b9      	str	r1, [r7, #8]
 8004ad6:	4613      	mov	r3, r2
 8004ad8:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004ada:	68fb      	ldr	r3, [r7, #12]
 8004adc:	61bb      	str	r3, [r7, #24]
  uint8_t *pDest = dest;
 8004ade:	68bb      	ldr	r3, [r7, #8]
 8004ae0:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t pData;
  uint32_t i;
  uint32_t count32b = (uint32_t)len >> 2U;
 8004ae2:	88fb      	ldrh	r3, [r7, #6]
 8004ae4:	089b      	lsrs	r3, r3, #2
 8004ae6:	b29b      	uxth	r3, r3
 8004ae8:	617b      	str	r3, [r7, #20]
  uint16_t remaining_bytes = len % 4U;
 8004aea:	88fb      	ldrh	r3, [r7, #6]
 8004aec:	f003 0303 	and.w	r3, r3, #3
 8004af0:	83fb      	strh	r3, [r7, #30]

  for (i = 0U; i < count32b; i++)
 8004af2:	2300      	movs	r3, #0
 8004af4:	623b      	str	r3, [r7, #32]
 8004af6:	e014      	b.n	8004b22 <USB_ReadPacket+0x56>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 8004af8:	69bb      	ldr	r3, [r7, #24]
 8004afa:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004afe:	681a      	ldr	r2, [r3, #0]
 8004b00:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004b02:	601a      	str	r2, [r3, #0]
    pDest++;
 8004b04:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004b06:	3301      	adds	r3, #1
 8004b08:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 8004b0a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004b0c:	3301      	adds	r3, #1
 8004b0e:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 8004b10:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004b12:	3301      	adds	r3, #1
 8004b14:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 8004b16:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004b18:	3301      	adds	r3, #1
 8004b1a:	627b      	str	r3, [r7, #36]	; 0x24
  for (i = 0U; i < count32b; i++)
 8004b1c:	6a3b      	ldr	r3, [r7, #32]
 8004b1e:	3301      	adds	r3, #1
 8004b20:	623b      	str	r3, [r7, #32]
 8004b22:	6a3a      	ldr	r2, [r7, #32]
 8004b24:	697b      	ldr	r3, [r7, #20]
 8004b26:	429a      	cmp	r2, r3
 8004b28:	d3e6      	bcc.n	8004af8 <USB_ReadPacket+0x2c>
  }

  /* When Number of data is not word aligned, read the remaining byte */
  if (remaining_bytes != 0U)
 8004b2a:	8bfb      	ldrh	r3, [r7, #30]
 8004b2c:	2b00      	cmp	r3, #0
 8004b2e:	d01e      	beq.n	8004b6e <USB_ReadPacket+0xa2>
  {
    i = 0U;
 8004b30:	2300      	movs	r3, #0
 8004b32:	623b      	str	r3, [r7, #32]
    __UNALIGNED_UINT32_WRITE(&pData, USBx_DFIFO(0U));
 8004b34:	69bb      	ldr	r3, [r7, #24]
 8004b36:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004b3a:	461a      	mov	r2, r3
 8004b3c:	f107 0310 	add.w	r3, r7, #16
 8004b40:	6812      	ldr	r2, [r2, #0]
 8004b42:	601a      	str	r2, [r3, #0]

    do
    {
      *(uint8_t *)pDest = (uint8_t)(pData >> (8U * (uint8_t)(i)));
 8004b44:	693a      	ldr	r2, [r7, #16]
 8004b46:	6a3b      	ldr	r3, [r7, #32]
 8004b48:	b2db      	uxtb	r3, r3
 8004b4a:	00db      	lsls	r3, r3, #3
 8004b4c:	fa22 f303 	lsr.w	r3, r2, r3
 8004b50:	b2da      	uxtb	r2, r3
 8004b52:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004b54:	701a      	strb	r2, [r3, #0]
      i++;
 8004b56:	6a3b      	ldr	r3, [r7, #32]
 8004b58:	3301      	adds	r3, #1
 8004b5a:	623b      	str	r3, [r7, #32]
      pDest++;
 8004b5c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004b5e:	3301      	adds	r3, #1
 8004b60:	627b      	str	r3, [r7, #36]	; 0x24
      remaining_bytes--;
 8004b62:	8bfb      	ldrh	r3, [r7, #30]
 8004b64:	3b01      	subs	r3, #1
 8004b66:	83fb      	strh	r3, [r7, #30]
    } while (remaining_bytes != 0U);
 8004b68:	8bfb      	ldrh	r3, [r7, #30]
 8004b6a:	2b00      	cmp	r3, #0
 8004b6c:	d1ea      	bne.n	8004b44 <USB_ReadPacket+0x78>
  }

  return ((void *)pDest);
 8004b6e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8004b70:	4618      	mov	r0, r3
 8004b72:	372c      	adds	r7, #44	; 0x2c
 8004b74:	46bd      	mov	sp, r7
 8004b76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b7a:	4770      	bx	lr

08004b7c <USB_EPSetStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8004b7c:	b480      	push	{r7}
 8004b7e:	b085      	sub	sp, #20
 8004b80:	af00      	add	r7, sp, #0
 8004b82:	6078      	str	r0, [r7, #4]
 8004b84:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004b86:	687b      	ldr	r3, [r7, #4]
 8004b88:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8004b8a:	683b      	ldr	r3, [r7, #0]
 8004b8c:	781b      	ldrb	r3, [r3, #0]
 8004b8e:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8004b90:	683b      	ldr	r3, [r7, #0]
 8004b92:	785b      	ldrb	r3, [r3, #1]
 8004b94:	2b01      	cmp	r3, #1
 8004b96:	d12c      	bne.n	8004bf2 <USB_EPSetStall+0x76>
  {
    if (((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == 0U) && (epnum != 0U))
 8004b98:	68bb      	ldr	r3, [r7, #8]
 8004b9a:	015a      	lsls	r2, r3, #5
 8004b9c:	68fb      	ldr	r3, [r7, #12]
 8004b9e:	4413      	add	r3, r2
 8004ba0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004ba4:	681b      	ldr	r3, [r3, #0]
 8004ba6:	2b00      	cmp	r3, #0
 8004ba8:	db12      	blt.n	8004bd0 <USB_EPSetStall+0x54>
 8004baa:	68bb      	ldr	r3, [r7, #8]
 8004bac:	2b00      	cmp	r3, #0
 8004bae:	d00f      	beq.n	8004bd0 <USB_EPSetStall+0x54>
    {
      USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_EPDIS);
 8004bb0:	68bb      	ldr	r3, [r7, #8]
 8004bb2:	015a      	lsls	r2, r3, #5
 8004bb4:	68fb      	ldr	r3, [r7, #12]
 8004bb6:	4413      	add	r3, r2
 8004bb8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004bbc:	681b      	ldr	r3, [r3, #0]
 8004bbe:	68ba      	ldr	r2, [r7, #8]
 8004bc0:	0151      	lsls	r1, r2, #5
 8004bc2:	68fa      	ldr	r2, [r7, #12]
 8004bc4:	440a      	add	r2, r1
 8004bc6:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004bca:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8004bce:	6013      	str	r3, [r2, #0]
    }
    USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_STALL;
 8004bd0:	68bb      	ldr	r3, [r7, #8]
 8004bd2:	015a      	lsls	r2, r3, #5
 8004bd4:	68fb      	ldr	r3, [r7, #12]
 8004bd6:	4413      	add	r3, r2
 8004bd8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004bdc:	681b      	ldr	r3, [r3, #0]
 8004bde:	68ba      	ldr	r2, [r7, #8]
 8004be0:	0151      	lsls	r1, r2, #5
 8004be2:	68fa      	ldr	r2, [r7, #12]
 8004be4:	440a      	add	r2, r1
 8004be6:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004bea:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8004bee:	6013      	str	r3, [r2, #0]
 8004bf0:	e02b      	b.n	8004c4a <USB_EPSetStall+0xce>
  }
  else
  {
    if (((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == 0U) && (epnum != 0U))
 8004bf2:	68bb      	ldr	r3, [r7, #8]
 8004bf4:	015a      	lsls	r2, r3, #5
 8004bf6:	68fb      	ldr	r3, [r7, #12]
 8004bf8:	4413      	add	r3, r2
 8004bfa:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004bfe:	681b      	ldr	r3, [r3, #0]
 8004c00:	2b00      	cmp	r3, #0
 8004c02:	db12      	blt.n	8004c2a <USB_EPSetStall+0xae>
 8004c04:	68bb      	ldr	r3, [r7, #8]
 8004c06:	2b00      	cmp	r3, #0
 8004c08:	d00f      	beq.n	8004c2a <USB_EPSetStall+0xae>
    {
      USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_EPDIS);
 8004c0a:	68bb      	ldr	r3, [r7, #8]
 8004c0c:	015a      	lsls	r2, r3, #5
 8004c0e:	68fb      	ldr	r3, [r7, #12]
 8004c10:	4413      	add	r3, r2
 8004c12:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004c16:	681b      	ldr	r3, [r3, #0]
 8004c18:	68ba      	ldr	r2, [r7, #8]
 8004c1a:	0151      	lsls	r1, r2, #5
 8004c1c:	68fa      	ldr	r2, [r7, #12]
 8004c1e:	440a      	add	r2, r1
 8004c20:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8004c24:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8004c28:	6013      	str	r3, [r2, #0]
    }
    USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_STALL;
 8004c2a:	68bb      	ldr	r3, [r7, #8]
 8004c2c:	015a      	lsls	r2, r3, #5
 8004c2e:	68fb      	ldr	r3, [r7, #12]
 8004c30:	4413      	add	r3, r2
 8004c32:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004c36:	681b      	ldr	r3, [r3, #0]
 8004c38:	68ba      	ldr	r2, [r7, #8]
 8004c3a:	0151      	lsls	r1, r2, #5
 8004c3c:	68fa      	ldr	r2, [r7, #12]
 8004c3e:	440a      	add	r2, r1
 8004c40:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8004c44:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8004c48:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8004c4a:	2300      	movs	r3, #0
}
 8004c4c:	4618      	mov	r0, r3
 8004c4e:	3714      	adds	r7, #20
 8004c50:	46bd      	mov	sp, r7
 8004c52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c56:	4770      	bx	lr

08004c58 <USB_EPClearStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8004c58:	b480      	push	{r7}
 8004c5a:	b085      	sub	sp, #20
 8004c5c:	af00      	add	r7, sp, #0
 8004c5e:	6078      	str	r0, [r7, #4]
 8004c60:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004c62:	687b      	ldr	r3, [r7, #4]
 8004c64:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8004c66:	683b      	ldr	r3, [r7, #0]
 8004c68:	781b      	ldrb	r3, [r3, #0]
 8004c6a:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8004c6c:	683b      	ldr	r3, [r7, #0]
 8004c6e:	785b      	ldrb	r3, [r3, #1]
 8004c70:	2b01      	cmp	r3, #1
 8004c72:	d128      	bne.n	8004cc6 <USB_EPClearStall+0x6e>
  {
    USBx_INEP(epnum)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 8004c74:	68bb      	ldr	r3, [r7, #8]
 8004c76:	015a      	lsls	r2, r3, #5
 8004c78:	68fb      	ldr	r3, [r7, #12]
 8004c7a:	4413      	add	r3, r2
 8004c7c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004c80:	681b      	ldr	r3, [r3, #0]
 8004c82:	68ba      	ldr	r2, [r7, #8]
 8004c84:	0151      	lsls	r1, r2, #5
 8004c86:	68fa      	ldr	r2, [r7, #12]
 8004c88:	440a      	add	r2, r1
 8004c8a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004c8e:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8004c92:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 8004c94:	683b      	ldr	r3, [r7, #0]
 8004c96:	78db      	ldrb	r3, [r3, #3]
 8004c98:	2b03      	cmp	r3, #3
 8004c9a:	d003      	beq.n	8004ca4 <USB_EPClearStall+0x4c>
 8004c9c:	683b      	ldr	r3, [r7, #0]
 8004c9e:	78db      	ldrb	r3, [r3, #3]
 8004ca0:	2b02      	cmp	r3, #2
 8004ca2:	d138      	bne.n	8004d16 <USB_EPClearStall+0xbe>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 8004ca4:	68bb      	ldr	r3, [r7, #8]
 8004ca6:	015a      	lsls	r2, r3, #5
 8004ca8:	68fb      	ldr	r3, [r7, #12]
 8004caa:	4413      	add	r3, r2
 8004cac:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004cb0:	681b      	ldr	r3, [r3, #0]
 8004cb2:	68ba      	ldr	r2, [r7, #8]
 8004cb4:	0151      	lsls	r1, r2, #5
 8004cb6:	68fa      	ldr	r2, [r7, #12]
 8004cb8:	440a      	add	r2, r1
 8004cba:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004cbe:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004cc2:	6013      	str	r3, [r2, #0]
 8004cc4:	e027      	b.n	8004d16 <USB_EPClearStall+0xbe>
    }
  }
  else
  {
    USBx_OUTEP(epnum)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 8004cc6:	68bb      	ldr	r3, [r7, #8]
 8004cc8:	015a      	lsls	r2, r3, #5
 8004cca:	68fb      	ldr	r3, [r7, #12]
 8004ccc:	4413      	add	r3, r2
 8004cce:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004cd2:	681b      	ldr	r3, [r3, #0]
 8004cd4:	68ba      	ldr	r2, [r7, #8]
 8004cd6:	0151      	lsls	r1, r2, #5
 8004cd8:	68fa      	ldr	r2, [r7, #12]
 8004cda:	440a      	add	r2, r1
 8004cdc:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8004ce0:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8004ce4:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 8004ce6:	683b      	ldr	r3, [r7, #0]
 8004ce8:	78db      	ldrb	r3, [r3, #3]
 8004cea:	2b03      	cmp	r3, #3
 8004cec:	d003      	beq.n	8004cf6 <USB_EPClearStall+0x9e>
 8004cee:	683b      	ldr	r3, [r7, #0]
 8004cf0:	78db      	ldrb	r3, [r3, #3]
 8004cf2:	2b02      	cmp	r3, #2
 8004cf4:	d10f      	bne.n	8004d16 <USB_EPClearStall+0xbe>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 8004cf6:	68bb      	ldr	r3, [r7, #8]
 8004cf8:	015a      	lsls	r2, r3, #5
 8004cfa:	68fb      	ldr	r3, [r7, #12]
 8004cfc:	4413      	add	r3, r2
 8004cfe:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004d02:	681b      	ldr	r3, [r3, #0]
 8004d04:	68ba      	ldr	r2, [r7, #8]
 8004d06:	0151      	lsls	r1, r2, #5
 8004d08:	68fa      	ldr	r2, [r7, #12]
 8004d0a:	440a      	add	r2, r1
 8004d0c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8004d10:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004d14:	6013      	str	r3, [r2, #0]
    }
  }
  return HAL_OK;
 8004d16:	2300      	movs	r3, #0
}
 8004d18:	4618      	mov	r0, r3
 8004d1a:	3714      	adds	r7, #20
 8004d1c:	46bd      	mov	sp, r7
 8004d1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d22:	4770      	bx	lr

08004d24 <USB_SetDevAddress>:
  * @param  address  new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_SetDevAddress(USB_OTG_GlobalTypeDef *USBx, uint8_t address)
{
 8004d24:	b480      	push	{r7}
 8004d26:	b085      	sub	sp, #20
 8004d28:	af00      	add	r7, sp, #0
 8004d2a:	6078      	str	r0, [r7, #4]
 8004d2c:	460b      	mov	r3, r1
 8004d2e:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004d30:	687b      	ldr	r3, [r7, #4]
 8004d32:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG &= ~(USB_OTG_DCFG_DAD);
 8004d34:	68fb      	ldr	r3, [r7, #12]
 8004d36:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004d3a:	681b      	ldr	r3, [r3, #0]
 8004d3c:	68fa      	ldr	r2, [r7, #12]
 8004d3e:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8004d42:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 8004d46:	6013      	str	r3, [r2, #0]
  USBx_DEVICE->DCFG |= ((uint32_t)address << 4) & USB_OTG_DCFG_DAD;
 8004d48:	68fb      	ldr	r3, [r7, #12]
 8004d4a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004d4e:	681a      	ldr	r2, [r3, #0]
 8004d50:	78fb      	ldrb	r3, [r7, #3]
 8004d52:	011b      	lsls	r3, r3, #4
 8004d54:	f403 63fe 	and.w	r3, r3, #2032	; 0x7f0
 8004d58:	68f9      	ldr	r1, [r7, #12]
 8004d5a:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8004d5e:	4313      	orrs	r3, r2
 8004d60:	600b      	str	r3, [r1, #0]

  return HAL_OK;
 8004d62:	2300      	movs	r3, #0
}
 8004d64:	4618      	mov	r0, r3
 8004d66:	3714      	adds	r7, #20
 8004d68:	46bd      	mov	sp, r7
 8004d6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d6e:	4770      	bx	lr

08004d70 <USB_DevConnect>:
  * @brief  USB_DevConnect : Connect the USB device by enabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevConnect(USB_OTG_GlobalTypeDef *USBx)
{
 8004d70:	b480      	push	{r7}
 8004d72:	b085      	sub	sp, #20
 8004d74:	af00      	add	r7, sp, #0
 8004d76:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004d78:	687b      	ldr	r3, [r7, #4]
 8004d7a:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 8004d7c:	68fb      	ldr	r3, [r7, #12]
 8004d7e:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8004d82:	681b      	ldr	r3, [r3, #0]
 8004d84:	68fa      	ldr	r2, [r7, #12]
 8004d86:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 8004d8a:	f023 0303 	bic.w	r3, r3, #3
 8004d8e:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_SDIS;
 8004d90:	68fb      	ldr	r3, [r7, #12]
 8004d92:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004d96:	685b      	ldr	r3, [r3, #4]
 8004d98:	68fa      	ldr	r2, [r7, #12]
 8004d9a:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8004d9e:	f023 0302 	bic.w	r3, r3, #2
 8004da2:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8004da4:	2300      	movs	r3, #0
}
 8004da6:	4618      	mov	r0, r3
 8004da8:	3714      	adds	r7, #20
 8004daa:	46bd      	mov	sp, r7
 8004dac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004db0:	4770      	bx	lr

08004db2 <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect(USB_OTG_GlobalTypeDef *USBx)
{
 8004db2:	b480      	push	{r7}
 8004db4:	b085      	sub	sp, #20
 8004db6:	af00      	add	r7, sp, #0
 8004db8:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004dba:	687b      	ldr	r3, [r7, #4]
 8004dbc:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 8004dbe:	68fb      	ldr	r3, [r7, #12]
 8004dc0:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8004dc4:	681b      	ldr	r3, [r3, #0]
 8004dc6:	68fa      	ldr	r2, [r7, #12]
 8004dc8:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 8004dcc:	f023 0303 	bic.w	r3, r3, #3
 8004dd0:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8004dd2:	68fb      	ldr	r3, [r7, #12]
 8004dd4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004dd8:	685b      	ldr	r3, [r3, #4]
 8004dda:	68fa      	ldr	r2, [r7, #12]
 8004ddc:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8004de0:	f043 0302 	orr.w	r3, r3, #2
 8004de4:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8004de6:	2300      	movs	r3, #0
}
 8004de8:	4618      	mov	r0, r3
 8004dea:	3714      	adds	r7, #20
 8004dec:	46bd      	mov	sp, r7
 8004dee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004df2:	4770      	bx	lr

08004df4 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t  USB_ReadInterrupts(USB_OTG_GlobalTypeDef *USBx)
{
 8004df4:	b480      	push	{r7}
 8004df6:	b085      	sub	sp, #20
 8004df8:	af00      	add	r7, sp, #0
 8004dfa:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 8004dfc:	687b      	ldr	r3, [r7, #4]
 8004dfe:	695b      	ldr	r3, [r3, #20]
 8004e00:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 8004e02:	687b      	ldr	r3, [r7, #4]
 8004e04:	699b      	ldr	r3, [r3, #24]
 8004e06:	68fa      	ldr	r2, [r7, #12]
 8004e08:	4013      	ands	r3, r2
 8004e0a:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 8004e0c:	68fb      	ldr	r3, [r7, #12]
}
 8004e0e:	4618      	mov	r0, r3
 8004e10:	3714      	adds	r7, #20
 8004e12:	46bd      	mov	sp, r7
 8004e14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e18:	4770      	bx	lr

08004e1a <USB_ReadDevAllOutEpInterrupt>:
  * @brief  USB_ReadDevAllOutEpInterrupt: return the USB device OUT endpoints interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t USB_ReadDevAllOutEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 8004e1a:	b480      	push	{r7}
 8004e1c:	b085      	sub	sp, #20
 8004e1e:	af00      	add	r7, sp, #0
 8004e20:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004e22:	687b      	ldr	r3, [r7, #4]
 8004e24:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 8004e26:	68fb      	ldr	r3, [r7, #12]
 8004e28:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004e2c:	699b      	ldr	r3, [r3, #24]
 8004e2e:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 8004e30:	68fb      	ldr	r3, [r7, #12]
 8004e32:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004e36:	69db      	ldr	r3, [r3, #28]
 8004e38:	68ba      	ldr	r2, [r7, #8]
 8004e3a:	4013      	ands	r3, r2
 8004e3c:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xffff0000U) >> 16);
 8004e3e:	68bb      	ldr	r3, [r7, #8]
 8004e40:	0c1b      	lsrs	r3, r3, #16
}
 8004e42:	4618      	mov	r0, r3
 8004e44:	3714      	adds	r7, #20
 8004e46:	46bd      	mov	sp, r7
 8004e48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e4c:	4770      	bx	lr

08004e4e <USB_ReadDevAllInEpInterrupt>:
  * @brief  USB_ReadDevAllInEpInterrupt: return the USB device IN endpoints interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t USB_ReadDevAllInEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 8004e4e:	b480      	push	{r7}
 8004e50:	b085      	sub	sp, #20
 8004e52:	af00      	add	r7, sp, #0
 8004e54:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004e56:	687b      	ldr	r3, [r7, #4]
 8004e58:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 8004e5a:	68fb      	ldr	r3, [r7, #12]
 8004e5c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004e60:	699b      	ldr	r3, [r3, #24]
 8004e62:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 8004e64:	68fb      	ldr	r3, [r7, #12]
 8004e66:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004e6a:	69db      	ldr	r3, [r3, #28]
 8004e6c:	68ba      	ldr	r2, [r7, #8]
 8004e6e:	4013      	ands	r3, r2
 8004e70:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xFFFFU));
 8004e72:	68bb      	ldr	r3, [r7, #8]
 8004e74:	b29b      	uxth	r3, r3
}
 8004e76:	4618      	mov	r0, r3
 8004e78:	3714      	adds	r7, #20
 8004e7a:	46bd      	mov	sp, r7
 8004e7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e80:	4770      	bx	lr

08004e82 <USB_ReadDevOutEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device OUT EP Interrupt register
  */
uint32_t USB_ReadDevOutEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 8004e82:	b480      	push	{r7}
 8004e84:	b085      	sub	sp, #20
 8004e86:	af00      	add	r7, sp, #0
 8004e88:	6078      	str	r0, [r7, #4]
 8004e8a:	460b      	mov	r3, r1
 8004e8c:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004e8e:	687b      	ldr	r3, [r7, #4]
 8004e90:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_OUTEP((uint32_t)epnum)->DOEPINT;
 8004e92:	78fb      	ldrb	r3, [r7, #3]
 8004e94:	015a      	lsls	r2, r3, #5
 8004e96:	68fb      	ldr	r3, [r7, #12]
 8004e98:	4413      	add	r3, r2
 8004e9a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004e9e:	689b      	ldr	r3, [r3, #8]
 8004ea0:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DOEPMSK;
 8004ea2:	68fb      	ldr	r3, [r7, #12]
 8004ea4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004ea8:	695b      	ldr	r3, [r3, #20]
 8004eaa:	68ba      	ldr	r2, [r7, #8]
 8004eac:	4013      	ands	r3, r2
 8004eae:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 8004eb0:	68bb      	ldr	r3, [r7, #8]
}
 8004eb2:	4618      	mov	r0, r3
 8004eb4:	3714      	adds	r7, #20
 8004eb6:	46bd      	mov	sp, r7
 8004eb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ebc:	4770      	bx	lr

08004ebe <USB_ReadDevInEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device IN EP Interrupt register
  */
uint32_t USB_ReadDevInEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 8004ebe:	b480      	push	{r7}
 8004ec0:	b087      	sub	sp, #28
 8004ec2:	af00      	add	r7, sp, #0
 8004ec4:	6078      	str	r0, [r7, #4]
 8004ec6:	460b      	mov	r3, r1
 8004ec8:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004eca:	687b      	ldr	r3, [r7, #4]
 8004ecc:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg;
  uint32_t msk;
  uint32_t emp;

  msk = USBx_DEVICE->DIEPMSK;
 8004ece:	697b      	ldr	r3, [r7, #20]
 8004ed0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004ed4:	691b      	ldr	r3, [r3, #16]
 8004ed6:	613b      	str	r3, [r7, #16]
  emp = USBx_DEVICE->DIEPEMPMSK;
 8004ed8:	697b      	ldr	r3, [r7, #20]
 8004eda:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004ede:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004ee0:	60fb      	str	r3, [r7, #12]
  msk |= ((emp >> (epnum & EP_ADDR_MSK)) & 0x1U) << 7;
 8004ee2:	78fb      	ldrb	r3, [r7, #3]
 8004ee4:	f003 030f 	and.w	r3, r3, #15
 8004ee8:	68fa      	ldr	r2, [r7, #12]
 8004eea:	fa22 f303 	lsr.w	r3, r2, r3
 8004eee:	01db      	lsls	r3, r3, #7
 8004ef0:	b2db      	uxtb	r3, r3
 8004ef2:	693a      	ldr	r2, [r7, #16]
 8004ef4:	4313      	orrs	r3, r2
 8004ef6:	613b      	str	r3, [r7, #16]
  tmpreg = USBx_INEP((uint32_t)epnum)->DIEPINT & msk;
 8004ef8:	78fb      	ldrb	r3, [r7, #3]
 8004efa:	015a      	lsls	r2, r3, #5
 8004efc:	697b      	ldr	r3, [r7, #20]
 8004efe:	4413      	add	r3, r2
 8004f00:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004f04:	689b      	ldr	r3, [r3, #8]
 8004f06:	693a      	ldr	r2, [r7, #16]
 8004f08:	4013      	ands	r3, r2
 8004f0a:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 8004f0c:	68bb      	ldr	r3, [r7, #8]
}
 8004f0e:	4618      	mov	r0, r3
 8004f10:	371c      	adds	r7, #28
 8004f12:	46bd      	mov	sp, r7
 8004f14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f18:	4770      	bx	lr

08004f1a <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 8004f1a:	b480      	push	{r7}
 8004f1c:	b083      	sub	sp, #12
 8004f1e:	af00      	add	r7, sp, #0
 8004f20:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 8004f22:	687b      	ldr	r3, [r7, #4]
 8004f24:	695b      	ldr	r3, [r3, #20]
 8004f26:	f003 0301 	and.w	r3, r3, #1
}
 8004f2a:	4618      	mov	r0, r3
 8004f2c:	370c      	adds	r7, #12
 8004f2e:	46bd      	mov	sp, r7
 8004f30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f34:	4770      	bx	lr

08004f36 <USB_ActivateSetup>:
  * @brief  Activate EP0 for Setup transactions
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_ActivateSetup(USB_OTG_GlobalTypeDef *USBx)
{
 8004f36:	b480      	push	{r7}
 8004f38:	b085      	sub	sp, #20
 8004f3a:	af00      	add	r7, sp, #0
 8004f3c:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004f3e:	687b      	ldr	r3, [r7, #4]
 8004f40:	60fb      	str	r3, [r7, #12]

  /* Set the MPS of the IN EP0 to 64 bytes */
  USBx_INEP(0U)->DIEPCTL &= ~USB_OTG_DIEPCTL_MPSIZ;
 8004f42:	68fb      	ldr	r3, [r7, #12]
 8004f44:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004f48:	681b      	ldr	r3, [r3, #0]
 8004f4a:	68fa      	ldr	r2, [r7, #12]
 8004f4c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004f50:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 8004f54:	f023 0307 	bic.w	r3, r3, #7
 8004f58:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGINAK;
 8004f5a:	68fb      	ldr	r3, [r7, #12]
 8004f5c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004f60:	685b      	ldr	r3, [r3, #4]
 8004f62:	68fa      	ldr	r2, [r7, #12]
 8004f64:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8004f68:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004f6c:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8004f6e:	2300      	movs	r3, #0
}
 8004f70:	4618      	mov	r0, r3
 8004f72:	3714      	adds	r7, #20
 8004f74:	46bd      	mov	sp, r7
 8004f76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f7a:	4770      	bx	lr

08004f7c <USB_EP0_OutStart>:
  * @param  USBx  Selected device
  * @param  psetup  pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(USB_OTG_GlobalTypeDef *USBx, uint8_t *psetup)
{
 8004f7c:	b480      	push	{r7}
 8004f7e:	b085      	sub	sp, #20
 8004f80:	af00      	add	r7, sp, #0
 8004f82:	6078      	str	r0, [r7, #4]
 8004f84:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004f86:	687b      	ldr	r3, [r7, #4]
 8004f88:	60fb      	str	r3, [r7, #12]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 8004f8a:	687b      	ldr	r3, [r7, #4]
 8004f8c:	333c      	adds	r3, #60	; 0x3c
 8004f8e:	3304      	adds	r3, #4
 8004f90:	681b      	ldr	r3, [r3, #0]
 8004f92:	60bb      	str	r3, [r7, #8]
  UNUSED(psetup);

  if (gSNPSiD > USB_OTG_CORE_ID_300A)
 8004f94:	68bb      	ldr	r3, [r7, #8]
 8004f96:	4a1c      	ldr	r2, [pc, #112]	; (8005008 <USB_EP0_OutStart+0x8c>)
 8004f98:	4293      	cmp	r3, r2
 8004f9a:	d90a      	bls.n	8004fb2 <USB_EP0_OutStart+0x36>
  {
    if ((USBx_OUTEP(0U)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8004f9c:	68fb      	ldr	r3, [r7, #12]
 8004f9e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004fa2:	681b      	ldr	r3, [r3, #0]
 8004fa4:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8004fa8:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8004fac:	d101      	bne.n	8004fb2 <USB_EP0_OutStart+0x36>
    {
      return HAL_OK;
 8004fae:	2300      	movs	r3, #0
 8004fb0:	e024      	b.n	8004ffc <USB_EP0_OutStart+0x80>
    }
  }

  USBx_OUTEP(0U)->DOEPTSIZ = 0U;
 8004fb2:	68fb      	ldr	r3, [r7, #12]
 8004fb4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004fb8:	461a      	mov	r2, r3
 8004fba:	2300      	movs	r3, #0
 8004fbc:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8004fbe:	68fb      	ldr	r3, [r7, #12]
 8004fc0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004fc4:	691b      	ldr	r3, [r3, #16]
 8004fc6:	68fa      	ldr	r2, [r7, #12]
 8004fc8:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8004fcc:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8004fd0:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (3U * 8U);
 8004fd2:	68fb      	ldr	r3, [r7, #12]
 8004fd4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004fd8:	691b      	ldr	r3, [r3, #16]
 8004fda:	68fa      	ldr	r2, [r7, #12]
 8004fdc:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8004fe0:	f043 0318 	orr.w	r3, r3, #24
 8004fe4:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |=  USB_OTG_DOEPTSIZ_STUPCNT;
 8004fe6:	68fb      	ldr	r3, [r7, #12]
 8004fe8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004fec:	691b      	ldr	r3, [r3, #16]
 8004fee:	68fa      	ldr	r2, [r7, #12]
 8004ff0:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8004ff4:	f043 43c0 	orr.w	r3, r3, #1610612736	; 0x60000000
 8004ff8:	6113      	str	r3, [r2, #16]

  return HAL_OK;
 8004ffa:	2300      	movs	r3, #0
}
 8004ffc:	4618      	mov	r0, r3
 8004ffe:	3714      	adds	r7, #20
 8005000:	46bd      	mov	sp, r7
 8005002:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005006:	4770      	bx	lr
 8005008:	4f54300a 	.word	0x4f54300a

0800500c <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 800500c:	b480      	push	{r7}
 800500e:	b085      	sub	sp, #20
 8005010:	af00      	add	r7, sp, #0
 8005012:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8005014:	2300      	movs	r3, #0
 8005016:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    if (++count > 200000U)
 8005018:	68fb      	ldr	r3, [r7, #12]
 800501a:	3301      	adds	r3, #1
 800501c:	60fb      	str	r3, [r7, #12]
 800501e:	4a13      	ldr	r2, [pc, #76]	; (800506c <USB_CoreReset+0x60>)
 8005020:	4293      	cmp	r3, r2
 8005022:	d901      	bls.n	8005028 <USB_CoreReset+0x1c>
    {
      return HAL_TIMEOUT;
 8005024:	2303      	movs	r3, #3
 8005026:	e01a      	b.n	800505e <USB_CoreReset+0x52>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8005028:	687b      	ldr	r3, [r7, #4]
 800502a:	691b      	ldr	r3, [r3, #16]
 800502c:	2b00      	cmp	r3, #0
 800502e:	daf3      	bge.n	8005018 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 8005030:	2300      	movs	r3, #0
 8005032:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 8005034:	687b      	ldr	r3, [r7, #4]
 8005036:	691b      	ldr	r3, [r3, #16]
 8005038:	f043 0201 	orr.w	r2, r3, #1
 800503c:	687b      	ldr	r3, [r7, #4]
 800503e:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 8005040:	68fb      	ldr	r3, [r7, #12]
 8005042:	3301      	adds	r3, #1
 8005044:	60fb      	str	r3, [r7, #12]
 8005046:	4a09      	ldr	r2, [pc, #36]	; (800506c <USB_CoreReset+0x60>)
 8005048:	4293      	cmp	r3, r2
 800504a:	d901      	bls.n	8005050 <USB_CoreReset+0x44>
    {
      return HAL_TIMEOUT;
 800504c:	2303      	movs	r3, #3
 800504e:	e006      	b.n	800505e <USB_CoreReset+0x52>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 8005050:	687b      	ldr	r3, [r7, #4]
 8005052:	691b      	ldr	r3, [r3, #16]
 8005054:	f003 0301 	and.w	r3, r3, #1
 8005058:	2b01      	cmp	r3, #1
 800505a:	d0f1      	beq.n	8005040 <USB_CoreReset+0x34>

  return HAL_OK;
 800505c:	2300      	movs	r3, #0
}
 800505e:	4618      	mov	r0, r3
 8005060:	3714      	adds	r7, #20
 8005062:	46bd      	mov	sp, r7
 8005064:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005068:	4770      	bx	lr
 800506a:	bf00      	nop
 800506c:	00030d40 	.word	0x00030d40

08005070 <USBD_CDC_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8005070:	b580      	push	{r7, lr}
 8005072:	b084      	sub	sp, #16
 8005074:	af00      	add	r7, sp, #0
 8005076:	6078      	str	r0, [r7, #4]
 8005078:	460b      	mov	r3, r1
 800507a:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);
  USBD_CDC_HandleTypeDef *hcdc;

  hcdc = USBD_malloc(sizeof(USBD_CDC_HandleTypeDef));
 800507c:	f44f 7007 	mov.w	r0, #540	; 0x21c
 8005080:	f002 faec 	bl	800765c <USBD_static_malloc>
 8005084:	60f8      	str	r0, [r7, #12]

  if (hcdc == NULL)
 8005086:	68fb      	ldr	r3, [r7, #12]
 8005088:	2b00      	cmp	r3, #0
 800508a:	d105      	bne.n	8005098 <USBD_CDC_Init+0x28>
  {
    pdev->pClassData = NULL;
 800508c:	687b      	ldr	r3, [r7, #4]
 800508e:	2200      	movs	r2, #0
 8005090:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
    return (uint8_t)USBD_EMEM;
 8005094:	2302      	movs	r3, #2
 8005096:	e066      	b.n	8005166 <USBD_CDC_Init+0xf6>
  }

  pdev->pClassData = (void *)hcdc;
 8005098:	687b      	ldr	r3, [r7, #4]
 800509a:	68fa      	ldr	r2, [r7, #12]
 800509c:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 80050a0:	687b      	ldr	r3, [r7, #4]
 80050a2:	7c1b      	ldrb	r3, [r3, #16]
 80050a4:	2b00      	cmp	r3, #0
 80050a6:	d119      	bne.n	80050dc <USBD_CDC_Init+0x6c>
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 80050a8:	f44f 7300 	mov.w	r3, #512	; 0x200
 80050ac:	2202      	movs	r2, #2
 80050ae:	2181      	movs	r1, #129	; 0x81
 80050b0:	6878      	ldr	r0, [r7, #4]
 80050b2:	f002 f8bf 	bl	8007234 <USBD_LL_OpenEP>
                         CDC_DATA_HS_IN_PACKET_SIZE);

    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 80050b6:	687b      	ldr	r3, [r7, #4]
 80050b8:	2201      	movs	r2, #1
 80050ba:	871a      	strh	r2, [r3, #56]	; 0x38

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 80050bc:	f44f 7300 	mov.w	r3, #512	; 0x200
 80050c0:	2202      	movs	r2, #2
 80050c2:	2101      	movs	r1, #1
 80050c4:	6878      	ldr	r0, [r7, #4]
 80050c6:	f002 f8b5 	bl	8007234 <USBD_LL_OpenEP>
                         CDC_DATA_HS_OUT_PACKET_SIZE);

    pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 80050ca:	687b      	ldr	r3, [r7, #4]
 80050cc:	2201      	movs	r2, #1
 80050ce:	f8a3 2178 	strh.w	r2, [r3, #376]	; 0x178

    /* Set bInterval for CDC CMD Endpoint */
    pdev->ep_in[CDC_CMD_EP & 0xFU].bInterval = CDC_HS_BINTERVAL;
 80050d2:	687b      	ldr	r3, [r7, #4]
 80050d4:	2210      	movs	r2, #16
 80050d6:	f8a3 204e 	strh.w	r2, [r3, #78]	; 0x4e
 80050da:	e016      	b.n	800510a <USBD_CDC_Init+0x9a>
  }
  else
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 80050dc:	2340      	movs	r3, #64	; 0x40
 80050de:	2202      	movs	r2, #2
 80050e0:	2181      	movs	r1, #129	; 0x81
 80050e2:	6878      	ldr	r0, [r7, #4]
 80050e4:	f002 f8a6 	bl	8007234 <USBD_LL_OpenEP>
                         CDC_DATA_FS_IN_PACKET_SIZE);

    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 80050e8:	687b      	ldr	r3, [r7, #4]
 80050ea:	2201      	movs	r2, #1
 80050ec:	871a      	strh	r2, [r3, #56]	; 0x38

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 80050ee:	2340      	movs	r3, #64	; 0x40
 80050f0:	2202      	movs	r2, #2
 80050f2:	2101      	movs	r1, #1
 80050f4:	6878      	ldr	r0, [r7, #4]
 80050f6:	f002 f89d 	bl	8007234 <USBD_LL_OpenEP>
                         CDC_DATA_FS_OUT_PACKET_SIZE);

    pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 80050fa:	687b      	ldr	r3, [r7, #4]
 80050fc:	2201      	movs	r2, #1
 80050fe:	f8a3 2178 	strh.w	r2, [r3, #376]	; 0x178

    /* Set bInterval for CMD Endpoint */
    pdev->ep_in[CDC_CMD_EP & 0xFU].bInterval = CDC_FS_BINTERVAL;
 8005102:	687b      	ldr	r3, [r7, #4]
 8005104:	2210      	movs	r2, #16
 8005106:	f8a3 204e 	strh.w	r2, [r3, #78]	; 0x4e
  }

  /* Open Command IN EP */
  (void)USBD_LL_OpenEP(pdev, CDC_CMD_EP, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 800510a:	2308      	movs	r3, #8
 800510c:	2203      	movs	r2, #3
 800510e:	2182      	movs	r1, #130	; 0x82
 8005110:	6878      	ldr	r0, [r7, #4]
 8005112:	f002 f88f 	bl	8007234 <USBD_LL_OpenEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 1U;
 8005116:	687b      	ldr	r3, [r7, #4]
 8005118:	2201      	movs	r2, #1
 800511a:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c

  /* Init  physical Interface components */
  ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Init();
 800511e:	687b      	ldr	r3, [r7, #4]
 8005120:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8005124:	681b      	ldr	r3, [r3, #0]
 8005126:	4798      	blx	r3

  /* Init Xfer states */
  hcdc->TxState = 0U;
 8005128:	68fb      	ldr	r3, [r7, #12]
 800512a:	2200      	movs	r2, #0
 800512c:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
  hcdc->RxState = 0U;
 8005130:	68fb      	ldr	r3, [r7, #12]
 8005132:	2200      	movs	r2, #0
 8005134:	f8c3 2218 	str.w	r2, [r3, #536]	; 0x218

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8005138:	687b      	ldr	r3, [r7, #4]
 800513a:	7c1b      	ldrb	r3, [r3, #16]
 800513c:	2b00      	cmp	r3, #0
 800513e:	d109      	bne.n	8005154 <USBD_CDC_Init+0xe4>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 8005140:	68fb      	ldr	r3, [r7, #12]
 8005142:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8005146:	f44f 7300 	mov.w	r3, #512	; 0x200
 800514a:	2101      	movs	r1, #1
 800514c:	6878      	ldr	r0, [r7, #4]
 800514e:	f002 f9eb 	bl	8007528 <USBD_LL_PrepareReceive>
 8005152:	e007      	b.n	8005164 <USBD_CDC_Init+0xf4>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 8005154:	68fb      	ldr	r3, [r7, #12]
 8005156:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 800515a:	2340      	movs	r3, #64	; 0x40
 800515c:	2101      	movs	r1, #1
 800515e:	6878      	ldr	r0, [r7, #4]
 8005160:	f002 f9e2 	bl	8007528 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 8005164:	2300      	movs	r3, #0
}
 8005166:	4618      	mov	r0, r3
 8005168:	3710      	adds	r7, #16
 800516a:	46bd      	mov	sp, r7
 800516c:	bd80      	pop	{r7, pc}

0800516e <USBD_CDC_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800516e:	b580      	push	{r7, lr}
 8005170:	b082      	sub	sp, #8
 8005172:	af00      	add	r7, sp, #0
 8005174:	6078      	str	r0, [r7, #4]
 8005176:	460b      	mov	r3, r1
 8005178:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);

  /* Close EP IN */
  (void)USBD_LL_CloseEP(pdev, CDC_IN_EP);
 800517a:	2181      	movs	r1, #129	; 0x81
 800517c:	6878      	ldr	r0, [r7, #4]
 800517e:	f002 f897 	bl	80072b0 <USBD_LL_CloseEP>
  pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 0U;
 8005182:	687b      	ldr	r3, [r7, #4]
 8005184:	2200      	movs	r2, #0
 8005186:	871a      	strh	r2, [r3, #56]	; 0x38

  /* Close EP OUT */
  (void)USBD_LL_CloseEP(pdev, CDC_OUT_EP);
 8005188:	2101      	movs	r1, #1
 800518a:	6878      	ldr	r0, [r7, #4]
 800518c:	f002 f890 	bl	80072b0 <USBD_LL_CloseEP>
  pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 0U;
 8005190:	687b      	ldr	r3, [r7, #4]
 8005192:	2200      	movs	r2, #0
 8005194:	f8a3 2178 	strh.w	r2, [r3, #376]	; 0x178

  /* Close Command IN EP */
  (void)USBD_LL_CloseEP(pdev, CDC_CMD_EP);
 8005198:	2182      	movs	r1, #130	; 0x82
 800519a:	6878      	ldr	r0, [r7, #4]
 800519c:	f002 f888 	bl	80072b0 <USBD_LL_CloseEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 0U;
 80051a0:	687b      	ldr	r3, [r7, #4]
 80051a2:	2200      	movs	r2, #0
 80051a4:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
  pdev->ep_in[CDC_CMD_EP & 0xFU].bInterval = 0U;
 80051a8:	687b      	ldr	r3, [r7, #4]
 80051aa:	2200      	movs	r2, #0
 80051ac:	f8a3 204e 	strh.w	r2, [r3, #78]	; 0x4e

  /* DeInit  physical Interface components */
  if (pdev->pClassData != NULL)
 80051b0:	687b      	ldr	r3, [r7, #4]
 80051b2:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 80051b6:	2b00      	cmp	r3, #0
 80051b8:	d00e      	beq.n	80051d8 <USBD_CDC_DeInit+0x6a>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->DeInit();
 80051ba:	687b      	ldr	r3, [r7, #4]
 80051bc:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 80051c0:	685b      	ldr	r3, [r3, #4]
 80051c2:	4798      	blx	r3
    (void)USBD_free(pdev->pClassData);
 80051c4:	687b      	ldr	r3, [r7, #4]
 80051c6:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 80051ca:	4618      	mov	r0, r3
 80051cc:	f002 fa54 	bl	8007678 <USBD_static_free>
    pdev->pClassData = NULL;
 80051d0:	687b      	ldr	r3, [r7, #4]
 80051d2:	2200      	movs	r2, #0
 80051d4:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
  }

  return (uint8_t)USBD_OK;
 80051d8:	2300      	movs	r3, #0
}
 80051da:	4618      	mov	r0, r3
 80051dc:	3708      	adds	r7, #8
 80051de:	46bd      	mov	sp, r7
 80051e0:	bd80      	pop	{r7, pc}
	...

080051e4 <USBD_CDC_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t USBD_CDC_Setup(USBD_HandleTypeDef *pdev,
                              USBD_SetupReqTypedef *req)
{
 80051e4:	b580      	push	{r7, lr}
 80051e6:	b086      	sub	sp, #24
 80051e8:	af00      	add	r7, sp, #0
 80051ea:	6078      	str	r0, [r7, #4]
 80051ec:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 80051ee:	687b      	ldr	r3, [r7, #4]
 80051f0:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 80051f4:	613b      	str	r3, [r7, #16]
  uint16_t len;
  uint8_t ifalt = 0U;
 80051f6:	2300      	movs	r3, #0
 80051f8:	737b      	strb	r3, [r7, #13]
  uint16_t status_info = 0U;
 80051fa:	2300      	movs	r3, #0
 80051fc:	817b      	strh	r3, [r7, #10]
  USBD_StatusTypeDef ret = USBD_OK;
 80051fe:	2300      	movs	r3, #0
 8005200:	75fb      	strb	r3, [r7, #23]

  if (hcdc == NULL)
 8005202:	693b      	ldr	r3, [r7, #16]
 8005204:	2b00      	cmp	r3, #0
 8005206:	d101      	bne.n	800520c <USBD_CDC_Setup+0x28>
  {
    return (uint8_t)USBD_FAIL;
 8005208:	2303      	movs	r3, #3
 800520a:	e0af      	b.n	800536c <USBD_CDC_Setup+0x188>
  }

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800520c:	683b      	ldr	r3, [r7, #0]
 800520e:	781b      	ldrb	r3, [r3, #0]
 8005210:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8005214:	2b00      	cmp	r3, #0
 8005216:	d03f      	beq.n	8005298 <USBD_CDC_Setup+0xb4>
 8005218:	2b20      	cmp	r3, #32
 800521a:	f040 809f 	bne.w	800535c <USBD_CDC_Setup+0x178>
  {
    case USB_REQ_TYPE_CLASS:
      if (req->wLength != 0U)
 800521e:	683b      	ldr	r3, [r7, #0]
 8005220:	88db      	ldrh	r3, [r3, #6]
 8005222:	2b00      	cmp	r3, #0
 8005224:	d02e      	beq.n	8005284 <USBD_CDC_Setup+0xa0>
      {
        if ((req->bmRequest & 0x80U) != 0U)
 8005226:	683b      	ldr	r3, [r7, #0]
 8005228:	781b      	ldrb	r3, [r3, #0]
 800522a:	b25b      	sxtb	r3, r3
 800522c:	2b00      	cmp	r3, #0
 800522e:	da16      	bge.n	800525e <USBD_CDC_Setup+0x7a>
        {
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 8005230:	687b      	ldr	r3, [r7, #4]
 8005232:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8005236:	689b      	ldr	r3, [r3, #8]
 8005238:	683a      	ldr	r2, [r7, #0]
 800523a:	7850      	ldrb	r0, [r2, #1]
                                                            (uint8_t *)hcdc->data,
 800523c:	6939      	ldr	r1, [r7, #16]
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 800523e:	683a      	ldr	r2, [r7, #0]
 8005240:	88d2      	ldrh	r2, [r2, #6]
 8005242:	4798      	blx	r3
                                                            req->wLength);

          len = MIN(CDC_REQ_MAX_DATA_SIZE, req->wLength);
 8005244:	683b      	ldr	r3, [r7, #0]
 8005246:	88db      	ldrh	r3, [r3, #6]
 8005248:	2b07      	cmp	r3, #7
 800524a:	bf28      	it	cs
 800524c:	2307      	movcs	r3, #7
 800524e:	81fb      	strh	r3, [r7, #14]
          (void)USBD_CtlSendData(pdev, (uint8_t *)hcdc->data, len);
 8005250:	693b      	ldr	r3, [r7, #16]
 8005252:	89fa      	ldrh	r2, [r7, #14]
 8005254:	4619      	mov	r1, r3
 8005256:	6878      	ldr	r0, [r7, #4]
 8005258:	f001 fb43 	bl	80068e2 <USBD_CtlSendData>
      else
      {
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
                                                          (uint8_t *)req, 0U);
      }
      break;
 800525c:	e085      	b.n	800536a <USBD_CDC_Setup+0x186>
          hcdc->CmdOpCode = req->bRequest;
 800525e:	683b      	ldr	r3, [r7, #0]
 8005260:	785a      	ldrb	r2, [r3, #1]
 8005262:	693b      	ldr	r3, [r7, #16]
 8005264:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
          hcdc->CmdLength = (uint8_t)req->wLength;
 8005268:	683b      	ldr	r3, [r7, #0]
 800526a:	88db      	ldrh	r3, [r3, #6]
 800526c:	b2da      	uxtb	r2, r3
 800526e:	693b      	ldr	r3, [r7, #16]
 8005270:	f883 2201 	strb.w	r2, [r3, #513]	; 0x201
          (void)USBD_CtlPrepareRx(pdev, (uint8_t *)hcdc->data, req->wLength);
 8005274:	6939      	ldr	r1, [r7, #16]
 8005276:	683b      	ldr	r3, [r7, #0]
 8005278:	88db      	ldrh	r3, [r3, #6]
 800527a:	461a      	mov	r2, r3
 800527c:	6878      	ldr	r0, [r7, #4]
 800527e:	f001 fb5c 	bl	800693a <USBD_CtlPrepareRx>
      break;
 8005282:	e072      	b.n	800536a <USBD_CDC_Setup+0x186>
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 8005284:	687b      	ldr	r3, [r7, #4]
 8005286:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800528a:	689b      	ldr	r3, [r3, #8]
 800528c:	683a      	ldr	r2, [r7, #0]
 800528e:	7850      	ldrb	r0, [r2, #1]
 8005290:	2200      	movs	r2, #0
 8005292:	6839      	ldr	r1, [r7, #0]
 8005294:	4798      	blx	r3
      break;
 8005296:	e068      	b.n	800536a <USBD_CDC_Setup+0x186>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8005298:	683b      	ldr	r3, [r7, #0]
 800529a:	785b      	ldrb	r3, [r3, #1]
 800529c:	2b0b      	cmp	r3, #11
 800529e:	d852      	bhi.n	8005346 <USBD_CDC_Setup+0x162>
 80052a0:	a201      	add	r2, pc, #4	; (adr r2, 80052a8 <USBD_CDC_Setup+0xc4>)
 80052a2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80052a6:	bf00      	nop
 80052a8:	080052d9 	.word	0x080052d9
 80052ac:	08005355 	.word	0x08005355
 80052b0:	08005347 	.word	0x08005347
 80052b4:	08005347 	.word	0x08005347
 80052b8:	08005347 	.word	0x08005347
 80052bc:	08005347 	.word	0x08005347
 80052c0:	08005347 	.word	0x08005347
 80052c4:	08005347 	.word	0x08005347
 80052c8:	08005347 	.word	0x08005347
 80052cc:	08005347 	.word	0x08005347
 80052d0:	08005303 	.word	0x08005303
 80052d4:	0800532d 	.word	0x0800532d
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80052d8:	687b      	ldr	r3, [r7, #4]
 80052da:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80052de:	b2db      	uxtb	r3, r3
 80052e0:	2b03      	cmp	r3, #3
 80052e2:	d107      	bne.n	80052f4 <USBD_CDC_Setup+0x110>
          {
            (void)USBD_CtlSendData(pdev, (uint8_t *)&status_info, 2U);
 80052e4:	f107 030a 	add.w	r3, r7, #10
 80052e8:	2202      	movs	r2, #2
 80052ea:	4619      	mov	r1, r3
 80052ec:	6878      	ldr	r0, [r7, #4]
 80052ee:	f001 faf8 	bl	80068e2 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 80052f2:	e032      	b.n	800535a <USBD_CDC_Setup+0x176>
            USBD_CtlError(pdev, req);
 80052f4:	6839      	ldr	r1, [r7, #0]
 80052f6:	6878      	ldr	r0, [r7, #4]
 80052f8:	f001 fa82 	bl	8006800 <USBD_CtlError>
            ret = USBD_FAIL;
 80052fc:	2303      	movs	r3, #3
 80052fe:	75fb      	strb	r3, [r7, #23]
          break;
 8005300:	e02b      	b.n	800535a <USBD_CDC_Setup+0x176>

        case USB_REQ_GET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8005302:	687b      	ldr	r3, [r7, #4]
 8005304:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8005308:	b2db      	uxtb	r3, r3
 800530a:	2b03      	cmp	r3, #3
 800530c:	d107      	bne.n	800531e <USBD_CDC_Setup+0x13a>
          {
            (void)USBD_CtlSendData(pdev, &ifalt, 1U);
 800530e:	f107 030d 	add.w	r3, r7, #13
 8005312:	2201      	movs	r2, #1
 8005314:	4619      	mov	r1, r3
 8005316:	6878      	ldr	r0, [r7, #4]
 8005318:	f001 fae3 	bl	80068e2 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 800531c:	e01d      	b.n	800535a <USBD_CDC_Setup+0x176>
            USBD_CtlError(pdev, req);
 800531e:	6839      	ldr	r1, [r7, #0]
 8005320:	6878      	ldr	r0, [r7, #4]
 8005322:	f001 fa6d 	bl	8006800 <USBD_CtlError>
            ret = USBD_FAIL;
 8005326:	2303      	movs	r3, #3
 8005328:	75fb      	strb	r3, [r7, #23]
          break;
 800532a:	e016      	b.n	800535a <USBD_CDC_Setup+0x176>

        case USB_REQ_SET_INTERFACE:
          if (pdev->dev_state != USBD_STATE_CONFIGURED)
 800532c:	687b      	ldr	r3, [r7, #4]
 800532e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8005332:	b2db      	uxtb	r3, r3
 8005334:	2b03      	cmp	r3, #3
 8005336:	d00f      	beq.n	8005358 <USBD_CDC_Setup+0x174>
          {
            USBD_CtlError(pdev, req);
 8005338:	6839      	ldr	r1, [r7, #0]
 800533a:	6878      	ldr	r0, [r7, #4]
 800533c:	f001 fa60 	bl	8006800 <USBD_CtlError>
            ret = USBD_FAIL;
 8005340:	2303      	movs	r3, #3
 8005342:	75fb      	strb	r3, [r7, #23]
          }
          break;
 8005344:	e008      	b.n	8005358 <USBD_CDC_Setup+0x174>

        case USB_REQ_CLEAR_FEATURE:
          break;

        default:
          USBD_CtlError(pdev, req);
 8005346:	6839      	ldr	r1, [r7, #0]
 8005348:	6878      	ldr	r0, [r7, #4]
 800534a:	f001 fa59 	bl	8006800 <USBD_CtlError>
          ret = USBD_FAIL;
 800534e:	2303      	movs	r3, #3
 8005350:	75fb      	strb	r3, [r7, #23]
          break;
 8005352:	e002      	b.n	800535a <USBD_CDC_Setup+0x176>
          break;
 8005354:	bf00      	nop
 8005356:	e008      	b.n	800536a <USBD_CDC_Setup+0x186>
          break;
 8005358:	bf00      	nop
      }
      break;
 800535a:	e006      	b.n	800536a <USBD_CDC_Setup+0x186>

    default:
      USBD_CtlError(pdev, req);
 800535c:	6839      	ldr	r1, [r7, #0]
 800535e:	6878      	ldr	r0, [r7, #4]
 8005360:	f001 fa4e 	bl	8006800 <USBD_CtlError>
      ret = USBD_FAIL;
 8005364:	2303      	movs	r3, #3
 8005366:	75fb      	strb	r3, [r7, #23]
      break;
 8005368:	bf00      	nop
  }

  return (uint8_t)ret;
 800536a:	7dfb      	ldrb	r3, [r7, #23]
}
 800536c:	4618      	mov	r0, r3
 800536e:	3718      	adds	r7, #24
 8005370:	46bd      	mov	sp, r7
 8005372:	bd80      	pop	{r7, pc}

08005374 <USBD_CDC_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8005374:	b580      	push	{r7, lr}
 8005376:	b084      	sub	sp, #16
 8005378:	af00      	add	r7, sp, #0
 800537a:	6078      	str	r0, [r7, #4]
 800537c:	460b      	mov	r3, r1
 800537e:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc;
  PCD_HandleTypeDef *hpcd = pdev->pData;
 8005380:	687b      	ldr	r3, [r7, #4]
 8005382:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 8005386:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassData == NULL)
 8005388:	687b      	ldr	r3, [r7, #4]
 800538a:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800538e:	2b00      	cmp	r3, #0
 8005390:	d101      	bne.n	8005396 <USBD_CDC_DataIn+0x22>
  {
    return (uint8_t)USBD_FAIL;
 8005392:	2303      	movs	r3, #3
 8005394:	e04f      	b.n	8005436 <USBD_CDC_DataIn+0xc2>
  }

  hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8005396:	687b      	ldr	r3, [r7, #4]
 8005398:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800539c:	60bb      	str	r3, [r7, #8]

  if ((pdev->ep_in[epnum].total_length > 0U) &&
 800539e:	78fa      	ldrb	r2, [r7, #3]
 80053a0:	6879      	ldr	r1, [r7, #4]
 80053a2:	4613      	mov	r3, r2
 80053a4:	009b      	lsls	r3, r3, #2
 80053a6:	4413      	add	r3, r2
 80053a8:	009b      	lsls	r3, r3, #2
 80053aa:	440b      	add	r3, r1
 80053ac:	3318      	adds	r3, #24
 80053ae:	681b      	ldr	r3, [r3, #0]
 80053b0:	2b00      	cmp	r3, #0
 80053b2:	d029      	beq.n	8005408 <USBD_CDC_DataIn+0x94>
      ((pdev->ep_in[epnum].total_length % hpcd->IN_ep[epnum].maxpacket) == 0U))
 80053b4:	78fa      	ldrb	r2, [r7, #3]
 80053b6:	6879      	ldr	r1, [r7, #4]
 80053b8:	4613      	mov	r3, r2
 80053ba:	009b      	lsls	r3, r3, #2
 80053bc:	4413      	add	r3, r2
 80053be:	009b      	lsls	r3, r3, #2
 80053c0:	440b      	add	r3, r1
 80053c2:	3318      	adds	r3, #24
 80053c4:	681a      	ldr	r2, [r3, #0]
 80053c6:	78f9      	ldrb	r1, [r7, #3]
 80053c8:	68f8      	ldr	r0, [r7, #12]
 80053ca:	460b      	mov	r3, r1
 80053cc:	00db      	lsls	r3, r3, #3
 80053ce:	1a5b      	subs	r3, r3, r1
 80053d0:	009b      	lsls	r3, r3, #2
 80053d2:	4403      	add	r3, r0
 80053d4:	3344      	adds	r3, #68	; 0x44
 80053d6:	681b      	ldr	r3, [r3, #0]
 80053d8:	fbb2 f1f3 	udiv	r1, r2, r3
 80053dc:	fb03 f301 	mul.w	r3, r3, r1
 80053e0:	1ad3      	subs	r3, r2, r3
  if ((pdev->ep_in[epnum].total_length > 0U) &&
 80053e2:	2b00      	cmp	r3, #0
 80053e4:	d110      	bne.n	8005408 <USBD_CDC_DataIn+0x94>
  {
    /* Update the packet total length */
    pdev->ep_in[epnum].total_length = 0U;
 80053e6:	78fa      	ldrb	r2, [r7, #3]
 80053e8:	6879      	ldr	r1, [r7, #4]
 80053ea:	4613      	mov	r3, r2
 80053ec:	009b      	lsls	r3, r3, #2
 80053ee:	4413      	add	r3, r2
 80053f0:	009b      	lsls	r3, r3, #2
 80053f2:	440b      	add	r3, r1
 80053f4:	3318      	adds	r3, #24
 80053f6:	2200      	movs	r2, #0
 80053f8:	601a      	str	r2, [r3, #0]

    /* Send ZLP */
    (void)USBD_LL_Transmit(pdev, epnum, NULL, 0U);
 80053fa:	78f9      	ldrb	r1, [r7, #3]
 80053fc:	2300      	movs	r3, #0
 80053fe:	2200      	movs	r2, #0
 8005400:	6878      	ldr	r0, [r7, #4]
 8005402:	f002 f859 	bl	80074b8 <USBD_LL_Transmit>
 8005406:	e015      	b.n	8005434 <USBD_CDC_DataIn+0xc0>
  }
  else
  {
    hcdc->TxState = 0U;
 8005408:	68bb      	ldr	r3, [r7, #8]
 800540a:	2200      	movs	r2, #0
 800540c:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214

    if (((USBD_CDC_ItfTypeDef *)pdev->pUserData)->TransmitCplt != NULL)
 8005410:	687b      	ldr	r3, [r7, #4]
 8005412:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8005416:	691b      	ldr	r3, [r3, #16]
 8005418:	2b00      	cmp	r3, #0
 800541a:	d00b      	beq.n	8005434 <USBD_CDC_DataIn+0xc0>
    {
      ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->TransmitCplt(hcdc->TxBuffer, &hcdc->TxLength, epnum);
 800541c:	687b      	ldr	r3, [r7, #4]
 800541e:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8005422:	691b      	ldr	r3, [r3, #16]
 8005424:	68ba      	ldr	r2, [r7, #8]
 8005426:	f8d2 0208 	ldr.w	r0, [r2, #520]	; 0x208
 800542a:	68ba      	ldr	r2, [r7, #8]
 800542c:	f502 7104 	add.w	r1, r2, #528	; 0x210
 8005430:	78fa      	ldrb	r2, [r7, #3]
 8005432:	4798      	blx	r3
    }
  }

  return (uint8_t)USBD_OK;
 8005434:	2300      	movs	r3, #0
}
 8005436:	4618      	mov	r0, r3
 8005438:	3710      	adds	r7, #16
 800543a:	46bd      	mov	sp, r7
 800543c:	bd80      	pop	{r7, pc}

0800543e <USBD_CDC_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 800543e:	b580      	push	{r7, lr}
 8005440:	b084      	sub	sp, #16
 8005442:	af00      	add	r7, sp, #0
 8005444:	6078      	str	r0, [r7, #4]
 8005446:	460b      	mov	r3, r1
 8005448:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 800544a:	687b      	ldr	r3, [r7, #4]
 800544c:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8005450:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassData == NULL)
 8005452:	687b      	ldr	r3, [r7, #4]
 8005454:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8005458:	2b00      	cmp	r3, #0
 800545a:	d101      	bne.n	8005460 <USBD_CDC_DataOut+0x22>
  {
    return (uint8_t)USBD_FAIL;
 800545c:	2303      	movs	r3, #3
 800545e:	e015      	b.n	800548c <USBD_CDC_DataOut+0x4e>
  }

  /* Get the received data length */
  hcdc->RxLength = USBD_LL_GetRxDataSize(pdev, epnum);
 8005460:	78fb      	ldrb	r3, [r7, #3]
 8005462:	4619      	mov	r1, r3
 8005464:	6878      	ldr	r0, [r7, #4]
 8005466:	f002 f897 	bl	8007598 <USBD_LL_GetRxDataSize>
 800546a:	4602      	mov	r2, r0
 800546c:	68fb      	ldr	r3, [r7, #12]
 800546e:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

  /* USB data will be immediately processed, this allow next USB traffic being
  NAKed till the end of the application Xfer */

  ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 8005472:	687b      	ldr	r3, [r7, #4]
 8005474:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8005478:	68db      	ldr	r3, [r3, #12]
 800547a:	68fa      	ldr	r2, [r7, #12]
 800547c:	f8d2 0204 	ldr.w	r0, [r2, #516]	; 0x204
 8005480:	68fa      	ldr	r2, [r7, #12]
 8005482:	f502 7203 	add.w	r2, r2, #524	; 0x20c
 8005486:	4611      	mov	r1, r2
 8005488:	4798      	blx	r3

  return (uint8_t)USBD_OK;
 800548a:	2300      	movs	r3, #0
}
 800548c:	4618      	mov	r0, r3
 800548e:	3710      	adds	r7, #16
 8005490:	46bd      	mov	sp, r7
 8005492:	bd80      	pop	{r7, pc}

08005494 <USBD_CDC_EP0_RxReady>:
  *         Handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t USBD_CDC_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 8005494:	b580      	push	{r7, lr}
 8005496:	b084      	sub	sp, #16
 8005498:	af00      	add	r7, sp, #0
 800549a:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 800549c:	687b      	ldr	r3, [r7, #4]
 800549e:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 80054a2:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 80054a4:	68fb      	ldr	r3, [r7, #12]
 80054a6:	2b00      	cmp	r3, #0
 80054a8:	d101      	bne.n	80054ae <USBD_CDC_EP0_RxReady+0x1a>
  {
    return (uint8_t)USBD_FAIL;
 80054aa:	2303      	movs	r3, #3
 80054ac:	e01b      	b.n	80054e6 <USBD_CDC_EP0_RxReady+0x52>
  }

  if ((pdev->pUserData != NULL) && (hcdc->CmdOpCode != 0xFFU))
 80054ae:	687b      	ldr	r3, [r7, #4]
 80054b0:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 80054b4:	2b00      	cmp	r3, #0
 80054b6:	d015      	beq.n	80054e4 <USBD_CDC_EP0_RxReady+0x50>
 80054b8:	68fb      	ldr	r3, [r7, #12]
 80054ba:	f893 3200 	ldrb.w	r3, [r3, #512]	; 0x200
 80054be:	2bff      	cmp	r3, #255	; 0xff
 80054c0:	d010      	beq.n	80054e4 <USBD_CDC_EP0_RxReady+0x50>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 80054c2:	687b      	ldr	r3, [r7, #4]
 80054c4:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 80054c8:	689b      	ldr	r3, [r3, #8]
 80054ca:	68fa      	ldr	r2, [r7, #12]
 80054cc:	f892 0200 	ldrb.w	r0, [r2, #512]	; 0x200
                                                      (uint8_t *)hcdc->data,
 80054d0:	68f9      	ldr	r1, [r7, #12]
                                                      (uint16_t)hcdc->CmdLength);
 80054d2:	68fa      	ldr	r2, [r7, #12]
 80054d4:	f892 2201 	ldrb.w	r2, [r2, #513]	; 0x201
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 80054d8:	b292      	uxth	r2, r2
 80054da:	4798      	blx	r3
    hcdc->CmdOpCode = 0xFFU;
 80054dc:	68fb      	ldr	r3, [r7, #12]
 80054de:	22ff      	movs	r2, #255	; 0xff
 80054e0:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
  }

  return (uint8_t)USBD_OK;
 80054e4:	2300      	movs	r3, #0
}
 80054e6:	4618      	mov	r0, r3
 80054e8:	3710      	adds	r7, #16
 80054ea:	46bd      	mov	sp, r7
 80054ec:	bd80      	pop	{r7, pc}
	...

080054f0 <USBD_CDC_GetFSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetFSCfgDesc(uint16_t *length)
{
 80054f0:	b480      	push	{r7}
 80054f2:	b083      	sub	sp, #12
 80054f4:	af00      	add	r7, sp, #0
 80054f6:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_CfgFSDesc);
 80054f8:	687b      	ldr	r3, [r7, #4]
 80054fa:	2243      	movs	r2, #67	; 0x43
 80054fc:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_CfgFSDesc;
 80054fe:	4b03      	ldr	r3, [pc, #12]	; (800550c <USBD_CDC_GetFSCfgDesc+0x1c>)
}
 8005500:	4618      	mov	r0, r3
 8005502:	370c      	adds	r7, #12
 8005504:	46bd      	mov	sp, r7
 8005506:	f85d 7b04 	ldr.w	r7, [sp], #4
 800550a:	4770      	bx	lr
 800550c:	20000094 	.word	0x20000094

08005510 <USBD_CDC_GetHSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetHSCfgDesc(uint16_t *length)
{
 8005510:	b480      	push	{r7}
 8005512:	b083      	sub	sp, #12
 8005514:	af00      	add	r7, sp, #0
 8005516:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_CfgHSDesc);
 8005518:	687b      	ldr	r3, [r7, #4]
 800551a:	2243      	movs	r2, #67	; 0x43
 800551c:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_CfgHSDesc;
 800551e:	4b03      	ldr	r3, [pc, #12]	; (800552c <USBD_CDC_GetHSCfgDesc+0x1c>)
}
 8005520:	4618      	mov	r0, r3
 8005522:	370c      	adds	r7, #12
 8005524:	46bd      	mov	sp, r7
 8005526:	f85d 7b04 	ldr.w	r7, [sp], #4
 800552a:	4770      	bx	lr
 800552c:	20000050 	.word	0x20000050

08005530 <USBD_CDC_GetOtherSpeedCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetOtherSpeedCfgDesc(uint16_t *length)
{
 8005530:	b480      	push	{r7}
 8005532:	b083      	sub	sp, #12
 8005534:	af00      	add	r7, sp, #0
 8005536:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_OtherSpeedCfgDesc);
 8005538:	687b      	ldr	r3, [r7, #4]
 800553a:	2243      	movs	r2, #67	; 0x43
 800553c:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_OtherSpeedCfgDesc;
 800553e:	4b03      	ldr	r3, [pc, #12]	; (800554c <USBD_CDC_GetOtherSpeedCfgDesc+0x1c>)
}
 8005540:	4618      	mov	r0, r3
 8005542:	370c      	adds	r7, #12
 8005544:	46bd      	mov	sp, r7
 8005546:	f85d 7b04 	ldr.w	r7, [sp], #4
 800554a:	4770      	bx	lr
 800554c:	200000d8 	.word	0x200000d8

08005550 <USBD_CDC_GetDeviceQualifierDescriptor>:
  *         return Device Qualifier descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
uint8_t *USBD_CDC_GetDeviceQualifierDescriptor(uint16_t *length)
{
 8005550:	b480      	push	{r7}
 8005552:	b083      	sub	sp, #12
 8005554:	af00      	add	r7, sp, #0
 8005556:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_DeviceQualifierDesc);
 8005558:	687b      	ldr	r3, [r7, #4]
 800555a:	220a      	movs	r2, #10
 800555c:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_DeviceQualifierDesc;
 800555e:	4b03      	ldr	r3, [pc, #12]	; (800556c <USBD_CDC_GetDeviceQualifierDescriptor+0x1c>)
}
 8005560:	4618      	mov	r0, r3
 8005562:	370c      	adds	r7, #12
 8005564:	46bd      	mov	sp, r7
 8005566:	f85d 7b04 	ldr.w	r7, [sp], #4
 800556a:	4770      	bx	lr
 800556c:	2000000c 	.word	0x2000000c

08005570 <USBD_CDC_RegisterInterface>:
  * @param  fops: CD  Interface callback
  * @retval status
  */
uint8_t USBD_CDC_RegisterInterface(USBD_HandleTypeDef *pdev,
                                   USBD_CDC_ItfTypeDef *fops)
{
 8005570:	b480      	push	{r7}
 8005572:	b083      	sub	sp, #12
 8005574:	af00      	add	r7, sp, #0
 8005576:	6078      	str	r0, [r7, #4]
 8005578:	6039      	str	r1, [r7, #0]
  if (fops == NULL)
 800557a:	683b      	ldr	r3, [r7, #0]
 800557c:	2b00      	cmp	r3, #0
 800557e:	d101      	bne.n	8005584 <USBD_CDC_RegisterInterface+0x14>
  {
    return (uint8_t)USBD_FAIL;
 8005580:	2303      	movs	r3, #3
 8005582:	e004      	b.n	800558e <USBD_CDC_RegisterInterface+0x1e>
  }

  pdev->pUserData = fops;
 8005584:	687b      	ldr	r3, [r7, #4]
 8005586:	683a      	ldr	r2, [r7, #0]
 8005588:	f8c3 22c0 	str.w	r2, [r3, #704]	; 0x2c0

  return (uint8_t)USBD_OK;
 800558c:	2300      	movs	r3, #0
}
 800558e:	4618      	mov	r0, r3
 8005590:	370c      	adds	r7, #12
 8005592:	46bd      	mov	sp, r7
 8005594:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005598:	4770      	bx	lr

0800559a <USBD_CDC_SetTxBuffer>:
  * @param  pbuff: Tx Buffer
  * @retval status
  */
uint8_t USBD_CDC_SetTxBuffer(USBD_HandleTypeDef *pdev,
                             uint8_t *pbuff, uint32_t length)
{
 800559a:	b480      	push	{r7}
 800559c:	b087      	sub	sp, #28
 800559e:	af00      	add	r7, sp, #0
 80055a0:	60f8      	str	r0, [r7, #12]
 80055a2:	60b9      	str	r1, [r7, #8]
 80055a4:	607a      	str	r2, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 80055a6:	68fb      	ldr	r3, [r7, #12]
 80055a8:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 80055ac:	617b      	str	r3, [r7, #20]

  if (hcdc == NULL)
 80055ae:	697b      	ldr	r3, [r7, #20]
 80055b0:	2b00      	cmp	r3, #0
 80055b2:	d101      	bne.n	80055b8 <USBD_CDC_SetTxBuffer+0x1e>
  {
    return (uint8_t)USBD_FAIL;
 80055b4:	2303      	movs	r3, #3
 80055b6:	e008      	b.n	80055ca <USBD_CDC_SetTxBuffer+0x30>
  }

  hcdc->TxBuffer = pbuff;
 80055b8:	697b      	ldr	r3, [r7, #20]
 80055ba:	68ba      	ldr	r2, [r7, #8]
 80055bc:	f8c3 2208 	str.w	r2, [r3, #520]	; 0x208
  hcdc->TxLength = length;
 80055c0:	697b      	ldr	r3, [r7, #20]
 80055c2:	687a      	ldr	r2, [r7, #4]
 80055c4:	f8c3 2210 	str.w	r2, [r3, #528]	; 0x210

  return (uint8_t)USBD_OK;
 80055c8:	2300      	movs	r3, #0
}
 80055ca:	4618      	mov	r0, r3
 80055cc:	371c      	adds	r7, #28
 80055ce:	46bd      	mov	sp, r7
 80055d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055d4:	4770      	bx	lr

080055d6 <USBD_CDC_SetRxBuffer>:
  * @param  pdev: device instance
  * @param  pbuff: Rx Buffer
  * @retval status
  */
uint8_t USBD_CDC_SetRxBuffer(USBD_HandleTypeDef *pdev, uint8_t *pbuff)
{
 80055d6:	b480      	push	{r7}
 80055d8:	b085      	sub	sp, #20
 80055da:	af00      	add	r7, sp, #0
 80055dc:	6078      	str	r0, [r7, #4]
 80055de:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 80055e0:	687b      	ldr	r3, [r7, #4]
 80055e2:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 80055e6:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 80055e8:	68fb      	ldr	r3, [r7, #12]
 80055ea:	2b00      	cmp	r3, #0
 80055ec:	d101      	bne.n	80055f2 <USBD_CDC_SetRxBuffer+0x1c>
  {
    return (uint8_t)USBD_FAIL;
 80055ee:	2303      	movs	r3, #3
 80055f0:	e004      	b.n	80055fc <USBD_CDC_SetRxBuffer+0x26>
  }

  hcdc->RxBuffer = pbuff;
 80055f2:	68fb      	ldr	r3, [r7, #12]
 80055f4:	683a      	ldr	r2, [r7, #0]
 80055f6:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204

  return (uint8_t)USBD_OK;
 80055fa:	2300      	movs	r3, #0
}
 80055fc:	4618      	mov	r0, r3
 80055fe:	3714      	adds	r7, #20
 8005600:	46bd      	mov	sp, r7
 8005602:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005606:	4770      	bx	lr

08005608 <USBD_CDC_TransmitPacket>:
  *         Transmit packet on IN endpoint
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_TransmitPacket(USBD_HandleTypeDef *pdev)
{
 8005608:	b580      	push	{r7, lr}
 800560a:	b084      	sub	sp, #16
 800560c:	af00      	add	r7, sp, #0
 800560e:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8005610:	687b      	ldr	r3, [r7, #4]
 8005612:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8005616:	60bb      	str	r3, [r7, #8]
  USBD_StatusTypeDef ret = USBD_BUSY;
 8005618:	2301      	movs	r3, #1
 800561a:	73fb      	strb	r3, [r7, #15]

  if (pdev->pClassData == NULL)
 800561c:	687b      	ldr	r3, [r7, #4]
 800561e:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8005622:	2b00      	cmp	r3, #0
 8005624:	d101      	bne.n	800562a <USBD_CDC_TransmitPacket+0x22>
  {
    return (uint8_t)USBD_FAIL;
 8005626:	2303      	movs	r3, #3
 8005628:	e01a      	b.n	8005660 <USBD_CDC_TransmitPacket+0x58>
  }

  if (hcdc->TxState == 0U)
 800562a:	68bb      	ldr	r3, [r7, #8]
 800562c:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 8005630:	2b00      	cmp	r3, #0
 8005632:	d114      	bne.n	800565e <USBD_CDC_TransmitPacket+0x56>
  {
    /* Tx Transfer in progress */
    hcdc->TxState = 1U;
 8005634:	68bb      	ldr	r3, [r7, #8]
 8005636:	2201      	movs	r2, #1
 8005638:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214

    /* Update the packet total length */
    pdev->ep_in[CDC_IN_EP & 0xFU].total_length = hcdc->TxLength;
 800563c:	68bb      	ldr	r3, [r7, #8]
 800563e:	f8d3 2210 	ldr.w	r2, [r3, #528]	; 0x210
 8005642:	687b      	ldr	r3, [r7, #4]
 8005644:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Transmit next packet */
    (void)USBD_LL_Transmit(pdev, CDC_IN_EP, hcdc->TxBuffer, hcdc->TxLength);
 8005646:	68bb      	ldr	r3, [r7, #8]
 8005648:	f8d3 2208 	ldr.w	r2, [r3, #520]	; 0x208
 800564c:	68bb      	ldr	r3, [r7, #8]
 800564e:	f8d3 3210 	ldr.w	r3, [r3, #528]	; 0x210
 8005652:	2181      	movs	r1, #129	; 0x81
 8005654:	6878      	ldr	r0, [r7, #4]
 8005656:	f001 ff2f 	bl	80074b8 <USBD_LL_Transmit>

    ret = USBD_OK;
 800565a:	2300      	movs	r3, #0
 800565c:	73fb      	strb	r3, [r7, #15]
  }

  return (uint8_t)ret;
 800565e:	7bfb      	ldrb	r3, [r7, #15]
}
 8005660:	4618      	mov	r0, r3
 8005662:	3710      	adds	r7, #16
 8005664:	46bd      	mov	sp, r7
 8005666:	bd80      	pop	{r7, pc}

08005668 <USBD_CDC_ReceivePacket>:
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{
 8005668:	b580      	push	{r7, lr}
 800566a:	b084      	sub	sp, #16
 800566c:	af00      	add	r7, sp, #0
 800566e:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8005670:	687b      	ldr	r3, [r7, #4]
 8005672:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8005676:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassData == NULL)
 8005678:	687b      	ldr	r3, [r7, #4]
 800567a:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800567e:	2b00      	cmp	r3, #0
 8005680:	d101      	bne.n	8005686 <USBD_CDC_ReceivePacket+0x1e>
  {
    return (uint8_t)USBD_FAIL;
 8005682:	2303      	movs	r3, #3
 8005684:	e016      	b.n	80056b4 <USBD_CDC_ReceivePacket+0x4c>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8005686:	687b      	ldr	r3, [r7, #4]
 8005688:	7c1b      	ldrb	r3, [r3, #16]
 800568a:	2b00      	cmp	r3, #0
 800568c:	d109      	bne.n	80056a2 <USBD_CDC_ReceivePacket+0x3a>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 800568e:	68fb      	ldr	r3, [r7, #12]
 8005690:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8005694:	f44f 7300 	mov.w	r3, #512	; 0x200
 8005698:	2101      	movs	r1, #1
 800569a:	6878      	ldr	r0, [r7, #4]
 800569c:	f001 ff44 	bl	8007528 <USBD_LL_PrepareReceive>
 80056a0:	e007      	b.n	80056b2 <USBD_CDC_ReceivePacket+0x4a>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 80056a2:	68fb      	ldr	r3, [r7, #12]
 80056a4:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 80056a8:	2340      	movs	r3, #64	; 0x40
 80056aa:	2101      	movs	r1, #1
 80056ac:	6878      	ldr	r0, [r7, #4]
 80056ae:	f001 ff3b 	bl	8007528 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 80056b2:	2300      	movs	r3, #0
}
 80056b4:	4618      	mov	r0, r3
 80056b6:	3710      	adds	r7, #16
 80056b8:	46bd      	mov	sp, r7
 80056ba:	bd80      	pop	{r7, pc}

080056bc <USBD_Init>:
  * @param  id: Low level core index
  * @retval None
  */
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 80056bc:	b580      	push	{r7, lr}
 80056be:	b086      	sub	sp, #24
 80056c0:	af00      	add	r7, sp, #0
 80056c2:	60f8      	str	r0, [r7, #12]
 80056c4:	60b9      	str	r1, [r7, #8]
 80056c6:	4613      	mov	r3, r2
 80056c8:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef ret;

  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 80056ca:	68fb      	ldr	r3, [r7, #12]
 80056cc:	2b00      	cmp	r3, #0
 80056ce:	d101      	bne.n	80056d4 <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif
    return USBD_FAIL;
 80056d0:	2303      	movs	r3, #3
 80056d2:	e01f      	b.n	8005714 <USBD_Init+0x58>
  }

  /* Unlink previous class resources */
  pdev->pClass = NULL;
 80056d4:	68fb      	ldr	r3, [r7, #12]
 80056d6:	2200      	movs	r2, #0
 80056d8:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  pdev->pUserData = NULL;
 80056dc:	68fb      	ldr	r3, [r7, #12]
 80056de:	2200      	movs	r2, #0
 80056e0:	f8c3 22c0 	str.w	r2, [r3, #704]	; 0x2c0
  pdev->pConfDesc = NULL;
 80056e4:	68fb      	ldr	r3, [r7, #12]
 80056e6:	2200      	movs	r2, #0
 80056e8:	f8c3 22cc 	str.w	r2, [r3, #716]	; 0x2cc

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 80056ec:	68bb      	ldr	r3, [r7, #8]
 80056ee:	2b00      	cmp	r3, #0
 80056f0:	d003      	beq.n	80056fa <USBD_Init+0x3e>
  {
    pdev->pDesc = pdesc;
 80056f2:	68fb      	ldr	r3, [r7, #12]
 80056f4:	68ba      	ldr	r2, [r7, #8]
 80056f6:	f8c3 22b4 	str.w	r2, [r3, #692]	; 0x2b4
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 80056fa:	68fb      	ldr	r3, [r7, #12]
 80056fc:	2201      	movs	r2, #1
 80056fe:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->id = id;
 8005702:	68fb      	ldr	r3, [r7, #12]
 8005704:	79fa      	ldrb	r2, [r7, #7]
 8005706:	701a      	strb	r2, [r3, #0]

  /* Initialize low level driver */
  ret = USBD_LL_Init(pdev);
 8005708:	68f8      	ldr	r0, [r7, #12]
 800570a:	f001 fd17 	bl	800713c <USBD_LL_Init>
 800570e:	4603      	mov	r3, r0
 8005710:	75fb      	strb	r3, [r7, #23]

  return ret;
 8005712:	7dfb      	ldrb	r3, [r7, #23]
}
 8005714:	4618      	mov	r0, r3
 8005716:	3718      	adds	r7, #24
 8005718:	46bd      	mov	sp, r7
 800571a:	bd80      	pop	{r7, pc}

0800571c <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 800571c:	b580      	push	{r7, lr}
 800571e:	b084      	sub	sp, #16
 8005720:	af00      	add	r7, sp, #0
 8005722:	6078      	str	r0, [r7, #4]
 8005724:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 8005726:	2300      	movs	r3, #0
 8005728:	81fb      	strh	r3, [r7, #14]

  if (pclass == NULL)
 800572a:	683b      	ldr	r3, [r7, #0]
 800572c:	2b00      	cmp	r3, #0
 800572e:	d101      	bne.n	8005734 <USBD_RegisterClass+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif
    return USBD_FAIL;
 8005730:	2303      	movs	r3, #3
 8005732:	e016      	b.n	8005762 <USBD_RegisterClass+0x46>
  }

  /* link the class to the USB Device handle */
  pdev->pClass = pclass;
 8005734:	687b      	ldr	r3, [r7, #4]
 8005736:	683a      	ldr	r2, [r7, #0]
 8005738:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  if (pdev->pClass->GetHSConfigDescriptor != NULL)
  {
    pdev->pConfDesc = (void *)pdev->pClass->GetHSConfigDescriptor(&len);
  }
#else /* Default USE_USB_FS */
  if (pdev->pClass->GetFSConfigDescriptor != NULL)
 800573c:	687b      	ldr	r3, [r7, #4]
 800573e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005742:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005744:	2b00      	cmp	r3, #0
 8005746:	d00b      	beq.n	8005760 <USBD_RegisterClass+0x44>
  {
    pdev->pConfDesc = (void *)pdev->pClass->GetFSConfigDescriptor(&len);
 8005748:	687b      	ldr	r3, [r7, #4]
 800574a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800574e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005750:	f107 020e 	add.w	r2, r7, #14
 8005754:	4610      	mov	r0, r2
 8005756:	4798      	blx	r3
 8005758:	4602      	mov	r2, r0
 800575a:	687b      	ldr	r3, [r7, #4]
 800575c:	f8c3 22cc 	str.w	r2, [r3, #716]	; 0x2cc
  }
#endif /* USE_USB_FS */

  return USBD_OK;
 8005760:	2300      	movs	r3, #0
}
 8005762:	4618      	mov	r0, r3
 8005764:	3710      	adds	r7, #16
 8005766:	46bd      	mov	sp, r7
 8005768:	bd80      	pop	{r7, pc}

0800576a <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_Start(USBD_HandleTypeDef *pdev)
{
 800576a:	b580      	push	{r7, lr}
 800576c:	b082      	sub	sp, #8
 800576e:	af00      	add	r7, sp, #0
 8005770:	6078      	str	r0, [r7, #4]
  /* Start the low level driver  */
  return USBD_LL_Start(pdev);
 8005772:	6878      	ldr	r0, [r7, #4]
 8005774:	f001 fd2c 	bl	80071d0 <USBD_LL_Start>
 8005778:	4603      	mov	r3, r0
}
 800577a:	4618      	mov	r0, r3
 800577c:	3708      	adds	r7, #8
 800577e:	46bd      	mov	sp, r7
 8005780:	bd80      	pop	{r7, pc}

08005782 <USBD_RunTestMode>:
  *         Launch test mode process
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_RunTestMode(USBD_HandleTypeDef  *pdev)
{
 8005782:	b480      	push	{r7}
 8005784:	b083      	sub	sp, #12
 8005786:	af00      	add	r7, sp, #0
 8005788:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 800578a:	2300      	movs	r3, #0
}
 800578c:	4618      	mov	r0, r3
 800578e:	370c      	adds	r7, #12
 8005790:	46bd      	mov	sp, r7
 8005792:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005796:	4770      	bx	lr

08005798 <USBD_SetClassConfig>:
  * @param  cfgidx: configuration index
  * @retval status
  */

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8005798:	b580      	push	{r7, lr}
 800579a:	b084      	sub	sp, #16
 800579c:	af00      	add	r7, sp, #0
 800579e:	6078      	str	r0, [r7, #4]
 80057a0:	460b      	mov	r3, r1
 80057a2:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_FAIL;
 80057a4:	2303      	movs	r3, #3
 80057a6:	73fb      	strb	r3, [r7, #15]

  if (pdev->pClass != NULL)
 80057a8:	687b      	ldr	r3, [r7, #4]
 80057aa:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80057ae:	2b00      	cmp	r3, #0
 80057b0:	d009      	beq.n	80057c6 <USBD_SetClassConfig+0x2e>
  {
    /* Set configuration and Start the Class */
    ret = (USBD_StatusTypeDef)pdev->pClass->Init(pdev, cfgidx);
 80057b2:	687b      	ldr	r3, [r7, #4]
 80057b4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80057b8:	681b      	ldr	r3, [r3, #0]
 80057ba:	78fa      	ldrb	r2, [r7, #3]
 80057bc:	4611      	mov	r1, r2
 80057be:	6878      	ldr	r0, [r7, #4]
 80057c0:	4798      	blx	r3
 80057c2:	4603      	mov	r3, r0
 80057c4:	73fb      	strb	r3, [r7, #15]
  }

  return ret;
 80057c6:	7bfb      	ldrb	r3, [r7, #15]
}
 80057c8:	4618      	mov	r0, r3
 80057ca:	3710      	adds	r7, #16
 80057cc:	46bd      	mov	sp, r7
 80057ce:	bd80      	pop	{r7, pc}

080057d0 <USBD_ClrClassConfig>:
  * @param  pdev: device instance
  * @param  cfgidx: configuration index
  * @retval status: USBD_StatusTypeDef
  */
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 80057d0:	b580      	push	{r7, lr}
 80057d2:	b082      	sub	sp, #8
 80057d4:	af00      	add	r7, sp, #0
 80057d6:	6078      	str	r0, [r7, #4]
 80057d8:	460b      	mov	r3, r1
 80057da:	70fb      	strb	r3, [r7, #3]
  /* Clear configuration and De-initialize the Class process */
  if (pdev->pClass != NULL)
 80057dc:	687b      	ldr	r3, [r7, #4]
 80057de:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80057e2:	2b00      	cmp	r3, #0
 80057e4:	d007      	beq.n	80057f6 <USBD_ClrClassConfig+0x26>
  {
    pdev->pClass->DeInit(pdev, cfgidx);
 80057e6:	687b      	ldr	r3, [r7, #4]
 80057e8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80057ec:	685b      	ldr	r3, [r3, #4]
 80057ee:	78fa      	ldrb	r2, [r7, #3]
 80057f0:	4611      	mov	r1, r2
 80057f2:	6878      	ldr	r0, [r7, #4]
 80057f4:	4798      	blx	r3
  }

  return USBD_OK;
 80057f6:	2300      	movs	r3, #0
}
 80057f8:	4618      	mov	r0, r3
 80057fa:	3708      	adds	r7, #8
 80057fc:	46bd      	mov	sp, r7
 80057fe:	bd80      	pop	{r7, pc}

08005800 <USBD_LL_SetupStage>:
  *         Handle the setup stage
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 8005800:	b580      	push	{r7, lr}
 8005802:	b084      	sub	sp, #16
 8005804:	af00      	add	r7, sp, #0
 8005806:	6078      	str	r0, [r7, #4]
 8005808:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret;

  USBD_ParseSetupRequest(&pdev->request, psetup);
 800580a:	687b      	ldr	r3, [r7, #4]
 800580c:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8005810:	6839      	ldr	r1, [r7, #0]
 8005812:	4618      	mov	r0, r3
 8005814:	f000 ffba 	bl	800678c <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 8005818:	687b      	ldr	r3, [r7, #4]
 800581a:	2201      	movs	r2, #1
 800581c:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 8005820:	687b      	ldr	r3, [r7, #4]
 8005822:	f8b3 32b0 	ldrh.w	r3, [r3, #688]	; 0x2b0
 8005826:	461a      	mov	r2, r3
 8005828:	687b      	ldr	r3, [r7, #4]
 800582a:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 800582e:	687b      	ldr	r3, [r7, #4]
 8005830:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 8005834:	f003 031f 	and.w	r3, r3, #31
 8005838:	2b02      	cmp	r3, #2
 800583a:	d01a      	beq.n	8005872 <USBD_LL_SetupStage+0x72>
 800583c:	2b02      	cmp	r3, #2
 800583e:	d822      	bhi.n	8005886 <USBD_LL_SetupStage+0x86>
 8005840:	2b00      	cmp	r3, #0
 8005842:	d002      	beq.n	800584a <USBD_LL_SetupStage+0x4a>
 8005844:	2b01      	cmp	r3, #1
 8005846:	d00a      	beq.n	800585e <USBD_LL_SetupStage+0x5e>
 8005848:	e01d      	b.n	8005886 <USBD_LL_SetupStage+0x86>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      ret = USBD_StdDevReq(pdev, &pdev->request);
 800584a:	687b      	ldr	r3, [r7, #4]
 800584c:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8005850:	4619      	mov	r1, r3
 8005852:	6878      	ldr	r0, [r7, #4]
 8005854:	f000 fa62 	bl	8005d1c <USBD_StdDevReq>
 8005858:	4603      	mov	r3, r0
 800585a:	73fb      	strb	r3, [r7, #15]
      break;
 800585c:	e020      	b.n	80058a0 <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_INTERFACE:
      ret = USBD_StdItfReq(pdev, &pdev->request);
 800585e:	687b      	ldr	r3, [r7, #4]
 8005860:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8005864:	4619      	mov	r1, r3
 8005866:	6878      	ldr	r0, [r7, #4]
 8005868:	f000 fac6 	bl	8005df8 <USBD_StdItfReq>
 800586c:	4603      	mov	r3, r0
 800586e:	73fb      	strb	r3, [r7, #15]
      break;
 8005870:	e016      	b.n	80058a0 <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_ENDPOINT:
      ret = USBD_StdEPReq(pdev, &pdev->request);
 8005872:	687b      	ldr	r3, [r7, #4]
 8005874:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8005878:	4619      	mov	r1, r3
 800587a:	6878      	ldr	r0, [r7, #4]
 800587c:	f000 fb05 	bl	8005e8a <USBD_StdEPReq>
 8005880:	4603      	mov	r3, r0
 8005882:	73fb      	strb	r3, [r7, #15]
      break;
 8005884:	e00c      	b.n	80058a0 <USBD_LL_SetupStage+0xa0>

    default:
      ret = USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 8005886:	687b      	ldr	r3, [r7, #4]
 8005888:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 800588c:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8005890:	b2db      	uxtb	r3, r3
 8005892:	4619      	mov	r1, r3
 8005894:	6878      	ldr	r0, [r7, #4]
 8005896:	f001 fd41 	bl	800731c <USBD_LL_StallEP>
 800589a:	4603      	mov	r3, r0
 800589c:	73fb      	strb	r3, [r7, #15]
      break;
 800589e:	bf00      	nop
  }

  return ret;
 80058a0:	7bfb      	ldrb	r3, [r7, #15]
}
 80058a2:	4618      	mov	r0, r3
 80058a4:	3710      	adds	r7, #16
 80058a6:	46bd      	mov	sp, r7
 80058a8:	bd80      	pop	{r7, pc}

080058aa <USBD_LL_DataOutStage>:
  * @param  pdata: data pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 80058aa:	b580      	push	{r7, lr}
 80058ac:	b086      	sub	sp, #24
 80058ae:	af00      	add	r7, sp, #0
 80058b0:	60f8      	str	r0, [r7, #12]
 80058b2:	460b      	mov	r3, r1
 80058b4:	607a      	str	r2, [r7, #4]
 80058b6:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;

  if (epnum == 0U)
 80058b8:	7afb      	ldrb	r3, [r7, #11]
 80058ba:	2b00      	cmp	r3, #0
 80058bc:	d138      	bne.n	8005930 <USBD_LL_DataOutStage+0x86>
  {
    pep = &pdev->ep_out[0];
 80058be:	68fb      	ldr	r3, [r7, #12]
 80058c0:	f503 73aa 	add.w	r3, r3, #340	; 0x154
 80058c4:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 80058c6:	68fb      	ldr	r3, [r7, #12]
 80058c8:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 80058cc:	2b03      	cmp	r3, #3
 80058ce:	d14a      	bne.n	8005966 <USBD_LL_DataOutStage+0xbc>
    {
      if (pep->rem_length > pep->maxpacket)
 80058d0:	693b      	ldr	r3, [r7, #16]
 80058d2:	689a      	ldr	r2, [r3, #8]
 80058d4:	693b      	ldr	r3, [r7, #16]
 80058d6:	68db      	ldr	r3, [r3, #12]
 80058d8:	429a      	cmp	r2, r3
 80058da:	d913      	bls.n	8005904 <USBD_LL_DataOutStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 80058dc:	693b      	ldr	r3, [r7, #16]
 80058de:	689a      	ldr	r2, [r3, #8]
 80058e0:	693b      	ldr	r3, [r7, #16]
 80058e2:	68db      	ldr	r3, [r3, #12]
 80058e4:	1ad2      	subs	r2, r2, r3
 80058e6:	693b      	ldr	r3, [r7, #16]
 80058e8:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueRx(pdev, pdata, MIN(pep->rem_length, pep->maxpacket));
 80058ea:	693b      	ldr	r3, [r7, #16]
 80058ec:	68da      	ldr	r2, [r3, #12]
 80058ee:	693b      	ldr	r3, [r7, #16]
 80058f0:	689b      	ldr	r3, [r3, #8]
 80058f2:	4293      	cmp	r3, r2
 80058f4:	bf28      	it	cs
 80058f6:	4613      	movcs	r3, r2
 80058f8:	461a      	mov	r2, r3
 80058fa:	6879      	ldr	r1, [r7, #4]
 80058fc:	68f8      	ldr	r0, [r7, #12]
 80058fe:	f001 f839 	bl	8006974 <USBD_CtlContinueRx>
 8005902:	e030      	b.n	8005966 <USBD_LL_DataOutStage+0xbc>
      }
      else
      {
        if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8005904:	68fb      	ldr	r3, [r7, #12]
 8005906:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800590a:	b2db      	uxtb	r3, r3
 800590c:	2b03      	cmp	r3, #3
 800590e:	d10b      	bne.n	8005928 <USBD_LL_DataOutStage+0x7e>
        {
          if (pdev->pClass->EP0_RxReady != NULL)
 8005910:	68fb      	ldr	r3, [r7, #12]
 8005912:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005916:	691b      	ldr	r3, [r3, #16]
 8005918:	2b00      	cmp	r3, #0
 800591a:	d005      	beq.n	8005928 <USBD_LL_DataOutStage+0x7e>
          {
            pdev->pClass->EP0_RxReady(pdev);
 800591c:	68fb      	ldr	r3, [r7, #12]
 800591e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005922:	691b      	ldr	r3, [r3, #16]
 8005924:	68f8      	ldr	r0, [r7, #12]
 8005926:	4798      	blx	r3
          }
        }

        (void)USBD_CtlSendStatus(pdev);
 8005928:	68f8      	ldr	r0, [r7, #12]
 800592a:	f001 f834 	bl	8006996 <USBD_CtlSendStatus>
 800592e:	e01a      	b.n	8005966 <USBD_LL_DataOutStage+0xbc>
#endif
    }
  }
  else
  {
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8005930:	68fb      	ldr	r3, [r7, #12]
 8005932:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8005936:	b2db      	uxtb	r3, r3
 8005938:	2b03      	cmp	r3, #3
 800593a:	d114      	bne.n	8005966 <USBD_LL_DataOutStage+0xbc>
    {
      if (pdev->pClass->DataOut != NULL)
 800593c:	68fb      	ldr	r3, [r7, #12]
 800593e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005942:	699b      	ldr	r3, [r3, #24]
 8005944:	2b00      	cmp	r3, #0
 8005946:	d00e      	beq.n	8005966 <USBD_LL_DataOutStage+0xbc>
      {
        ret = (USBD_StatusTypeDef)pdev->pClass->DataOut(pdev, epnum);
 8005948:	68fb      	ldr	r3, [r7, #12]
 800594a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800594e:	699b      	ldr	r3, [r3, #24]
 8005950:	7afa      	ldrb	r2, [r7, #11]
 8005952:	4611      	mov	r1, r2
 8005954:	68f8      	ldr	r0, [r7, #12]
 8005956:	4798      	blx	r3
 8005958:	4603      	mov	r3, r0
 800595a:	75fb      	strb	r3, [r7, #23]

        if (ret != USBD_OK)
 800595c:	7dfb      	ldrb	r3, [r7, #23]
 800595e:	2b00      	cmp	r3, #0
 8005960:	d001      	beq.n	8005966 <USBD_LL_DataOutStage+0xbc>
        {
          return ret;
 8005962:	7dfb      	ldrb	r3, [r7, #23]
 8005964:	e000      	b.n	8005968 <USBD_LL_DataOutStage+0xbe>
        }
      }
    }
  }

  return USBD_OK;
 8005966:	2300      	movs	r3, #0
}
 8005968:	4618      	mov	r0, r3
 800596a:	3718      	adds	r7, #24
 800596c:	46bd      	mov	sp, r7
 800596e:	bd80      	pop	{r7, pc}

08005970 <USBD_LL_DataInStage>:
  * @param  epnum: endpoint index
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 8005970:	b580      	push	{r7, lr}
 8005972:	b086      	sub	sp, #24
 8005974:	af00      	add	r7, sp, #0
 8005976:	60f8      	str	r0, [r7, #12]
 8005978:	460b      	mov	r3, r1
 800597a:	607a      	str	r2, [r7, #4]
 800597c:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;

  if (epnum == 0U)
 800597e:	7afb      	ldrb	r3, [r7, #11]
 8005980:	2b00      	cmp	r3, #0
 8005982:	d16b      	bne.n	8005a5c <USBD_LL_DataInStage+0xec>
  {
    pep = &pdev->ep_in[0];
 8005984:	68fb      	ldr	r3, [r7, #12]
 8005986:	3314      	adds	r3, #20
 8005988:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 800598a:	68fb      	ldr	r3, [r7, #12]
 800598c:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8005990:	2b02      	cmp	r3, #2
 8005992:	d156      	bne.n	8005a42 <USBD_LL_DataInStage+0xd2>
    {
      if (pep->rem_length > pep->maxpacket)
 8005994:	693b      	ldr	r3, [r7, #16]
 8005996:	689a      	ldr	r2, [r3, #8]
 8005998:	693b      	ldr	r3, [r7, #16]
 800599a:	68db      	ldr	r3, [r3, #12]
 800599c:	429a      	cmp	r2, r3
 800599e:	d914      	bls.n	80059ca <USBD_LL_DataInStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 80059a0:	693b      	ldr	r3, [r7, #16]
 80059a2:	689a      	ldr	r2, [r3, #8]
 80059a4:	693b      	ldr	r3, [r7, #16]
 80059a6:	68db      	ldr	r3, [r3, #12]
 80059a8:	1ad2      	subs	r2, r2, r3
 80059aa:	693b      	ldr	r3, [r7, #16]
 80059ac:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueSendData(pdev, pdata, pep->rem_length);
 80059ae:	693b      	ldr	r3, [r7, #16]
 80059b0:	689b      	ldr	r3, [r3, #8]
 80059b2:	461a      	mov	r2, r3
 80059b4:	6879      	ldr	r1, [r7, #4]
 80059b6:	68f8      	ldr	r0, [r7, #12]
 80059b8:	f000 ffae 	bl	8006918 <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 80059bc:	2300      	movs	r3, #0
 80059be:	2200      	movs	r2, #0
 80059c0:	2100      	movs	r1, #0
 80059c2:	68f8      	ldr	r0, [r7, #12]
 80059c4:	f001 fdb0 	bl	8007528 <USBD_LL_PrepareReceive>
 80059c8:	e03b      	b.n	8005a42 <USBD_LL_DataInStage+0xd2>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->maxpacket == pep->rem_length) &&
 80059ca:	693b      	ldr	r3, [r7, #16]
 80059cc:	68da      	ldr	r2, [r3, #12]
 80059ce:	693b      	ldr	r3, [r7, #16]
 80059d0:	689b      	ldr	r3, [r3, #8]
 80059d2:	429a      	cmp	r2, r3
 80059d4:	d11c      	bne.n	8005a10 <USBD_LL_DataInStage+0xa0>
            (pep->total_length >= pep->maxpacket) &&
 80059d6:	693b      	ldr	r3, [r7, #16]
 80059d8:	685a      	ldr	r2, [r3, #4]
 80059da:	693b      	ldr	r3, [r7, #16]
 80059dc:	68db      	ldr	r3, [r3, #12]
        if ((pep->maxpacket == pep->rem_length) &&
 80059de:	429a      	cmp	r2, r3
 80059e0:	d316      	bcc.n	8005a10 <USBD_LL_DataInStage+0xa0>
            (pep->total_length < pdev->ep0_data_len))
 80059e2:	693b      	ldr	r3, [r7, #16]
 80059e4:	685a      	ldr	r2, [r3, #4]
 80059e6:	68fb      	ldr	r3, [r7, #12]
 80059e8:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
            (pep->total_length >= pep->maxpacket) &&
 80059ec:	429a      	cmp	r2, r3
 80059ee:	d20f      	bcs.n	8005a10 <USBD_LL_DataInStage+0xa0>
        {
          (void)USBD_CtlContinueSendData(pdev, NULL, 0U);
 80059f0:	2200      	movs	r2, #0
 80059f2:	2100      	movs	r1, #0
 80059f4:	68f8      	ldr	r0, [r7, #12]
 80059f6:	f000 ff8f 	bl	8006918 <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 80059fa:	68fb      	ldr	r3, [r7, #12]
 80059fc:	2200      	movs	r2, #0
 80059fe:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

          /* Prepare endpoint for premature end of transfer */
          (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8005a02:	2300      	movs	r3, #0
 8005a04:	2200      	movs	r2, #0
 8005a06:	2100      	movs	r1, #0
 8005a08:	68f8      	ldr	r0, [r7, #12]
 8005a0a:	f001 fd8d 	bl	8007528 <USBD_LL_PrepareReceive>
 8005a0e:	e018      	b.n	8005a42 <USBD_LL_DataInStage+0xd2>
        }
        else
        {
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8005a10:	68fb      	ldr	r3, [r7, #12]
 8005a12:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8005a16:	b2db      	uxtb	r3, r3
 8005a18:	2b03      	cmp	r3, #3
 8005a1a:	d10b      	bne.n	8005a34 <USBD_LL_DataInStage+0xc4>
          {
            if (pdev->pClass->EP0_TxSent != NULL)
 8005a1c:	68fb      	ldr	r3, [r7, #12]
 8005a1e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005a22:	68db      	ldr	r3, [r3, #12]
 8005a24:	2b00      	cmp	r3, #0
 8005a26:	d005      	beq.n	8005a34 <USBD_LL_DataInStage+0xc4>
            {
              pdev->pClass->EP0_TxSent(pdev);
 8005a28:	68fb      	ldr	r3, [r7, #12]
 8005a2a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005a2e:	68db      	ldr	r3, [r3, #12]
 8005a30:	68f8      	ldr	r0, [r7, #12]
 8005a32:	4798      	blx	r3
            }
          }
          (void)USBD_LL_StallEP(pdev, 0x80U);
 8005a34:	2180      	movs	r1, #128	; 0x80
 8005a36:	68f8      	ldr	r0, [r7, #12]
 8005a38:	f001 fc70 	bl	800731c <USBD_LL_StallEP>
          (void)USBD_CtlReceiveStatus(pdev);
 8005a3c:	68f8      	ldr	r0, [r7, #12]
 8005a3e:	f000 ffbd 	bl	80069bc <USBD_CtlReceiveStatus>
        (void)USBD_LL_StallEP(pdev, 0x80U);
      }
#endif
    }

    if (pdev->dev_test_mode == 1U)
 8005a42:	68fb      	ldr	r3, [r7, #12]
 8005a44:	f893 32a0 	ldrb.w	r3, [r3, #672]	; 0x2a0
 8005a48:	2b01      	cmp	r3, #1
 8005a4a:	d122      	bne.n	8005a92 <USBD_LL_DataInStage+0x122>
    {
      (void)USBD_RunTestMode(pdev);
 8005a4c:	68f8      	ldr	r0, [r7, #12]
 8005a4e:	f7ff fe98 	bl	8005782 <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 8005a52:	68fb      	ldr	r3, [r7, #12]
 8005a54:	2200      	movs	r2, #0
 8005a56:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
 8005a5a:	e01a      	b.n	8005a92 <USBD_LL_DataInStage+0x122>
    }
  }
  else
  {
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8005a5c:	68fb      	ldr	r3, [r7, #12]
 8005a5e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8005a62:	b2db      	uxtb	r3, r3
 8005a64:	2b03      	cmp	r3, #3
 8005a66:	d114      	bne.n	8005a92 <USBD_LL_DataInStage+0x122>
    {
      if (pdev->pClass->DataIn != NULL)
 8005a68:	68fb      	ldr	r3, [r7, #12]
 8005a6a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005a6e:	695b      	ldr	r3, [r3, #20]
 8005a70:	2b00      	cmp	r3, #0
 8005a72:	d00e      	beq.n	8005a92 <USBD_LL_DataInStage+0x122>
      {
        ret = (USBD_StatusTypeDef)pdev->pClass->DataIn(pdev, epnum);
 8005a74:	68fb      	ldr	r3, [r7, #12]
 8005a76:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005a7a:	695b      	ldr	r3, [r3, #20]
 8005a7c:	7afa      	ldrb	r2, [r7, #11]
 8005a7e:	4611      	mov	r1, r2
 8005a80:	68f8      	ldr	r0, [r7, #12]
 8005a82:	4798      	blx	r3
 8005a84:	4603      	mov	r3, r0
 8005a86:	75fb      	strb	r3, [r7, #23]

        if (ret != USBD_OK)
 8005a88:	7dfb      	ldrb	r3, [r7, #23]
 8005a8a:	2b00      	cmp	r3, #0
 8005a8c:	d001      	beq.n	8005a92 <USBD_LL_DataInStage+0x122>
        {
          return ret;
 8005a8e:	7dfb      	ldrb	r3, [r7, #23]
 8005a90:	e000      	b.n	8005a94 <USBD_LL_DataInStage+0x124>
        }
      }
    }
  }

  return USBD_OK;
 8005a92:	2300      	movs	r3, #0
}
 8005a94:	4618      	mov	r0, r3
 8005a96:	3718      	adds	r7, #24
 8005a98:	46bd      	mov	sp, r7
 8005a9a:	bd80      	pop	{r7, pc}

08005a9c <USBD_LL_Reset>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 8005a9c:	b580      	push	{r7, lr}
 8005a9e:	b082      	sub	sp, #8
 8005aa0:	af00      	add	r7, sp, #0
 8005aa2:	6078      	str	r0, [r7, #4]
  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8005aa4:	687b      	ldr	r3, [r7, #4]
 8005aa6:	2201      	movs	r2, #1
 8005aa8:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 8005aac:	687b      	ldr	r3, [r7, #4]
 8005aae:	2200      	movs	r2, #0
 8005ab0:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->dev_config = 0U;
 8005ab4:	687b      	ldr	r3, [r7, #4]
 8005ab6:	2200      	movs	r2, #0
 8005ab8:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 8005aba:	687b      	ldr	r3, [r7, #4]
 8005abc:	2200      	movs	r2, #0
 8005abe:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4

  if (pdev->pClass == NULL)
 8005ac2:	687b      	ldr	r3, [r7, #4]
 8005ac4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005ac8:	2b00      	cmp	r3, #0
 8005aca:	d101      	bne.n	8005ad0 <USBD_LL_Reset+0x34>
  {
    return USBD_FAIL;
 8005acc:	2303      	movs	r3, #3
 8005ace:	e02f      	b.n	8005b30 <USBD_LL_Reset+0x94>
  }

  if (pdev->pClassData != NULL)
 8005ad0:	687b      	ldr	r3, [r7, #4]
 8005ad2:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8005ad6:	2b00      	cmp	r3, #0
 8005ad8:	d00f      	beq.n	8005afa <USBD_LL_Reset+0x5e>
  {
    if (pdev->pClass->DeInit != NULL)
 8005ada:	687b      	ldr	r3, [r7, #4]
 8005adc:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005ae0:	685b      	ldr	r3, [r3, #4]
 8005ae2:	2b00      	cmp	r3, #0
 8005ae4:	d009      	beq.n	8005afa <USBD_LL_Reset+0x5e>
    {
      (void)pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 8005ae6:	687b      	ldr	r3, [r7, #4]
 8005ae8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005aec:	685b      	ldr	r3, [r3, #4]
 8005aee:	687a      	ldr	r2, [r7, #4]
 8005af0:	6852      	ldr	r2, [r2, #4]
 8005af2:	b2d2      	uxtb	r2, r2
 8005af4:	4611      	mov	r1, r2
 8005af6:	6878      	ldr	r0, [r7, #4]
 8005af8:	4798      	blx	r3
    }
  }

  /* Open EP0 OUT */
  (void)USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8005afa:	2340      	movs	r3, #64	; 0x40
 8005afc:	2200      	movs	r2, #0
 8005afe:	2100      	movs	r1, #0
 8005b00:	6878      	ldr	r0, [r7, #4]
 8005b02:	f001 fb97 	bl	8007234 <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 8005b06:	687b      	ldr	r3, [r7, #4]
 8005b08:	2201      	movs	r2, #1
 8005b0a:	f8a3 2164 	strh.w	r2, [r3, #356]	; 0x164

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 8005b0e:	687b      	ldr	r3, [r7, #4]
 8005b10:	2240      	movs	r2, #64	; 0x40
 8005b12:	f8c3 2160 	str.w	r2, [r3, #352]	; 0x160

  /* Open EP0 IN */
  (void)USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8005b16:	2340      	movs	r3, #64	; 0x40
 8005b18:	2200      	movs	r2, #0
 8005b1a:	2180      	movs	r1, #128	; 0x80
 8005b1c:	6878      	ldr	r0, [r7, #4]
 8005b1e:	f001 fb89 	bl	8007234 <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 8005b22:	687b      	ldr	r3, [r7, #4]
 8005b24:	2201      	movs	r2, #1
 8005b26:	849a      	strh	r2, [r3, #36]	; 0x24

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 8005b28:	687b      	ldr	r3, [r7, #4]
 8005b2a:	2240      	movs	r2, #64	; 0x40
 8005b2c:	621a      	str	r2, [r3, #32]

  return USBD_OK;
 8005b2e:	2300      	movs	r3, #0
}
 8005b30:	4618      	mov	r0, r3
 8005b32:	3708      	adds	r7, #8
 8005b34:	46bd      	mov	sp, r7
 8005b36:	bd80      	pop	{r7, pc}

08005b38 <USBD_LL_SetSpeed>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 8005b38:	b480      	push	{r7}
 8005b3a:	b083      	sub	sp, #12
 8005b3c:	af00      	add	r7, sp, #0
 8005b3e:	6078      	str	r0, [r7, #4]
 8005b40:	460b      	mov	r3, r1
 8005b42:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 8005b44:	687b      	ldr	r3, [r7, #4]
 8005b46:	78fa      	ldrb	r2, [r7, #3]
 8005b48:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 8005b4a:	2300      	movs	r3, #0
}
 8005b4c:	4618      	mov	r0, r3
 8005b4e:	370c      	adds	r7, #12
 8005b50:	46bd      	mov	sp, r7
 8005b52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b56:	4770      	bx	lr

08005b58 <USBD_LL_Suspend>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 8005b58:	b480      	push	{r7}
 8005b5a:	b083      	sub	sp, #12
 8005b5c:	af00      	add	r7, sp, #0
 8005b5e:	6078      	str	r0, [r7, #4]
  pdev->dev_old_state = pdev->dev_state;
 8005b60:	687b      	ldr	r3, [r7, #4]
 8005b62:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8005b66:	b2da      	uxtb	r2, r3
 8005b68:	687b      	ldr	r3, [r7, #4]
 8005b6a:	f883 229d 	strb.w	r2, [r3, #669]	; 0x29d
  pdev->dev_state = USBD_STATE_SUSPENDED;
 8005b6e:	687b      	ldr	r3, [r7, #4]
 8005b70:	2204      	movs	r2, #4
 8005b72:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c

  return USBD_OK;
 8005b76:	2300      	movs	r3, #0
}
 8005b78:	4618      	mov	r0, r3
 8005b7a:	370c      	adds	r7, #12
 8005b7c:	46bd      	mov	sp, r7
 8005b7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b82:	4770      	bx	lr

08005b84 <USBD_LL_Resume>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 8005b84:	b480      	push	{r7}
 8005b86:	b083      	sub	sp, #12
 8005b88:	af00      	add	r7, sp, #0
 8005b8a:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 8005b8c:	687b      	ldr	r3, [r7, #4]
 8005b8e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8005b92:	b2db      	uxtb	r3, r3
 8005b94:	2b04      	cmp	r3, #4
 8005b96:	d106      	bne.n	8005ba6 <USBD_LL_Resume+0x22>
  {
    pdev->dev_state = pdev->dev_old_state;
 8005b98:	687b      	ldr	r3, [r7, #4]
 8005b9a:	f893 329d 	ldrb.w	r3, [r3, #669]	; 0x29d
 8005b9e:	b2da      	uxtb	r2, r3
 8005ba0:	687b      	ldr	r3, [r7, #4]
 8005ba2:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  }

  return USBD_OK;
 8005ba6:	2300      	movs	r3, #0
}
 8005ba8:	4618      	mov	r0, r3
 8005baa:	370c      	adds	r7, #12
 8005bac:	46bd      	mov	sp, r7
 8005bae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005bb2:	4770      	bx	lr

08005bb4 <USBD_LL_SOF>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 8005bb4:	b580      	push	{r7, lr}
 8005bb6:	b082      	sub	sp, #8
 8005bb8:	af00      	add	r7, sp, #0
 8005bba:	6078      	str	r0, [r7, #4]
  if (pdev->pClass == NULL)
 8005bbc:	687b      	ldr	r3, [r7, #4]
 8005bbe:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005bc2:	2b00      	cmp	r3, #0
 8005bc4:	d101      	bne.n	8005bca <USBD_LL_SOF+0x16>
  {
    return USBD_FAIL;
 8005bc6:	2303      	movs	r3, #3
 8005bc8:	e012      	b.n	8005bf0 <USBD_LL_SOF+0x3c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8005bca:	687b      	ldr	r3, [r7, #4]
 8005bcc:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8005bd0:	b2db      	uxtb	r3, r3
 8005bd2:	2b03      	cmp	r3, #3
 8005bd4:	d10b      	bne.n	8005bee <USBD_LL_SOF+0x3a>
  {
    if (pdev->pClass->SOF != NULL)
 8005bd6:	687b      	ldr	r3, [r7, #4]
 8005bd8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005bdc:	69db      	ldr	r3, [r3, #28]
 8005bde:	2b00      	cmp	r3, #0
 8005be0:	d005      	beq.n	8005bee <USBD_LL_SOF+0x3a>
    {
      (void)pdev->pClass->SOF(pdev);
 8005be2:	687b      	ldr	r3, [r7, #4]
 8005be4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005be8:	69db      	ldr	r3, [r3, #28]
 8005bea:	6878      	ldr	r0, [r7, #4]
 8005bec:	4798      	blx	r3
    }
  }

  return USBD_OK;
 8005bee:	2300      	movs	r3, #0
}
 8005bf0:	4618      	mov	r0, r3
 8005bf2:	3708      	adds	r7, #8
 8005bf4:	46bd      	mov	sp, r7
 8005bf6:	bd80      	pop	{r7, pc}

08005bf8 <USBD_LL_IsoINIncomplete>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoINIncomplete(USBD_HandleTypeDef *pdev,
                                           uint8_t epnum)
{
 8005bf8:	b580      	push	{r7, lr}
 8005bfa:	b082      	sub	sp, #8
 8005bfc:	af00      	add	r7, sp, #0
 8005bfe:	6078      	str	r0, [r7, #4]
 8005c00:	460b      	mov	r3, r1
 8005c02:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass == NULL)
 8005c04:	687b      	ldr	r3, [r7, #4]
 8005c06:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005c0a:	2b00      	cmp	r3, #0
 8005c0c:	d101      	bne.n	8005c12 <USBD_LL_IsoINIncomplete+0x1a>
  {
    return USBD_FAIL;
 8005c0e:	2303      	movs	r3, #3
 8005c10:	e014      	b.n	8005c3c <USBD_LL_IsoINIncomplete+0x44>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8005c12:	687b      	ldr	r3, [r7, #4]
 8005c14:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8005c18:	b2db      	uxtb	r3, r3
 8005c1a:	2b03      	cmp	r3, #3
 8005c1c:	d10d      	bne.n	8005c3a <USBD_LL_IsoINIncomplete+0x42>
  {
    if (pdev->pClass->IsoINIncomplete != NULL)
 8005c1e:	687b      	ldr	r3, [r7, #4]
 8005c20:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005c24:	6a1b      	ldr	r3, [r3, #32]
 8005c26:	2b00      	cmp	r3, #0
 8005c28:	d007      	beq.n	8005c3a <USBD_LL_IsoINIncomplete+0x42>
    {
      (void)pdev->pClass->IsoINIncomplete(pdev, epnum);
 8005c2a:	687b      	ldr	r3, [r7, #4]
 8005c2c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005c30:	6a1b      	ldr	r3, [r3, #32]
 8005c32:	78fa      	ldrb	r2, [r7, #3]
 8005c34:	4611      	mov	r1, r2
 8005c36:	6878      	ldr	r0, [r7, #4]
 8005c38:	4798      	blx	r3
    }
  }

  return USBD_OK;
 8005c3a:	2300      	movs	r3, #0
}
 8005c3c:	4618      	mov	r0, r3
 8005c3e:	3708      	adds	r7, #8
 8005c40:	46bd      	mov	sp, r7
 8005c42:	bd80      	pop	{r7, pc}

08005c44 <USBD_LL_IsoOUTIncomplete>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoOUTIncomplete(USBD_HandleTypeDef *pdev,
                                            uint8_t epnum)
{
 8005c44:	b580      	push	{r7, lr}
 8005c46:	b082      	sub	sp, #8
 8005c48:	af00      	add	r7, sp, #0
 8005c4a:	6078      	str	r0, [r7, #4]
 8005c4c:	460b      	mov	r3, r1
 8005c4e:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass == NULL)
 8005c50:	687b      	ldr	r3, [r7, #4]
 8005c52:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005c56:	2b00      	cmp	r3, #0
 8005c58:	d101      	bne.n	8005c5e <USBD_LL_IsoOUTIncomplete+0x1a>
  {
    return USBD_FAIL;
 8005c5a:	2303      	movs	r3, #3
 8005c5c:	e014      	b.n	8005c88 <USBD_LL_IsoOUTIncomplete+0x44>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8005c5e:	687b      	ldr	r3, [r7, #4]
 8005c60:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8005c64:	b2db      	uxtb	r3, r3
 8005c66:	2b03      	cmp	r3, #3
 8005c68:	d10d      	bne.n	8005c86 <USBD_LL_IsoOUTIncomplete+0x42>
  {
    if (pdev->pClass->IsoOUTIncomplete != NULL)
 8005c6a:	687b      	ldr	r3, [r7, #4]
 8005c6c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005c70:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005c72:	2b00      	cmp	r3, #0
 8005c74:	d007      	beq.n	8005c86 <USBD_LL_IsoOUTIncomplete+0x42>
    {
      (void)pdev->pClass->IsoOUTIncomplete(pdev, epnum);
 8005c76:	687b      	ldr	r3, [r7, #4]
 8005c78:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005c7c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005c7e:	78fa      	ldrb	r2, [r7, #3]
 8005c80:	4611      	mov	r1, r2
 8005c82:	6878      	ldr	r0, [r7, #4]
 8005c84:	4798      	blx	r3
    }
  }

  return USBD_OK;
 8005c86:	2300      	movs	r3, #0
}
 8005c88:	4618      	mov	r0, r3
 8005c8a:	3708      	adds	r7, #8
 8005c8c:	46bd      	mov	sp, r7
 8005c8e:	bd80      	pop	{r7, pc}

08005c90 <USBD_LL_DevConnected>:
  *         Handle device connection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevConnected(USBD_HandleTypeDef *pdev)
{
 8005c90:	b480      	push	{r7}
 8005c92:	b083      	sub	sp, #12
 8005c94:	af00      	add	r7, sp, #0
 8005c96:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 8005c98:	2300      	movs	r3, #0
}
 8005c9a:	4618      	mov	r0, r3
 8005c9c:	370c      	adds	r7, #12
 8005c9e:	46bd      	mov	sp, r7
 8005ca0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ca4:	4770      	bx	lr

08005ca6 <USBD_LL_DevDisconnected>:
  *         Handle device disconnection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevDisconnected(USBD_HandleTypeDef *pdev)
{
 8005ca6:	b580      	push	{r7, lr}
 8005ca8:	b082      	sub	sp, #8
 8005caa:	af00      	add	r7, sp, #0
 8005cac:	6078      	str	r0, [r7, #4]
  /* Free Class Resources */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8005cae:	687b      	ldr	r3, [r7, #4]
 8005cb0:	2201      	movs	r2, #1
 8005cb2:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c

  if (pdev->pClass != NULL)
 8005cb6:	687b      	ldr	r3, [r7, #4]
 8005cb8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005cbc:	2b00      	cmp	r3, #0
 8005cbe:	d009      	beq.n	8005cd4 <USBD_LL_DevDisconnected+0x2e>
  {
    (void)pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 8005cc0:	687b      	ldr	r3, [r7, #4]
 8005cc2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005cc6:	685b      	ldr	r3, [r3, #4]
 8005cc8:	687a      	ldr	r2, [r7, #4]
 8005cca:	6852      	ldr	r2, [r2, #4]
 8005ccc:	b2d2      	uxtb	r2, r2
 8005cce:	4611      	mov	r1, r2
 8005cd0:	6878      	ldr	r0, [r7, #4]
 8005cd2:	4798      	blx	r3
  }

  return USBD_OK;
 8005cd4:	2300      	movs	r3, #0
}
 8005cd6:	4618      	mov	r0, r3
 8005cd8:	3708      	adds	r7, #8
 8005cda:	46bd      	mov	sp, r7
 8005cdc:	bd80      	pop	{r7, pc}

08005cde <SWAPBYTE>:

/** @defgroup USBD_DEF_Exported_Macros
  * @{
  */
__STATIC_INLINE uint16_t SWAPBYTE(uint8_t *addr)
{
 8005cde:	b480      	push	{r7}
 8005ce0:	b087      	sub	sp, #28
 8005ce2:	af00      	add	r7, sp, #0
 8005ce4:	6078      	str	r0, [r7, #4]
  uint16_t _SwapVal, _Byte1, _Byte2;
  uint8_t *_pbuff = addr;
 8005ce6:	687b      	ldr	r3, [r7, #4]
 8005ce8:	617b      	str	r3, [r7, #20]

  _Byte1 = *(uint8_t *)_pbuff;
 8005cea:	697b      	ldr	r3, [r7, #20]
 8005cec:	781b      	ldrb	r3, [r3, #0]
 8005cee:	827b      	strh	r3, [r7, #18]
  _pbuff++;
 8005cf0:	697b      	ldr	r3, [r7, #20]
 8005cf2:	3301      	adds	r3, #1
 8005cf4:	617b      	str	r3, [r7, #20]
  _Byte2 = *(uint8_t *)_pbuff;
 8005cf6:	697b      	ldr	r3, [r7, #20]
 8005cf8:	781b      	ldrb	r3, [r3, #0]
 8005cfa:	823b      	strh	r3, [r7, #16]

  _SwapVal = (_Byte2 << 8) | _Byte1;
 8005cfc:	8a3b      	ldrh	r3, [r7, #16]
 8005cfe:	021b      	lsls	r3, r3, #8
 8005d00:	b21a      	sxth	r2, r3
 8005d02:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8005d06:	4313      	orrs	r3, r2
 8005d08:	b21b      	sxth	r3, r3
 8005d0a:	81fb      	strh	r3, [r7, #14]

  return _SwapVal;
 8005d0c:	89fb      	ldrh	r3, [r7, #14]
}
 8005d0e:	4618      	mov	r0, r3
 8005d10:	371c      	adds	r7, #28
 8005d12:	46bd      	mov	sp, r7
 8005d14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d18:	4770      	bx	lr
	...

08005d1c <USBD_StdDevReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdDevReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8005d1c:	b580      	push	{r7, lr}
 8005d1e:	b084      	sub	sp, #16
 8005d20:	af00      	add	r7, sp, #0
 8005d22:	6078      	str	r0, [r7, #4]
 8005d24:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8005d26:	2300      	movs	r3, #0
 8005d28:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8005d2a:	683b      	ldr	r3, [r7, #0]
 8005d2c:	781b      	ldrb	r3, [r3, #0]
 8005d2e:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8005d32:	2b40      	cmp	r3, #64	; 0x40
 8005d34:	d005      	beq.n	8005d42 <USBD_StdDevReq+0x26>
 8005d36:	2b40      	cmp	r3, #64	; 0x40
 8005d38:	d853      	bhi.n	8005de2 <USBD_StdDevReq+0xc6>
 8005d3a:	2b00      	cmp	r3, #0
 8005d3c:	d00b      	beq.n	8005d56 <USBD_StdDevReq+0x3a>
 8005d3e:	2b20      	cmp	r3, #32
 8005d40:	d14f      	bne.n	8005de2 <USBD_StdDevReq+0xc6>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 8005d42:	687b      	ldr	r3, [r7, #4]
 8005d44:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005d48:	689b      	ldr	r3, [r3, #8]
 8005d4a:	6839      	ldr	r1, [r7, #0]
 8005d4c:	6878      	ldr	r0, [r7, #4]
 8005d4e:	4798      	blx	r3
 8005d50:	4603      	mov	r3, r0
 8005d52:	73fb      	strb	r3, [r7, #15]
      break;
 8005d54:	e04a      	b.n	8005dec <USBD_StdDevReq+0xd0>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8005d56:	683b      	ldr	r3, [r7, #0]
 8005d58:	785b      	ldrb	r3, [r3, #1]
 8005d5a:	2b09      	cmp	r3, #9
 8005d5c:	d83b      	bhi.n	8005dd6 <USBD_StdDevReq+0xba>
 8005d5e:	a201      	add	r2, pc, #4	; (adr r2, 8005d64 <USBD_StdDevReq+0x48>)
 8005d60:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005d64:	08005db9 	.word	0x08005db9
 8005d68:	08005dcd 	.word	0x08005dcd
 8005d6c:	08005dd7 	.word	0x08005dd7
 8005d70:	08005dc3 	.word	0x08005dc3
 8005d74:	08005dd7 	.word	0x08005dd7
 8005d78:	08005d97 	.word	0x08005d97
 8005d7c:	08005d8d 	.word	0x08005d8d
 8005d80:	08005dd7 	.word	0x08005dd7
 8005d84:	08005daf 	.word	0x08005daf
 8005d88:	08005da1 	.word	0x08005da1
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 8005d8c:	6839      	ldr	r1, [r7, #0]
 8005d8e:	6878      	ldr	r0, [r7, #4]
 8005d90:	f000 f9de 	bl	8006150 <USBD_GetDescriptor>
          break;
 8005d94:	e024      	b.n	8005de0 <USBD_StdDevReq+0xc4>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 8005d96:	6839      	ldr	r1, [r7, #0]
 8005d98:	6878      	ldr	r0, [r7, #4]
 8005d9a:	f000 fb6d 	bl	8006478 <USBD_SetAddress>
          break;
 8005d9e:	e01f      	b.n	8005de0 <USBD_StdDevReq+0xc4>

        case USB_REQ_SET_CONFIGURATION:
          ret = USBD_SetConfig(pdev, req);
 8005da0:	6839      	ldr	r1, [r7, #0]
 8005da2:	6878      	ldr	r0, [r7, #4]
 8005da4:	f000 fbac 	bl	8006500 <USBD_SetConfig>
 8005da8:	4603      	mov	r3, r0
 8005daa:	73fb      	strb	r3, [r7, #15]
          break;
 8005dac:	e018      	b.n	8005de0 <USBD_StdDevReq+0xc4>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 8005dae:	6839      	ldr	r1, [r7, #0]
 8005db0:	6878      	ldr	r0, [r7, #4]
 8005db2:	f000 fc4b 	bl	800664c <USBD_GetConfig>
          break;
 8005db6:	e013      	b.n	8005de0 <USBD_StdDevReq+0xc4>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 8005db8:	6839      	ldr	r1, [r7, #0]
 8005dba:	6878      	ldr	r0, [r7, #4]
 8005dbc:	f000 fc7c 	bl	80066b8 <USBD_GetStatus>
          break;
 8005dc0:	e00e      	b.n	8005de0 <USBD_StdDevReq+0xc4>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 8005dc2:	6839      	ldr	r1, [r7, #0]
 8005dc4:	6878      	ldr	r0, [r7, #4]
 8005dc6:	f000 fcab 	bl	8006720 <USBD_SetFeature>
          break;
 8005dca:	e009      	b.n	8005de0 <USBD_StdDevReq+0xc4>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 8005dcc:	6839      	ldr	r1, [r7, #0]
 8005dce:	6878      	ldr	r0, [r7, #4]
 8005dd0:	f000 fcba 	bl	8006748 <USBD_ClrFeature>
          break;
 8005dd4:	e004      	b.n	8005de0 <USBD_StdDevReq+0xc4>

        default:
          USBD_CtlError(pdev, req);
 8005dd6:	6839      	ldr	r1, [r7, #0]
 8005dd8:	6878      	ldr	r0, [r7, #4]
 8005dda:	f000 fd11 	bl	8006800 <USBD_CtlError>
          break;
 8005dde:	bf00      	nop
      }
      break;
 8005de0:	e004      	b.n	8005dec <USBD_StdDevReq+0xd0>

    default:
      USBD_CtlError(pdev, req);
 8005de2:	6839      	ldr	r1, [r7, #0]
 8005de4:	6878      	ldr	r0, [r7, #4]
 8005de6:	f000 fd0b 	bl	8006800 <USBD_CtlError>
      break;
 8005dea:	bf00      	nop
  }

  return ret;
 8005dec:	7bfb      	ldrb	r3, [r7, #15]
}
 8005dee:	4618      	mov	r0, r3
 8005df0:	3710      	adds	r7, #16
 8005df2:	46bd      	mov	sp, r7
 8005df4:	bd80      	pop	{r7, pc}
 8005df6:	bf00      	nop

08005df8 <USBD_StdItfReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdItfReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8005df8:	b580      	push	{r7, lr}
 8005dfa:	b084      	sub	sp, #16
 8005dfc:	af00      	add	r7, sp, #0
 8005dfe:	6078      	str	r0, [r7, #4]
 8005e00:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8005e02:	2300      	movs	r3, #0
 8005e04:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8005e06:	683b      	ldr	r3, [r7, #0]
 8005e08:	781b      	ldrb	r3, [r3, #0]
 8005e0a:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8005e0e:	2b40      	cmp	r3, #64	; 0x40
 8005e10:	d005      	beq.n	8005e1e <USBD_StdItfReq+0x26>
 8005e12:	2b40      	cmp	r3, #64	; 0x40
 8005e14:	d82f      	bhi.n	8005e76 <USBD_StdItfReq+0x7e>
 8005e16:	2b00      	cmp	r3, #0
 8005e18:	d001      	beq.n	8005e1e <USBD_StdItfReq+0x26>
 8005e1a:	2b20      	cmp	r3, #32
 8005e1c:	d12b      	bne.n	8005e76 <USBD_StdItfReq+0x7e>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 8005e1e:	687b      	ldr	r3, [r7, #4]
 8005e20:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8005e24:	b2db      	uxtb	r3, r3
 8005e26:	3b01      	subs	r3, #1
 8005e28:	2b02      	cmp	r3, #2
 8005e2a:	d81d      	bhi.n	8005e68 <USBD_StdItfReq+0x70>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 8005e2c:	683b      	ldr	r3, [r7, #0]
 8005e2e:	889b      	ldrh	r3, [r3, #4]
 8005e30:	b2db      	uxtb	r3, r3
 8005e32:	2b01      	cmp	r3, #1
 8005e34:	d813      	bhi.n	8005e5e <USBD_StdItfReq+0x66>
          {
            ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 8005e36:	687b      	ldr	r3, [r7, #4]
 8005e38:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005e3c:	689b      	ldr	r3, [r3, #8]
 8005e3e:	6839      	ldr	r1, [r7, #0]
 8005e40:	6878      	ldr	r0, [r7, #4]
 8005e42:	4798      	blx	r3
 8005e44:	4603      	mov	r3, r0
 8005e46:	73fb      	strb	r3, [r7, #15]

            if ((req->wLength == 0U) && (ret == USBD_OK))
 8005e48:	683b      	ldr	r3, [r7, #0]
 8005e4a:	88db      	ldrh	r3, [r3, #6]
 8005e4c:	2b00      	cmp	r3, #0
 8005e4e:	d110      	bne.n	8005e72 <USBD_StdItfReq+0x7a>
 8005e50:	7bfb      	ldrb	r3, [r7, #15]
 8005e52:	2b00      	cmp	r3, #0
 8005e54:	d10d      	bne.n	8005e72 <USBD_StdItfReq+0x7a>
            {
              (void)USBD_CtlSendStatus(pdev);
 8005e56:	6878      	ldr	r0, [r7, #4]
 8005e58:	f000 fd9d 	bl	8006996 <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 8005e5c:	e009      	b.n	8005e72 <USBD_StdItfReq+0x7a>
            USBD_CtlError(pdev, req);
 8005e5e:	6839      	ldr	r1, [r7, #0]
 8005e60:	6878      	ldr	r0, [r7, #4]
 8005e62:	f000 fccd 	bl	8006800 <USBD_CtlError>
          break;
 8005e66:	e004      	b.n	8005e72 <USBD_StdItfReq+0x7a>

        default:
          USBD_CtlError(pdev, req);
 8005e68:	6839      	ldr	r1, [r7, #0]
 8005e6a:	6878      	ldr	r0, [r7, #4]
 8005e6c:	f000 fcc8 	bl	8006800 <USBD_CtlError>
          break;
 8005e70:	e000      	b.n	8005e74 <USBD_StdItfReq+0x7c>
          break;
 8005e72:	bf00      	nop
      }
      break;
 8005e74:	e004      	b.n	8005e80 <USBD_StdItfReq+0x88>

    default:
      USBD_CtlError(pdev, req);
 8005e76:	6839      	ldr	r1, [r7, #0]
 8005e78:	6878      	ldr	r0, [r7, #4]
 8005e7a:	f000 fcc1 	bl	8006800 <USBD_CtlError>
      break;
 8005e7e:	bf00      	nop
  }

  return ret;
 8005e80:	7bfb      	ldrb	r3, [r7, #15]
}
 8005e82:	4618      	mov	r0, r3
 8005e84:	3710      	adds	r7, #16
 8005e86:	46bd      	mov	sp, r7
 8005e88:	bd80      	pop	{r7, pc}

08005e8a <USBD_StdEPReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdEPReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8005e8a:	b580      	push	{r7, lr}
 8005e8c:	b084      	sub	sp, #16
 8005e8e:	af00      	add	r7, sp, #0
 8005e90:	6078      	str	r0, [r7, #4]
 8005e92:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t ep_addr;
  USBD_StatusTypeDef ret = USBD_OK;
 8005e94:	2300      	movs	r3, #0
 8005e96:	73fb      	strb	r3, [r7, #15]
  ep_addr = LOBYTE(req->wIndex);
 8005e98:	683b      	ldr	r3, [r7, #0]
 8005e9a:	889b      	ldrh	r3, [r3, #4]
 8005e9c:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8005e9e:	683b      	ldr	r3, [r7, #0]
 8005ea0:	781b      	ldrb	r3, [r3, #0]
 8005ea2:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8005ea6:	2b40      	cmp	r3, #64	; 0x40
 8005ea8:	d007      	beq.n	8005eba <USBD_StdEPReq+0x30>
 8005eaa:	2b40      	cmp	r3, #64	; 0x40
 8005eac:	f200 8145 	bhi.w	800613a <USBD_StdEPReq+0x2b0>
 8005eb0:	2b00      	cmp	r3, #0
 8005eb2:	d00c      	beq.n	8005ece <USBD_StdEPReq+0x44>
 8005eb4:	2b20      	cmp	r3, #32
 8005eb6:	f040 8140 	bne.w	800613a <USBD_StdEPReq+0x2b0>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 8005eba:	687b      	ldr	r3, [r7, #4]
 8005ebc:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005ec0:	689b      	ldr	r3, [r3, #8]
 8005ec2:	6839      	ldr	r1, [r7, #0]
 8005ec4:	6878      	ldr	r0, [r7, #4]
 8005ec6:	4798      	blx	r3
 8005ec8:	4603      	mov	r3, r0
 8005eca:	73fb      	strb	r3, [r7, #15]
      break;
 8005ecc:	e13a      	b.n	8006144 <USBD_StdEPReq+0x2ba>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8005ece:	683b      	ldr	r3, [r7, #0]
 8005ed0:	785b      	ldrb	r3, [r3, #1]
 8005ed2:	2b03      	cmp	r3, #3
 8005ed4:	d007      	beq.n	8005ee6 <USBD_StdEPReq+0x5c>
 8005ed6:	2b03      	cmp	r3, #3
 8005ed8:	f300 8129 	bgt.w	800612e <USBD_StdEPReq+0x2a4>
 8005edc:	2b00      	cmp	r3, #0
 8005ede:	d07f      	beq.n	8005fe0 <USBD_StdEPReq+0x156>
 8005ee0:	2b01      	cmp	r3, #1
 8005ee2:	d03c      	beq.n	8005f5e <USBD_StdEPReq+0xd4>
 8005ee4:	e123      	b.n	800612e <USBD_StdEPReq+0x2a4>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 8005ee6:	687b      	ldr	r3, [r7, #4]
 8005ee8:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8005eec:	b2db      	uxtb	r3, r3
 8005eee:	2b02      	cmp	r3, #2
 8005ef0:	d002      	beq.n	8005ef8 <USBD_StdEPReq+0x6e>
 8005ef2:	2b03      	cmp	r3, #3
 8005ef4:	d016      	beq.n	8005f24 <USBD_StdEPReq+0x9a>
 8005ef6:	e02c      	b.n	8005f52 <USBD_StdEPReq+0xc8>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8005ef8:	7bbb      	ldrb	r3, [r7, #14]
 8005efa:	2b00      	cmp	r3, #0
 8005efc:	d00d      	beq.n	8005f1a <USBD_StdEPReq+0x90>
 8005efe:	7bbb      	ldrb	r3, [r7, #14]
 8005f00:	2b80      	cmp	r3, #128	; 0x80
 8005f02:	d00a      	beq.n	8005f1a <USBD_StdEPReq+0x90>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 8005f04:	7bbb      	ldrb	r3, [r7, #14]
 8005f06:	4619      	mov	r1, r3
 8005f08:	6878      	ldr	r0, [r7, #4]
 8005f0a:	f001 fa07 	bl	800731c <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 8005f0e:	2180      	movs	r1, #128	; 0x80
 8005f10:	6878      	ldr	r0, [r7, #4]
 8005f12:	f001 fa03 	bl	800731c <USBD_LL_StallEP>
 8005f16:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 8005f18:	e020      	b.n	8005f5c <USBD_StdEPReq+0xd2>
                USBD_CtlError(pdev, req);
 8005f1a:	6839      	ldr	r1, [r7, #0]
 8005f1c:	6878      	ldr	r0, [r7, #4]
 8005f1e:	f000 fc6f 	bl	8006800 <USBD_CtlError>
              break;
 8005f22:	e01b      	b.n	8005f5c <USBD_StdEPReq+0xd2>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 8005f24:	683b      	ldr	r3, [r7, #0]
 8005f26:	885b      	ldrh	r3, [r3, #2]
 8005f28:	2b00      	cmp	r3, #0
 8005f2a:	d10e      	bne.n	8005f4a <USBD_StdEPReq+0xc0>
              {
                if ((ep_addr != 0x00U) && (ep_addr != 0x80U) && (req->wLength == 0x00U))
 8005f2c:	7bbb      	ldrb	r3, [r7, #14]
 8005f2e:	2b00      	cmp	r3, #0
 8005f30:	d00b      	beq.n	8005f4a <USBD_StdEPReq+0xc0>
 8005f32:	7bbb      	ldrb	r3, [r7, #14]
 8005f34:	2b80      	cmp	r3, #128	; 0x80
 8005f36:	d008      	beq.n	8005f4a <USBD_StdEPReq+0xc0>
 8005f38:	683b      	ldr	r3, [r7, #0]
 8005f3a:	88db      	ldrh	r3, [r3, #6]
 8005f3c:	2b00      	cmp	r3, #0
 8005f3e:	d104      	bne.n	8005f4a <USBD_StdEPReq+0xc0>
                {
                  (void)USBD_LL_StallEP(pdev, ep_addr);
 8005f40:	7bbb      	ldrb	r3, [r7, #14]
 8005f42:	4619      	mov	r1, r3
 8005f44:	6878      	ldr	r0, [r7, #4]
 8005f46:	f001 f9e9 	bl	800731c <USBD_LL_StallEP>
                }
              }
              (void)USBD_CtlSendStatus(pdev);
 8005f4a:	6878      	ldr	r0, [r7, #4]
 8005f4c:	f000 fd23 	bl	8006996 <USBD_CtlSendStatus>

              break;
 8005f50:	e004      	b.n	8005f5c <USBD_StdEPReq+0xd2>

            default:
              USBD_CtlError(pdev, req);
 8005f52:	6839      	ldr	r1, [r7, #0]
 8005f54:	6878      	ldr	r0, [r7, #4]
 8005f56:	f000 fc53 	bl	8006800 <USBD_CtlError>
              break;
 8005f5a:	bf00      	nop
          }
          break;
 8005f5c:	e0ec      	b.n	8006138 <USBD_StdEPReq+0x2ae>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 8005f5e:	687b      	ldr	r3, [r7, #4]
 8005f60:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8005f64:	b2db      	uxtb	r3, r3
 8005f66:	2b02      	cmp	r3, #2
 8005f68:	d002      	beq.n	8005f70 <USBD_StdEPReq+0xe6>
 8005f6a:	2b03      	cmp	r3, #3
 8005f6c:	d016      	beq.n	8005f9c <USBD_StdEPReq+0x112>
 8005f6e:	e030      	b.n	8005fd2 <USBD_StdEPReq+0x148>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8005f70:	7bbb      	ldrb	r3, [r7, #14]
 8005f72:	2b00      	cmp	r3, #0
 8005f74:	d00d      	beq.n	8005f92 <USBD_StdEPReq+0x108>
 8005f76:	7bbb      	ldrb	r3, [r7, #14]
 8005f78:	2b80      	cmp	r3, #128	; 0x80
 8005f7a:	d00a      	beq.n	8005f92 <USBD_StdEPReq+0x108>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 8005f7c:	7bbb      	ldrb	r3, [r7, #14]
 8005f7e:	4619      	mov	r1, r3
 8005f80:	6878      	ldr	r0, [r7, #4]
 8005f82:	f001 f9cb 	bl	800731c <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 8005f86:	2180      	movs	r1, #128	; 0x80
 8005f88:	6878      	ldr	r0, [r7, #4]
 8005f8a:	f001 f9c7 	bl	800731c <USBD_LL_StallEP>
 8005f8e:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 8005f90:	e025      	b.n	8005fde <USBD_StdEPReq+0x154>
                USBD_CtlError(pdev, req);
 8005f92:	6839      	ldr	r1, [r7, #0]
 8005f94:	6878      	ldr	r0, [r7, #4]
 8005f96:	f000 fc33 	bl	8006800 <USBD_CtlError>
              break;
 8005f9a:	e020      	b.n	8005fde <USBD_StdEPReq+0x154>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 8005f9c:	683b      	ldr	r3, [r7, #0]
 8005f9e:	885b      	ldrh	r3, [r3, #2]
 8005fa0:	2b00      	cmp	r3, #0
 8005fa2:	d11b      	bne.n	8005fdc <USBD_StdEPReq+0x152>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 8005fa4:	7bbb      	ldrb	r3, [r7, #14]
 8005fa6:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8005faa:	2b00      	cmp	r3, #0
 8005fac:	d004      	beq.n	8005fb8 <USBD_StdEPReq+0x12e>
                {
                  (void)USBD_LL_ClearStallEP(pdev, ep_addr);
 8005fae:	7bbb      	ldrb	r3, [r7, #14]
 8005fb0:	4619      	mov	r1, r3
 8005fb2:	6878      	ldr	r0, [r7, #4]
 8005fb4:	f001 f9e8 	bl	8007388 <USBD_LL_ClearStallEP>
                }
                (void)USBD_CtlSendStatus(pdev);
 8005fb8:	6878      	ldr	r0, [r7, #4]
 8005fba:	f000 fcec 	bl	8006996 <USBD_CtlSendStatus>
                ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 8005fbe:	687b      	ldr	r3, [r7, #4]
 8005fc0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005fc4:	689b      	ldr	r3, [r3, #8]
 8005fc6:	6839      	ldr	r1, [r7, #0]
 8005fc8:	6878      	ldr	r0, [r7, #4]
 8005fca:	4798      	blx	r3
 8005fcc:	4603      	mov	r3, r0
 8005fce:	73fb      	strb	r3, [r7, #15]
              }
              break;
 8005fd0:	e004      	b.n	8005fdc <USBD_StdEPReq+0x152>

            default:
              USBD_CtlError(pdev, req);
 8005fd2:	6839      	ldr	r1, [r7, #0]
 8005fd4:	6878      	ldr	r0, [r7, #4]
 8005fd6:	f000 fc13 	bl	8006800 <USBD_CtlError>
              break;
 8005fda:	e000      	b.n	8005fde <USBD_StdEPReq+0x154>
              break;
 8005fdc:	bf00      	nop
          }
          break;
 8005fde:	e0ab      	b.n	8006138 <USBD_StdEPReq+0x2ae>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 8005fe0:	687b      	ldr	r3, [r7, #4]
 8005fe2:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8005fe6:	b2db      	uxtb	r3, r3
 8005fe8:	2b02      	cmp	r3, #2
 8005fea:	d002      	beq.n	8005ff2 <USBD_StdEPReq+0x168>
 8005fec:	2b03      	cmp	r3, #3
 8005fee:	d032      	beq.n	8006056 <USBD_StdEPReq+0x1cc>
 8005ff0:	e097      	b.n	8006122 <USBD_StdEPReq+0x298>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8005ff2:	7bbb      	ldrb	r3, [r7, #14]
 8005ff4:	2b00      	cmp	r3, #0
 8005ff6:	d007      	beq.n	8006008 <USBD_StdEPReq+0x17e>
 8005ff8:	7bbb      	ldrb	r3, [r7, #14]
 8005ffa:	2b80      	cmp	r3, #128	; 0x80
 8005ffc:	d004      	beq.n	8006008 <USBD_StdEPReq+0x17e>
              {
                USBD_CtlError(pdev, req);
 8005ffe:	6839      	ldr	r1, [r7, #0]
 8006000:	6878      	ldr	r0, [r7, #4]
 8006002:	f000 fbfd 	bl	8006800 <USBD_CtlError>
                break;
 8006006:	e091      	b.n	800612c <USBD_StdEPReq+0x2a2>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8006008:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800600c:	2b00      	cmp	r3, #0
 800600e:	da0b      	bge.n	8006028 <USBD_StdEPReq+0x19e>
 8006010:	7bbb      	ldrb	r3, [r7, #14]
 8006012:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8006016:	4613      	mov	r3, r2
 8006018:	009b      	lsls	r3, r3, #2
 800601a:	4413      	add	r3, r2
 800601c:	009b      	lsls	r3, r3, #2
 800601e:	3310      	adds	r3, #16
 8006020:	687a      	ldr	r2, [r7, #4]
 8006022:	4413      	add	r3, r2
 8006024:	3304      	adds	r3, #4
 8006026:	e00b      	b.n	8006040 <USBD_StdEPReq+0x1b6>
                    &pdev->ep_out[ep_addr & 0x7FU];
 8006028:	7bbb      	ldrb	r3, [r7, #14]
 800602a:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800602e:	4613      	mov	r3, r2
 8006030:	009b      	lsls	r3, r3, #2
 8006032:	4413      	add	r3, r2
 8006034:	009b      	lsls	r3, r3, #2
 8006036:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 800603a:	687a      	ldr	r2, [r7, #4]
 800603c:	4413      	add	r3, r2
 800603e:	3304      	adds	r3, #4
 8006040:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 8006042:	68bb      	ldr	r3, [r7, #8]
 8006044:	2200      	movs	r2, #0
 8006046:	601a      	str	r2, [r3, #0]

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 8006048:	68bb      	ldr	r3, [r7, #8]
 800604a:	2202      	movs	r2, #2
 800604c:	4619      	mov	r1, r3
 800604e:	6878      	ldr	r0, [r7, #4]
 8006050:	f000 fc47 	bl	80068e2 <USBD_CtlSendData>
              break;
 8006054:	e06a      	b.n	800612c <USBD_StdEPReq+0x2a2>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 8006056:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800605a:	2b00      	cmp	r3, #0
 800605c:	da11      	bge.n	8006082 <USBD_StdEPReq+0x1f8>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 800605e:	7bbb      	ldrb	r3, [r7, #14]
 8006060:	f003 020f 	and.w	r2, r3, #15
 8006064:	6879      	ldr	r1, [r7, #4]
 8006066:	4613      	mov	r3, r2
 8006068:	009b      	lsls	r3, r3, #2
 800606a:	4413      	add	r3, r2
 800606c:	009b      	lsls	r3, r3, #2
 800606e:	440b      	add	r3, r1
 8006070:	3324      	adds	r3, #36	; 0x24
 8006072:	881b      	ldrh	r3, [r3, #0]
 8006074:	2b00      	cmp	r3, #0
 8006076:	d117      	bne.n	80060a8 <USBD_StdEPReq+0x21e>
                {
                  USBD_CtlError(pdev, req);
 8006078:	6839      	ldr	r1, [r7, #0]
 800607a:	6878      	ldr	r0, [r7, #4]
 800607c:	f000 fbc0 	bl	8006800 <USBD_CtlError>
                  break;
 8006080:	e054      	b.n	800612c <USBD_StdEPReq+0x2a2>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 8006082:	7bbb      	ldrb	r3, [r7, #14]
 8006084:	f003 020f 	and.w	r2, r3, #15
 8006088:	6879      	ldr	r1, [r7, #4]
 800608a:	4613      	mov	r3, r2
 800608c:	009b      	lsls	r3, r3, #2
 800608e:	4413      	add	r3, r2
 8006090:	009b      	lsls	r3, r3, #2
 8006092:	440b      	add	r3, r1
 8006094:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 8006098:	881b      	ldrh	r3, [r3, #0]
 800609a:	2b00      	cmp	r3, #0
 800609c:	d104      	bne.n	80060a8 <USBD_StdEPReq+0x21e>
                {
                  USBD_CtlError(pdev, req);
 800609e:	6839      	ldr	r1, [r7, #0]
 80060a0:	6878      	ldr	r0, [r7, #4]
 80060a2:	f000 fbad 	bl	8006800 <USBD_CtlError>
                  break;
 80060a6:	e041      	b.n	800612c <USBD_StdEPReq+0x2a2>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 80060a8:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80060ac:	2b00      	cmp	r3, #0
 80060ae:	da0b      	bge.n	80060c8 <USBD_StdEPReq+0x23e>
 80060b0:	7bbb      	ldrb	r3, [r7, #14]
 80060b2:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 80060b6:	4613      	mov	r3, r2
 80060b8:	009b      	lsls	r3, r3, #2
 80060ba:	4413      	add	r3, r2
 80060bc:	009b      	lsls	r3, r3, #2
 80060be:	3310      	adds	r3, #16
 80060c0:	687a      	ldr	r2, [r7, #4]
 80060c2:	4413      	add	r3, r2
 80060c4:	3304      	adds	r3, #4
 80060c6:	e00b      	b.n	80060e0 <USBD_StdEPReq+0x256>
                    &pdev->ep_out[ep_addr & 0x7FU];
 80060c8:	7bbb      	ldrb	r3, [r7, #14]
 80060ca:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 80060ce:	4613      	mov	r3, r2
 80060d0:	009b      	lsls	r3, r3, #2
 80060d2:	4413      	add	r3, r2
 80060d4:	009b      	lsls	r3, r3, #2
 80060d6:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 80060da:	687a      	ldr	r2, [r7, #4]
 80060dc:	4413      	add	r3, r2
 80060de:	3304      	adds	r3, #4
 80060e0:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 80060e2:	7bbb      	ldrb	r3, [r7, #14]
 80060e4:	2b00      	cmp	r3, #0
 80060e6:	d002      	beq.n	80060ee <USBD_StdEPReq+0x264>
 80060e8:	7bbb      	ldrb	r3, [r7, #14]
 80060ea:	2b80      	cmp	r3, #128	; 0x80
 80060ec:	d103      	bne.n	80060f6 <USBD_StdEPReq+0x26c>
              {
                pep->status = 0x0000U;
 80060ee:	68bb      	ldr	r3, [r7, #8]
 80060f0:	2200      	movs	r2, #0
 80060f2:	601a      	str	r2, [r3, #0]
 80060f4:	e00e      	b.n	8006114 <USBD_StdEPReq+0x28a>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr) != 0U)
 80060f6:	7bbb      	ldrb	r3, [r7, #14]
 80060f8:	4619      	mov	r1, r3
 80060fa:	6878      	ldr	r0, [r7, #4]
 80060fc:	f001 f97a 	bl	80073f4 <USBD_LL_IsStallEP>
 8006100:	4603      	mov	r3, r0
 8006102:	2b00      	cmp	r3, #0
 8006104:	d003      	beq.n	800610e <USBD_StdEPReq+0x284>
              {
                pep->status = 0x0001U;
 8006106:	68bb      	ldr	r3, [r7, #8]
 8006108:	2201      	movs	r2, #1
 800610a:	601a      	str	r2, [r3, #0]
 800610c:	e002      	b.n	8006114 <USBD_StdEPReq+0x28a>
              }
              else
              {
                pep->status = 0x0000U;
 800610e:	68bb      	ldr	r3, [r7, #8]
 8006110:	2200      	movs	r2, #0
 8006112:	601a      	str	r2, [r3, #0]
              }

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 8006114:	68bb      	ldr	r3, [r7, #8]
 8006116:	2202      	movs	r2, #2
 8006118:	4619      	mov	r1, r3
 800611a:	6878      	ldr	r0, [r7, #4]
 800611c:	f000 fbe1 	bl	80068e2 <USBD_CtlSendData>
              break;
 8006120:	e004      	b.n	800612c <USBD_StdEPReq+0x2a2>

            default:
              USBD_CtlError(pdev, req);
 8006122:	6839      	ldr	r1, [r7, #0]
 8006124:	6878      	ldr	r0, [r7, #4]
 8006126:	f000 fb6b 	bl	8006800 <USBD_CtlError>
              break;
 800612a:	bf00      	nop
          }
          break;
 800612c:	e004      	b.n	8006138 <USBD_StdEPReq+0x2ae>

        default:
          USBD_CtlError(pdev, req);
 800612e:	6839      	ldr	r1, [r7, #0]
 8006130:	6878      	ldr	r0, [r7, #4]
 8006132:	f000 fb65 	bl	8006800 <USBD_CtlError>
          break;
 8006136:	bf00      	nop
      }
      break;
 8006138:	e004      	b.n	8006144 <USBD_StdEPReq+0x2ba>

    default:
      USBD_CtlError(pdev, req);
 800613a:	6839      	ldr	r1, [r7, #0]
 800613c:	6878      	ldr	r0, [r7, #4]
 800613e:	f000 fb5f 	bl	8006800 <USBD_CtlError>
      break;
 8006142:	bf00      	nop
  }

  return ret;
 8006144:	7bfb      	ldrb	r3, [r7, #15]
}
 8006146:	4618      	mov	r0, r3
 8006148:	3710      	adds	r7, #16
 800614a:	46bd      	mov	sp, r7
 800614c:	bd80      	pop	{r7, pc}
	...

08006150 <USBD_GetDescriptor>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8006150:	b580      	push	{r7, lr}
 8006152:	b084      	sub	sp, #16
 8006154:	af00      	add	r7, sp, #0
 8006156:	6078      	str	r0, [r7, #4]
 8006158:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 800615a:	2300      	movs	r3, #0
 800615c:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 800615e:	2300      	movs	r3, #0
 8006160:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 8006162:	2300      	movs	r3, #0
 8006164:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 8006166:	683b      	ldr	r3, [r7, #0]
 8006168:	885b      	ldrh	r3, [r3, #2]
 800616a:	0a1b      	lsrs	r3, r3, #8
 800616c:	b29b      	uxth	r3, r3
 800616e:	3b01      	subs	r3, #1
 8006170:	2b0e      	cmp	r3, #14
 8006172:	f200 8152 	bhi.w	800641a <USBD_GetDescriptor+0x2ca>
 8006176:	a201      	add	r2, pc, #4	; (adr r2, 800617c <USBD_GetDescriptor+0x2c>)
 8006178:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800617c:	080061ed 	.word	0x080061ed
 8006180:	08006205 	.word	0x08006205
 8006184:	08006245 	.word	0x08006245
 8006188:	0800641b 	.word	0x0800641b
 800618c:	0800641b 	.word	0x0800641b
 8006190:	080063bb 	.word	0x080063bb
 8006194:	080063e7 	.word	0x080063e7
 8006198:	0800641b 	.word	0x0800641b
 800619c:	0800641b 	.word	0x0800641b
 80061a0:	0800641b 	.word	0x0800641b
 80061a4:	0800641b 	.word	0x0800641b
 80061a8:	0800641b 	.word	0x0800641b
 80061ac:	0800641b 	.word	0x0800641b
 80061b0:	0800641b 	.word	0x0800641b
 80061b4:	080061b9 	.word	0x080061b9
  {
#if ((USBD_LPM_ENABLED == 1U) || (USBD_CLASS_BOS_ENABLED == 1U))
    case USB_DESC_TYPE_BOS:
      if (pdev->pDesc->GetBOSDescriptor != NULL)
 80061b8:	687b      	ldr	r3, [r7, #4]
 80061ba:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80061be:	69db      	ldr	r3, [r3, #28]
 80061c0:	2b00      	cmp	r3, #0
 80061c2:	d00b      	beq.n	80061dc <USBD_GetDescriptor+0x8c>
      {
        pbuf = pdev->pDesc->GetBOSDescriptor(pdev->dev_speed, &len);
 80061c4:	687b      	ldr	r3, [r7, #4]
 80061c6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80061ca:	69db      	ldr	r3, [r3, #28]
 80061cc:	687a      	ldr	r2, [r7, #4]
 80061ce:	7c12      	ldrb	r2, [r2, #16]
 80061d0:	f107 0108 	add.w	r1, r7, #8
 80061d4:	4610      	mov	r0, r2
 80061d6:	4798      	blx	r3
 80061d8:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 80061da:	e126      	b.n	800642a <USBD_GetDescriptor+0x2da>
        USBD_CtlError(pdev, req);
 80061dc:	6839      	ldr	r1, [r7, #0]
 80061de:	6878      	ldr	r0, [r7, #4]
 80061e0:	f000 fb0e 	bl	8006800 <USBD_CtlError>
        err++;
 80061e4:	7afb      	ldrb	r3, [r7, #11]
 80061e6:	3301      	adds	r3, #1
 80061e8:	72fb      	strb	r3, [r7, #11]
      break;
 80061ea:	e11e      	b.n	800642a <USBD_GetDescriptor+0x2da>
#endif
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 80061ec:	687b      	ldr	r3, [r7, #4]
 80061ee:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80061f2:	681b      	ldr	r3, [r3, #0]
 80061f4:	687a      	ldr	r2, [r7, #4]
 80061f6:	7c12      	ldrb	r2, [r2, #16]
 80061f8:	f107 0108 	add.w	r1, r7, #8
 80061fc:	4610      	mov	r0, r2
 80061fe:	4798      	blx	r3
 8006200:	60f8      	str	r0, [r7, #12]
      break;
 8006202:	e112      	b.n	800642a <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8006204:	687b      	ldr	r3, [r7, #4]
 8006206:	7c1b      	ldrb	r3, [r3, #16]
 8006208:	2b00      	cmp	r3, #0
 800620a:	d10d      	bne.n	8006228 <USBD_GetDescriptor+0xd8>
      {
        pbuf = pdev->pClass->GetHSConfigDescriptor(&len);
 800620c:	687b      	ldr	r3, [r7, #4]
 800620e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006212:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006214:	f107 0208 	add.w	r2, r7, #8
 8006218:	4610      	mov	r0, r2
 800621a:	4798      	blx	r3
 800621c:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800621e:	68fb      	ldr	r3, [r7, #12]
 8006220:	3301      	adds	r3, #1
 8006222:	2202      	movs	r2, #2
 8006224:	701a      	strb	r2, [r3, #0]
      else
      {
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 8006226:	e100      	b.n	800642a <USBD_GetDescriptor+0x2da>
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
 8006228:	687b      	ldr	r3, [r7, #4]
 800622a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800622e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006230:	f107 0208 	add.w	r2, r7, #8
 8006234:	4610      	mov	r0, r2
 8006236:	4798      	blx	r3
 8006238:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800623a:	68fb      	ldr	r3, [r7, #12]
 800623c:	3301      	adds	r3, #1
 800623e:	2202      	movs	r2, #2
 8006240:	701a      	strb	r2, [r3, #0]
      break;
 8006242:	e0f2      	b.n	800642a <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 8006244:	683b      	ldr	r3, [r7, #0]
 8006246:	885b      	ldrh	r3, [r3, #2]
 8006248:	b2db      	uxtb	r3, r3
 800624a:	2b05      	cmp	r3, #5
 800624c:	f200 80ac 	bhi.w	80063a8 <USBD_GetDescriptor+0x258>
 8006250:	a201      	add	r2, pc, #4	; (adr r2, 8006258 <USBD_GetDescriptor+0x108>)
 8006252:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006256:	bf00      	nop
 8006258:	08006271 	.word	0x08006271
 800625c:	080062a5 	.word	0x080062a5
 8006260:	080062d9 	.word	0x080062d9
 8006264:	0800630d 	.word	0x0800630d
 8006268:	08006341 	.word	0x08006341
 800626c:	08006375 	.word	0x08006375
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 8006270:	687b      	ldr	r3, [r7, #4]
 8006272:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006276:	685b      	ldr	r3, [r3, #4]
 8006278:	2b00      	cmp	r3, #0
 800627a:	d00b      	beq.n	8006294 <USBD_GetDescriptor+0x144>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 800627c:	687b      	ldr	r3, [r7, #4]
 800627e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006282:	685b      	ldr	r3, [r3, #4]
 8006284:	687a      	ldr	r2, [r7, #4]
 8006286:	7c12      	ldrb	r2, [r2, #16]
 8006288:	f107 0108 	add.w	r1, r7, #8
 800628c:	4610      	mov	r0, r2
 800628e:	4798      	blx	r3
 8006290:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8006292:	e091      	b.n	80063b8 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 8006294:	6839      	ldr	r1, [r7, #0]
 8006296:	6878      	ldr	r0, [r7, #4]
 8006298:	f000 fab2 	bl	8006800 <USBD_CtlError>
            err++;
 800629c:	7afb      	ldrb	r3, [r7, #11]
 800629e:	3301      	adds	r3, #1
 80062a0:	72fb      	strb	r3, [r7, #11]
          break;
 80062a2:	e089      	b.n	80063b8 <USBD_GetDescriptor+0x268>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 80062a4:	687b      	ldr	r3, [r7, #4]
 80062a6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80062aa:	689b      	ldr	r3, [r3, #8]
 80062ac:	2b00      	cmp	r3, #0
 80062ae:	d00b      	beq.n	80062c8 <USBD_GetDescriptor+0x178>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 80062b0:	687b      	ldr	r3, [r7, #4]
 80062b2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80062b6:	689b      	ldr	r3, [r3, #8]
 80062b8:	687a      	ldr	r2, [r7, #4]
 80062ba:	7c12      	ldrb	r2, [r2, #16]
 80062bc:	f107 0108 	add.w	r1, r7, #8
 80062c0:	4610      	mov	r0, r2
 80062c2:	4798      	blx	r3
 80062c4:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 80062c6:	e077      	b.n	80063b8 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 80062c8:	6839      	ldr	r1, [r7, #0]
 80062ca:	6878      	ldr	r0, [r7, #4]
 80062cc:	f000 fa98 	bl	8006800 <USBD_CtlError>
            err++;
 80062d0:	7afb      	ldrb	r3, [r7, #11]
 80062d2:	3301      	adds	r3, #1
 80062d4:	72fb      	strb	r3, [r7, #11]
          break;
 80062d6:	e06f      	b.n	80063b8 <USBD_GetDescriptor+0x268>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 80062d8:	687b      	ldr	r3, [r7, #4]
 80062da:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80062de:	68db      	ldr	r3, [r3, #12]
 80062e0:	2b00      	cmp	r3, #0
 80062e2:	d00b      	beq.n	80062fc <USBD_GetDescriptor+0x1ac>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 80062e4:	687b      	ldr	r3, [r7, #4]
 80062e6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80062ea:	68db      	ldr	r3, [r3, #12]
 80062ec:	687a      	ldr	r2, [r7, #4]
 80062ee:	7c12      	ldrb	r2, [r2, #16]
 80062f0:	f107 0108 	add.w	r1, r7, #8
 80062f4:	4610      	mov	r0, r2
 80062f6:	4798      	blx	r3
 80062f8:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 80062fa:	e05d      	b.n	80063b8 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 80062fc:	6839      	ldr	r1, [r7, #0]
 80062fe:	6878      	ldr	r0, [r7, #4]
 8006300:	f000 fa7e 	bl	8006800 <USBD_CtlError>
            err++;
 8006304:	7afb      	ldrb	r3, [r7, #11]
 8006306:	3301      	adds	r3, #1
 8006308:	72fb      	strb	r3, [r7, #11]
          break;
 800630a:	e055      	b.n	80063b8 <USBD_GetDescriptor+0x268>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 800630c:	687b      	ldr	r3, [r7, #4]
 800630e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006312:	691b      	ldr	r3, [r3, #16]
 8006314:	2b00      	cmp	r3, #0
 8006316:	d00b      	beq.n	8006330 <USBD_GetDescriptor+0x1e0>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 8006318:	687b      	ldr	r3, [r7, #4]
 800631a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800631e:	691b      	ldr	r3, [r3, #16]
 8006320:	687a      	ldr	r2, [r7, #4]
 8006322:	7c12      	ldrb	r2, [r2, #16]
 8006324:	f107 0108 	add.w	r1, r7, #8
 8006328:	4610      	mov	r0, r2
 800632a:	4798      	blx	r3
 800632c:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800632e:	e043      	b.n	80063b8 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 8006330:	6839      	ldr	r1, [r7, #0]
 8006332:	6878      	ldr	r0, [r7, #4]
 8006334:	f000 fa64 	bl	8006800 <USBD_CtlError>
            err++;
 8006338:	7afb      	ldrb	r3, [r7, #11]
 800633a:	3301      	adds	r3, #1
 800633c:	72fb      	strb	r3, [r7, #11]
          break;
 800633e:	e03b      	b.n	80063b8 <USBD_GetDescriptor+0x268>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 8006340:	687b      	ldr	r3, [r7, #4]
 8006342:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006346:	695b      	ldr	r3, [r3, #20]
 8006348:	2b00      	cmp	r3, #0
 800634a:	d00b      	beq.n	8006364 <USBD_GetDescriptor+0x214>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 800634c:	687b      	ldr	r3, [r7, #4]
 800634e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006352:	695b      	ldr	r3, [r3, #20]
 8006354:	687a      	ldr	r2, [r7, #4]
 8006356:	7c12      	ldrb	r2, [r2, #16]
 8006358:	f107 0108 	add.w	r1, r7, #8
 800635c:	4610      	mov	r0, r2
 800635e:	4798      	blx	r3
 8006360:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8006362:	e029      	b.n	80063b8 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 8006364:	6839      	ldr	r1, [r7, #0]
 8006366:	6878      	ldr	r0, [r7, #4]
 8006368:	f000 fa4a 	bl	8006800 <USBD_CtlError>
            err++;
 800636c:	7afb      	ldrb	r3, [r7, #11]
 800636e:	3301      	adds	r3, #1
 8006370:	72fb      	strb	r3, [r7, #11]
          break;
 8006372:	e021      	b.n	80063b8 <USBD_GetDescriptor+0x268>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 8006374:	687b      	ldr	r3, [r7, #4]
 8006376:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800637a:	699b      	ldr	r3, [r3, #24]
 800637c:	2b00      	cmp	r3, #0
 800637e:	d00b      	beq.n	8006398 <USBD_GetDescriptor+0x248>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 8006380:	687b      	ldr	r3, [r7, #4]
 8006382:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006386:	699b      	ldr	r3, [r3, #24]
 8006388:	687a      	ldr	r2, [r7, #4]
 800638a:	7c12      	ldrb	r2, [r2, #16]
 800638c:	f107 0108 	add.w	r1, r7, #8
 8006390:	4610      	mov	r0, r2
 8006392:	4798      	blx	r3
 8006394:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8006396:	e00f      	b.n	80063b8 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 8006398:	6839      	ldr	r1, [r7, #0]
 800639a:	6878      	ldr	r0, [r7, #4]
 800639c:	f000 fa30 	bl	8006800 <USBD_CtlError>
            err++;
 80063a0:	7afb      	ldrb	r3, [r7, #11]
 80063a2:	3301      	adds	r3, #1
 80063a4:	72fb      	strb	r3, [r7, #11]
          break;
 80063a6:	e007      	b.n	80063b8 <USBD_GetDescriptor+0x268>
            err++;
          }
#endif

#if ((USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U))
          USBD_CtlError(pdev, req);
 80063a8:	6839      	ldr	r1, [r7, #0]
 80063aa:	6878      	ldr	r0, [r7, #4]
 80063ac:	f000 fa28 	bl	8006800 <USBD_CtlError>
          err++;
 80063b0:	7afb      	ldrb	r3, [r7, #11]
 80063b2:	3301      	adds	r3, #1
 80063b4:	72fb      	strb	r3, [r7, #11]
#endif
          break;
 80063b6:	bf00      	nop
      }
      break;
 80063b8:	e037      	b.n	800642a <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 80063ba:	687b      	ldr	r3, [r7, #4]
 80063bc:	7c1b      	ldrb	r3, [r3, #16]
 80063be:	2b00      	cmp	r3, #0
 80063c0:	d109      	bne.n	80063d6 <USBD_GetDescriptor+0x286>
      {
        pbuf = pdev->pClass->GetDeviceQualifierDescriptor(&len);
 80063c2:	687b      	ldr	r3, [r7, #4]
 80063c4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80063c8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80063ca:	f107 0208 	add.w	r2, r7, #8
 80063ce:	4610      	mov	r0, r2
 80063d0:	4798      	blx	r3
 80063d2:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 80063d4:	e029      	b.n	800642a <USBD_GetDescriptor+0x2da>
        USBD_CtlError(pdev, req);
 80063d6:	6839      	ldr	r1, [r7, #0]
 80063d8:	6878      	ldr	r0, [r7, #4]
 80063da:	f000 fa11 	bl	8006800 <USBD_CtlError>
        err++;
 80063de:	7afb      	ldrb	r3, [r7, #11]
 80063e0:	3301      	adds	r3, #1
 80063e2:	72fb      	strb	r3, [r7, #11]
      break;
 80063e4:	e021      	b.n	800642a <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 80063e6:	687b      	ldr	r3, [r7, #4]
 80063e8:	7c1b      	ldrb	r3, [r3, #16]
 80063ea:	2b00      	cmp	r3, #0
 80063ec:	d10d      	bne.n	800640a <USBD_GetDescriptor+0x2ba>
      {
        pbuf = pdev->pClass->GetOtherSpeedConfigDescriptor(&len);
 80063ee:	687b      	ldr	r3, [r7, #4]
 80063f0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80063f4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80063f6:	f107 0208 	add.w	r2, r7, #8
 80063fa:	4610      	mov	r0, r2
 80063fc:	4798      	blx	r3
 80063fe:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 8006400:	68fb      	ldr	r3, [r7, #12]
 8006402:	3301      	adds	r3, #1
 8006404:	2207      	movs	r2, #7
 8006406:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8006408:	e00f      	b.n	800642a <USBD_GetDescriptor+0x2da>
        USBD_CtlError(pdev, req);
 800640a:	6839      	ldr	r1, [r7, #0]
 800640c:	6878      	ldr	r0, [r7, #4]
 800640e:	f000 f9f7 	bl	8006800 <USBD_CtlError>
        err++;
 8006412:	7afb      	ldrb	r3, [r7, #11]
 8006414:	3301      	adds	r3, #1
 8006416:	72fb      	strb	r3, [r7, #11]
      break;
 8006418:	e007      	b.n	800642a <USBD_GetDescriptor+0x2da>

    default:
      USBD_CtlError(pdev, req);
 800641a:	6839      	ldr	r1, [r7, #0]
 800641c:	6878      	ldr	r0, [r7, #4]
 800641e:	f000 f9ef 	bl	8006800 <USBD_CtlError>
      err++;
 8006422:	7afb      	ldrb	r3, [r7, #11]
 8006424:	3301      	adds	r3, #1
 8006426:	72fb      	strb	r3, [r7, #11]
      break;
 8006428:	bf00      	nop
  }

  if (err != 0U)
 800642a:	7afb      	ldrb	r3, [r7, #11]
 800642c:	2b00      	cmp	r3, #0
 800642e:	d11e      	bne.n	800646e <USBD_GetDescriptor+0x31e>
  {
    return;
  }

  if (req->wLength != 0U)
 8006430:	683b      	ldr	r3, [r7, #0]
 8006432:	88db      	ldrh	r3, [r3, #6]
 8006434:	2b00      	cmp	r3, #0
 8006436:	d016      	beq.n	8006466 <USBD_GetDescriptor+0x316>
  {
    if (len != 0U)
 8006438:	893b      	ldrh	r3, [r7, #8]
 800643a:	2b00      	cmp	r3, #0
 800643c:	d00e      	beq.n	800645c <USBD_GetDescriptor+0x30c>
    {
      len = MIN(len, req->wLength);
 800643e:	683b      	ldr	r3, [r7, #0]
 8006440:	88da      	ldrh	r2, [r3, #6]
 8006442:	893b      	ldrh	r3, [r7, #8]
 8006444:	4293      	cmp	r3, r2
 8006446:	bf28      	it	cs
 8006448:	4613      	movcs	r3, r2
 800644a:	b29b      	uxth	r3, r3
 800644c:	813b      	strh	r3, [r7, #8]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 800644e:	893b      	ldrh	r3, [r7, #8]
 8006450:	461a      	mov	r2, r3
 8006452:	68f9      	ldr	r1, [r7, #12]
 8006454:	6878      	ldr	r0, [r7, #4]
 8006456:	f000 fa44 	bl	80068e2 <USBD_CtlSendData>
 800645a:	e009      	b.n	8006470 <USBD_GetDescriptor+0x320>
    }
    else
    {
      USBD_CtlError(pdev, req);
 800645c:	6839      	ldr	r1, [r7, #0]
 800645e:	6878      	ldr	r0, [r7, #4]
 8006460:	f000 f9ce 	bl	8006800 <USBD_CtlError>
 8006464:	e004      	b.n	8006470 <USBD_GetDescriptor+0x320>
    }
  }
  else
  {
    (void)USBD_CtlSendStatus(pdev);
 8006466:	6878      	ldr	r0, [r7, #4]
 8006468:	f000 fa95 	bl	8006996 <USBD_CtlSendStatus>
 800646c:	e000      	b.n	8006470 <USBD_GetDescriptor+0x320>
    return;
 800646e:	bf00      	nop
  }
}
 8006470:	3710      	adds	r7, #16
 8006472:	46bd      	mov	sp, r7
 8006474:	bd80      	pop	{r7, pc}
 8006476:	bf00      	nop

08006478 <USBD_SetAddress>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetAddress(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8006478:	b580      	push	{r7, lr}
 800647a:	b084      	sub	sp, #16
 800647c:	af00      	add	r7, sp, #0
 800647e:	6078      	str	r0, [r7, #4]
 8006480:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 8006482:	683b      	ldr	r3, [r7, #0]
 8006484:	889b      	ldrh	r3, [r3, #4]
 8006486:	2b00      	cmp	r3, #0
 8006488:	d131      	bne.n	80064ee <USBD_SetAddress+0x76>
 800648a:	683b      	ldr	r3, [r7, #0]
 800648c:	88db      	ldrh	r3, [r3, #6]
 800648e:	2b00      	cmp	r3, #0
 8006490:	d12d      	bne.n	80064ee <USBD_SetAddress+0x76>
 8006492:	683b      	ldr	r3, [r7, #0]
 8006494:	885b      	ldrh	r3, [r3, #2]
 8006496:	2b7f      	cmp	r3, #127	; 0x7f
 8006498:	d829      	bhi.n	80064ee <USBD_SetAddress+0x76>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 800649a:	683b      	ldr	r3, [r7, #0]
 800649c:	885b      	ldrh	r3, [r3, #2]
 800649e:	b2db      	uxtb	r3, r3
 80064a0:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80064a4:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80064a6:	687b      	ldr	r3, [r7, #4]
 80064a8:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80064ac:	b2db      	uxtb	r3, r3
 80064ae:	2b03      	cmp	r3, #3
 80064b0:	d104      	bne.n	80064bc <USBD_SetAddress+0x44>
    {
      USBD_CtlError(pdev, req);
 80064b2:	6839      	ldr	r1, [r7, #0]
 80064b4:	6878      	ldr	r0, [r7, #4]
 80064b6:	f000 f9a3 	bl	8006800 <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80064ba:	e01d      	b.n	80064f8 <USBD_SetAddress+0x80>
    }
    else
    {
      pdev->dev_address = dev_addr;
 80064bc:	687b      	ldr	r3, [r7, #4]
 80064be:	7bfa      	ldrb	r2, [r7, #15]
 80064c0:	f883 229e 	strb.w	r2, [r3, #670]	; 0x29e
      (void)USBD_LL_SetUSBAddress(pdev, dev_addr);
 80064c4:	7bfb      	ldrb	r3, [r7, #15]
 80064c6:	4619      	mov	r1, r3
 80064c8:	6878      	ldr	r0, [r7, #4]
 80064ca:	f000 ffbf 	bl	800744c <USBD_LL_SetUSBAddress>
      (void)USBD_CtlSendStatus(pdev);
 80064ce:	6878      	ldr	r0, [r7, #4]
 80064d0:	f000 fa61 	bl	8006996 <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 80064d4:	7bfb      	ldrb	r3, [r7, #15]
 80064d6:	2b00      	cmp	r3, #0
 80064d8:	d004      	beq.n	80064e4 <USBD_SetAddress+0x6c>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 80064da:	687b      	ldr	r3, [r7, #4]
 80064dc:	2202      	movs	r2, #2
 80064de:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80064e2:	e009      	b.n	80064f8 <USBD_SetAddress+0x80>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 80064e4:	687b      	ldr	r3, [r7, #4]
 80064e6:	2201      	movs	r2, #1
 80064e8:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80064ec:	e004      	b.n	80064f8 <USBD_SetAddress+0x80>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 80064ee:	6839      	ldr	r1, [r7, #0]
 80064f0:	6878      	ldr	r0, [r7, #4]
 80064f2:	f000 f985 	bl	8006800 <USBD_CtlError>
  }
}
 80064f6:	bf00      	nop
 80064f8:	bf00      	nop
 80064fa:	3710      	adds	r7, #16
 80064fc:	46bd      	mov	sp, r7
 80064fe:	bd80      	pop	{r7, pc}

08006500 <USBD_SetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static USBD_StatusTypeDef USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8006500:	b580      	push	{r7, lr}
 8006502:	b084      	sub	sp, #16
 8006504:	af00      	add	r7, sp, #0
 8006506:	6078      	str	r0, [r7, #4]
 8006508:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800650a:	2300      	movs	r3, #0
 800650c:	73fb      	strb	r3, [r7, #15]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 800650e:	683b      	ldr	r3, [r7, #0]
 8006510:	885b      	ldrh	r3, [r3, #2]
 8006512:	b2da      	uxtb	r2, r3
 8006514:	4b4c      	ldr	r3, [pc, #304]	; (8006648 <USBD_SetConfig+0x148>)
 8006516:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 8006518:	4b4b      	ldr	r3, [pc, #300]	; (8006648 <USBD_SetConfig+0x148>)
 800651a:	781b      	ldrb	r3, [r3, #0]
 800651c:	2b01      	cmp	r3, #1
 800651e:	d905      	bls.n	800652c <USBD_SetConfig+0x2c>
  {
    USBD_CtlError(pdev, req);
 8006520:	6839      	ldr	r1, [r7, #0]
 8006522:	6878      	ldr	r0, [r7, #4]
 8006524:	f000 f96c 	bl	8006800 <USBD_CtlError>
    return USBD_FAIL;
 8006528:	2303      	movs	r3, #3
 800652a:	e088      	b.n	800663e <USBD_SetConfig+0x13e>
  }

  switch (pdev->dev_state)
 800652c:	687b      	ldr	r3, [r7, #4]
 800652e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006532:	b2db      	uxtb	r3, r3
 8006534:	2b02      	cmp	r3, #2
 8006536:	d002      	beq.n	800653e <USBD_SetConfig+0x3e>
 8006538:	2b03      	cmp	r3, #3
 800653a:	d025      	beq.n	8006588 <USBD_SetConfig+0x88>
 800653c:	e071      	b.n	8006622 <USBD_SetConfig+0x122>
  {
    case USBD_STATE_ADDRESSED:
      if (cfgidx != 0U)
 800653e:	4b42      	ldr	r3, [pc, #264]	; (8006648 <USBD_SetConfig+0x148>)
 8006540:	781b      	ldrb	r3, [r3, #0]
 8006542:	2b00      	cmp	r3, #0
 8006544:	d01c      	beq.n	8006580 <USBD_SetConfig+0x80>
      {
        pdev->dev_config = cfgidx;
 8006546:	4b40      	ldr	r3, [pc, #256]	; (8006648 <USBD_SetConfig+0x148>)
 8006548:	781b      	ldrb	r3, [r3, #0]
 800654a:	461a      	mov	r2, r3
 800654c:	687b      	ldr	r3, [r7, #4]
 800654e:	605a      	str	r2, [r3, #4]

        ret = USBD_SetClassConfig(pdev, cfgidx);
 8006550:	4b3d      	ldr	r3, [pc, #244]	; (8006648 <USBD_SetConfig+0x148>)
 8006552:	781b      	ldrb	r3, [r3, #0]
 8006554:	4619      	mov	r1, r3
 8006556:	6878      	ldr	r0, [r7, #4]
 8006558:	f7ff f91e 	bl	8005798 <USBD_SetClassConfig>
 800655c:	4603      	mov	r3, r0
 800655e:	73fb      	strb	r3, [r7, #15]

        if (ret != USBD_OK)
 8006560:	7bfb      	ldrb	r3, [r7, #15]
 8006562:	2b00      	cmp	r3, #0
 8006564:	d004      	beq.n	8006570 <USBD_SetConfig+0x70>
        {
          USBD_CtlError(pdev, req);
 8006566:	6839      	ldr	r1, [r7, #0]
 8006568:	6878      	ldr	r0, [r7, #4]
 800656a:	f000 f949 	bl	8006800 <USBD_CtlError>
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 800656e:	e065      	b.n	800663c <USBD_SetConfig+0x13c>
          (void)USBD_CtlSendStatus(pdev);
 8006570:	6878      	ldr	r0, [r7, #4]
 8006572:	f000 fa10 	bl	8006996 <USBD_CtlSendStatus>
          pdev->dev_state = USBD_STATE_CONFIGURED;
 8006576:	687b      	ldr	r3, [r7, #4]
 8006578:	2203      	movs	r2, #3
 800657a:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      break;
 800657e:	e05d      	b.n	800663c <USBD_SetConfig+0x13c>
        (void)USBD_CtlSendStatus(pdev);
 8006580:	6878      	ldr	r0, [r7, #4]
 8006582:	f000 fa08 	bl	8006996 <USBD_CtlSendStatus>
      break;
 8006586:	e059      	b.n	800663c <USBD_SetConfig+0x13c>

    case USBD_STATE_CONFIGURED:
      if (cfgidx == 0U)
 8006588:	4b2f      	ldr	r3, [pc, #188]	; (8006648 <USBD_SetConfig+0x148>)
 800658a:	781b      	ldrb	r3, [r3, #0]
 800658c:	2b00      	cmp	r3, #0
 800658e:	d112      	bne.n	80065b6 <USBD_SetConfig+0xb6>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 8006590:	687b      	ldr	r3, [r7, #4]
 8006592:	2202      	movs	r2, #2
 8006594:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
        pdev->dev_config = cfgidx;
 8006598:	4b2b      	ldr	r3, [pc, #172]	; (8006648 <USBD_SetConfig+0x148>)
 800659a:	781b      	ldrb	r3, [r3, #0]
 800659c:	461a      	mov	r2, r3
 800659e:	687b      	ldr	r3, [r7, #4]
 80065a0:	605a      	str	r2, [r3, #4]
        (void)USBD_ClrClassConfig(pdev, cfgidx);
 80065a2:	4b29      	ldr	r3, [pc, #164]	; (8006648 <USBD_SetConfig+0x148>)
 80065a4:	781b      	ldrb	r3, [r3, #0]
 80065a6:	4619      	mov	r1, r3
 80065a8:	6878      	ldr	r0, [r7, #4]
 80065aa:	f7ff f911 	bl	80057d0 <USBD_ClrClassConfig>
        (void)USBD_CtlSendStatus(pdev);
 80065ae:	6878      	ldr	r0, [r7, #4]
 80065b0:	f000 f9f1 	bl	8006996 <USBD_CtlSendStatus>
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 80065b4:	e042      	b.n	800663c <USBD_SetConfig+0x13c>
      else if (cfgidx != pdev->dev_config)
 80065b6:	4b24      	ldr	r3, [pc, #144]	; (8006648 <USBD_SetConfig+0x148>)
 80065b8:	781b      	ldrb	r3, [r3, #0]
 80065ba:	461a      	mov	r2, r3
 80065bc:	687b      	ldr	r3, [r7, #4]
 80065be:	685b      	ldr	r3, [r3, #4]
 80065c0:	429a      	cmp	r2, r3
 80065c2:	d02a      	beq.n	800661a <USBD_SetConfig+0x11a>
        (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 80065c4:	687b      	ldr	r3, [r7, #4]
 80065c6:	685b      	ldr	r3, [r3, #4]
 80065c8:	b2db      	uxtb	r3, r3
 80065ca:	4619      	mov	r1, r3
 80065cc:	6878      	ldr	r0, [r7, #4]
 80065ce:	f7ff f8ff 	bl	80057d0 <USBD_ClrClassConfig>
        pdev->dev_config = cfgidx;
 80065d2:	4b1d      	ldr	r3, [pc, #116]	; (8006648 <USBD_SetConfig+0x148>)
 80065d4:	781b      	ldrb	r3, [r3, #0]
 80065d6:	461a      	mov	r2, r3
 80065d8:	687b      	ldr	r3, [r7, #4]
 80065da:	605a      	str	r2, [r3, #4]
        ret = USBD_SetClassConfig(pdev, cfgidx);
 80065dc:	4b1a      	ldr	r3, [pc, #104]	; (8006648 <USBD_SetConfig+0x148>)
 80065de:	781b      	ldrb	r3, [r3, #0]
 80065e0:	4619      	mov	r1, r3
 80065e2:	6878      	ldr	r0, [r7, #4]
 80065e4:	f7ff f8d8 	bl	8005798 <USBD_SetClassConfig>
 80065e8:	4603      	mov	r3, r0
 80065ea:	73fb      	strb	r3, [r7, #15]
        if (ret != USBD_OK)
 80065ec:	7bfb      	ldrb	r3, [r7, #15]
 80065ee:	2b00      	cmp	r3, #0
 80065f0:	d00f      	beq.n	8006612 <USBD_SetConfig+0x112>
          USBD_CtlError(pdev, req);
 80065f2:	6839      	ldr	r1, [r7, #0]
 80065f4:	6878      	ldr	r0, [r7, #4]
 80065f6:	f000 f903 	bl	8006800 <USBD_CtlError>
          (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 80065fa:	687b      	ldr	r3, [r7, #4]
 80065fc:	685b      	ldr	r3, [r3, #4]
 80065fe:	b2db      	uxtb	r3, r3
 8006600:	4619      	mov	r1, r3
 8006602:	6878      	ldr	r0, [r7, #4]
 8006604:	f7ff f8e4 	bl	80057d0 <USBD_ClrClassConfig>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 8006608:	687b      	ldr	r3, [r7, #4]
 800660a:	2202      	movs	r2, #2
 800660c:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      break;
 8006610:	e014      	b.n	800663c <USBD_SetConfig+0x13c>
          (void)USBD_CtlSendStatus(pdev);
 8006612:	6878      	ldr	r0, [r7, #4]
 8006614:	f000 f9bf 	bl	8006996 <USBD_CtlSendStatus>
      break;
 8006618:	e010      	b.n	800663c <USBD_SetConfig+0x13c>
        (void)USBD_CtlSendStatus(pdev);
 800661a:	6878      	ldr	r0, [r7, #4]
 800661c:	f000 f9bb 	bl	8006996 <USBD_CtlSendStatus>
      break;
 8006620:	e00c      	b.n	800663c <USBD_SetConfig+0x13c>

    default:
      USBD_CtlError(pdev, req);
 8006622:	6839      	ldr	r1, [r7, #0]
 8006624:	6878      	ldr	r0, [r7, #4]
 8006626:	f000 f8eb 	bl	8006800 <USBD_CtlError>
      (void)USBD_ClrClassConfig(pdev, cfgidx);
 800662a:	4b07      	ldr	r3, [pc, #28]	; (8006648 <USBD_SetConfig+0x148>)
 800662c:	781b      	ldrb	r3, [r3, #0]
 800662e:	4619      	mov	r1, r3
 8006630:	6878      	ldr	r0, [r7, #4]
 8006632:	f7ff f8cd 	bl	80057d0 <USBD_ClrClassConfig>
      ret = USBD_FAIL;
 8006636:	2303      	movs	r3, #3
 8006638:	73fb      	strb	r3, [r7, #15]
      break;
 800663a:	bf00      	nop
  }

  return ret;
 800663c:	7bfb      	ldrb	r3, [r7, #15]
}
 800663e:	4618      	mov	r0, r3
 8006640:	3710      	adds	r7, #16
 8006642:	46bd      	mov	sp, r7
 8006644:	bd80      	pop	{r7, pc}
 8006646:	bf00      	nop
 8006648:	200001ac 	.word	0x200001ac

0800664c <USBD_GetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800664c:	b580      	push	{r7, lr}
 800664e:	b082      	sub	sp, #8
 8006650:	af00      	add	r7, sp, #0
 8006652:	6078      	str	r0, [r7, #4]
 8006654:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 8006656:	683b      	ldr	r3, [r7, #0]
 8006658:	88db      	ldrh	r3, [r3, #6]
 800665a:	2b01      	cmp	r3, #1
 800665c:	d004      	beq.n	8006668 <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 800665e:	6839      	ldr	r1, [r7, #0]
 8006660:	6878      	ldr	r0, [r7, #4]
 8006662:	f000 f8cd 	bl	8006800 <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 8006666:	e023      	b.n	80066b0 <USBD_GetConfig+0x64>
    switch (pdev->dev_state)
 8006668:	687b      	ldr	r3, [r7, #4]
 800666a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800666e:	b2db      	uxtb	r3, r3
 8006670:	2b02      	cmp	r3, #2
 8006672:	dc02      	bgt.n	800667a <USBD_GetConfig+0x2e>
 8006674:	2b00      	cmp	r3, #0
 8006676:	dc03      	bgt.n	8006680 <USBD_GetConfig+0x34>
 8006678:	e015      	b.n	80066a6 <USBD_GetConfig+0x5a>
 800667a:	2b03      	cmp	r3, #3
 800667c:	d00b      	beq.n	8006696 <USBD_GetConfig+0x4a>
 800667e:	e012      	b.n	80066a6 <USBD_GetConfig+0x5a>
        pdev->dev_default_config = 0U;
 8006680:	687b      	ldr	r3, [r7, #4]
 8006682:	2200      	movs	r2, #0
 8006684:	609a      	str	r2, [r3, #8]
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_default_config, 1U);
 8006686:	687b      	ldr	r3, [r7, #4]
 8006688:	3308      	adds	r3, #8
 800668a:	2201      	movs	r2, #1
 800668c:	4619      	mov	r1, r3
 800668e:	6878      	ldr	r0, [r7, #4]
 8006690:	f000 f927 	bl	80068e2 <USBD_CtlSendData>
        break;
 8006694:	e00c      	b.n	80066b0 <USBD_GetConfig+0x64>
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config, 1U);
 8006696:	687b      	ldr	r3, [r7, #4]
 8006698:	3304      	adds	r3, #4
 800669a:	2201      	movs	r2, #1
 800669c:	4619      	mov	r1, r3
 800669e:	6878      	ldr	r0, [r7, #4]
 80066a0:	f000 f91f 	bl	80068e2 <USBD_CtlSendData>
        break;
 80066a4:	e004      	b.n	80066b0 <USBD_GetConfig+0x64>
        USBD_CtlError(pdev, req);
 80066a6:	6839      	ldr	r1, [r7, #0]
 80066a8:	6878      	ldr	r0, [r7, #4]
 80066aa:	f000 f8a9 	bl	8006800 <USBD_CtlError>
        break;
 80066ae:	bf00      	nop
}
 80066b0:	bf00      	nop
 80066b2:	3708      	adds	r7, #8
 80066b4:	46bd      	mov	sp, r7
 80066b6:	bd80      	pop	{r7, pc}

080066b8 <USBD_GetStatus>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80066b8:	b580      	push	{r7, lr}
 80066ba:	b082      	sub	sp, #8
 80066bc:	af00      	add	r7, sp, #0
 80066be:	6078      	str	r0, [r7, #4]
 80066c0:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 80066c2:	687b      	ldr	r3, [r7, #4]
 80066c4:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80066c8:	b2db      	uxtb	r3, r3
 80066ca:	3b01      	subs	r3, #1
 80066cc:	2b02      	cmp	r3, #2
 80066ce:	d81e      	bhi.n	800670e <USBD_GetStatus+0x56>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 80066d0:	683b      	ldr	r3, [r7, #0]
 80066d2:	88db      	ldrh	r3, [r3, #6]
 80066d4:	2b02      	cmp	r3, #2
 80066d6:	d004      	beq.n	80066e2 <USBD_GetStatus+0x2a>
      {
        USBD_CtlError(pdev, req);
 80066d8:	6839      	ldr	r1, [r7, #0]
 80066da:	6878      	ldr	r0, [r7, #4]
 80066dc:	f000 f890 	bl	8006800 <USBD_CtlError>
        break;
 80066e0:	e01a      	b.n	8006718 <USBD_GetStatus+0x60>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 80066e2:	687b      	ldr	r3, [r7, #4]
 80066e4:	2201      	movs	r2, #1
 80066e6:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif

      if (pdev->dev_remote_wakeup != 0U)
 80066e8:	687b      	ldr	r3, [r7, #4]
 80066ea:	f8d3 32a4 	ldr.w	r3, [r3, #676]	; 0x2a4
 80066ee:	2b00      	cmp	r3, #0
 80066f0:	d005      	beq.n	80066fe <USBD_GetStatus+0x46>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 80066f2:	687b      	ldr	r3, [r7, #4]
 80066f4:	68db      	ldr	r3, [r3, #12]
 80066f6:	f043 0202 	orr.w	r2, r3, #2
 80066fa:	687b      	ldr	r3, [r7, #4]
 80066fc:	60da      	str	r2, [r3, #12]
      }

      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config_status, 2U);
 80066fe:	687b      	ldr	r3, [r7, #4]
 8006700:	330c      	adds	r3, #12
 8006702:	2202      	movs	r2, #2
 8006704:	4619      	mov	r1, r3
 8006706:	6878      	ldr	r0, [r7, #4]
 8006708:	f000 f8eb 	bl	80068e2 <USBD_CtlSendData>
      break;
 800670c:	e004      	b.n	8006718 <USBD_GetStatus+0x60>

    default:
      USBD_CtlError(pdev, req);
 800670e:	6839      	ldr	r1, [r7, #0]
 8006710:	6878      	ldr	r0, [r7, #4]
 8006712:	f000 f875 	bl	8006800 <USBD_CtlError>
      break;
 8006716:	bf00      	nop
  }
}
 8006718:	bf00      	nop
 800671a:	3708      	adds	r7, #8
 800671c:	46bd      	mov	sp, r7
 800671e:	bd80      	pop	{r7, pc}

08006720 <USBD_SetFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8006720:	b580      	push	{r7, lr}
 8006722:	b082      	sub	sp, #8
 8006724:	af00      	add	r7, sp, #0
 8006726:	6078      	str	r0, [r7, #4]
 8006728:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800672a:	683b      	ldr	r3, [r7, #0]
 800672c:	885b      	ldrh	r3, [r3, #2]
 800672e:	2b01      	cmp	r3, #1
 8006730:	d106      	bne.n	8006740 <USBD_SetFeature+0x20>
  {
    pdev->dev_remote_wakeup = 1U;
 8006732:	687b      	ldr	r3, [r7, #4]
 8006734:	2201      	movs	r2, #1
 8006736:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
    (void)USBD_CtlSendStatus(pdev);
 800673a:	6878      	ldr	r0, [r7, #4]
 800673c:	f000 f92b 	bl	8006996 <USBD_CtlSendStatus>
  }
}
 8006740:	bf00      	nop
 8006742:	3708      	adds	r7, #8
 8006744:	46bd      	mov	sp, r7
 8006746:	bd80      	pop	{r7, pc}

08006748 <USBD_ClrFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8006748:	b580      	push	{r7, lr}
 800674a:	b082      	sub	sp, #8
 800674c:	af00      	add	r7, sp, #0
 800674e:	6078      	str	r0, [r7, #4]
 8006750:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 8006752:	687b      	ldr	r3, [r7, #4]
 8006754:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006758:	b2db      	uxtb	r3, r3
 800675a:	3b01      	subs	r3, #1
 800675c:	2b02      	cmp	r3, #2
 800675e:	d80b      	bhi.n	8006778 <USBD_ClrFeature+0x30>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8006760:	683b      	ldr	r3, [r7, #0]
 8006762:	885b      	ldrh	r3, [r3, #2]
 8006764:	2b01      	cmp	r3, #1
 8006766:	d10c      	bne.n	8006782 <USBD_ClrFeature+0x3a>
      {
        pdev->dev_remote_wakeup = 0U;
 8006768:	687b      	ldr	r3, [r7, #4]
 800676a:	2200      	movs	r2, #0
 800676c:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
        (void)USBD_CtlSendStatus(pdev);
 8006770:	6878      	ldr	r0, [r7, #4]
 8006772:	f000 f910 	bl	8006996 <USBD_CtlSendStatus>
      }
      break;
 8006776:	e004      	b.n	8006782 <USBD_ClrFeature+0x3a>

    default:
      USBD_CtlError(pdev, req);
 8006778:	6839      	ldr	r1, [r7, #0]
 800677a:	6878      	ldr	r0, [r7, #4]
 800677c:	f000 f840 	bl	8006800 <USBD_CtlError>
      break;
 8006780:	e000      	b.n	8006784 <USBD_ClrFeature+0x3c>
      break;
 8006782:	bf00      	nop
  }
}
 8006784:	bf00      	nop
 8006786:	3708      	adds	r7, #8
 8006788:	46bd      	mov	sp, r7
 800678a:	bd80      	pop	{r7, pc}

0800678c <USBD_ParseSetupRequest>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 800678c:	b580      	push	{r7, lr}
 800678e:	b084      	sub	sp, #16
 8006790:	af00      	add	r7, sp, #0
 8006792:	6078      	str	r0, [r7, #4]
 8006794:	6039      	str	r1, [r7, #0]
  uint8_t *pbuff = pdata;
 8006796:	683b      	ldr	r3, [r7, #0]
 8006798:	60fb      	str	r3, [r7, #12]

  req->bmRequest = *(uint8_t *)(pbuff);
 800679a:	68fb      	ldr	r3, [r7, #12]
 800679c:	781a      	ldrb	r2, [r3, #0]
 800679e:	687b      	ldr	r3, [r7, #4]
 80067a0:	701a      	strb	r2, [r3, #0]

  pbuff++;
 80067a2:	68fb      	ldr	r3, [r7, #12]
 80067a4:	3301      	adds	r3, #1
 80067a6:	60fb      	str	r3, [r7, #12]
  req->bRequest = *(uint8_t *)(pbuff);
 80067a8:	68fb      	ldr	r3, [r7, #12]
 80067aa:	781a      	ldrb	r2, [r3, #0]
 80067ac:	687b      	ldr	r3, [r7, #4]
 80067ae:	705a      	strb	r2, [r3, #1]

  pbuff++;
 80067b0:	68fb      	ldr	r3, [r7, #12]
 80067b2:	3301      	adds	r3, #1
 80067b4:	60fb      	str	r3, [r7, #12]
  req->wValue = SWAPBYTE(pbuff);
 80067b6:	68f8      	ldr	r0, [r7, #12]
 80067b8:	f7ff fa91 	bl	8005cde <SWAPBYTE>
 80067bc:	4603      	mov	r3, r0
 80067be:	461a      	mov	r2, r3
 80067c0:	687b      	ldr	r3, [r7, #4]
 80067c2:	805a      	strh	r2, [r3, #2]

  pbuff++;
 80067c4:	68fb      	ldr	r3, [r7, #12]
 80067c6:	3301      	adds	r3, #1
 80067c8:	60fb      	str	r3, [r7, #12]
  pbuff++;
 80067ca:	68fb      	ldr	r3, [r7, #12]
 80067cc:	3301      	adds	r3, #1
 80067ce:	60fb      	str	r3, [r7, #12]
  req->wIndex = SWAPBYTE(pbuff);
 80067d0:	68f8      	ldr	r0, [r7, #12]
 80067d2:	f7ff fa84 	bl	8005cde <SWAPBYTE>
 80067d6:	4603      	mov	r3, r0
 80067d8:	461a      	mov	r2, r3
 80067da:	687b      	ldr	r3, [r7, #4]
 80067dc:	809a      	strh	r2, [r3, #4]

  pbuff++;
 80067de:	68fb      	ldr	r3, [r7, #12]
 80067e0:	3301      	adds	r3, #1
 80067e2:	60fb      	str	r3, [r7, #12]
  pbuff++;
 80067e4:	68fb      	ldr	r3, [r7, #12]
 80067e6:	3301      	adds	r3, #1
 80067e8:	60fb      	str	r3, [r7, #12]
  req->wLength = SWAPBYTE(pbuff);
 80067ea:	68f8      	ldr	r0, [r7, #12]
 80067ec:	f7ff fa77 	bl	8005cde <SWAPBYTE>
 80067f0:	4603      	mov	r3, r0
 80067f2:	461a      	mov	r2, r3
 80067f4:	687b      	ldr	r3, [r7, #4]
 80067f6:	80da      	strh	r2, [r3, #6]
}
 80067f8:	bf00      	nop
 80067fa:	3710      	adds	r7, #16
 80067fc:	46bd      	mov	sp, r7
 80067fe:	bd80      	pop	{r7, pc}

08006800 <USBD_CtlError>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_CtlError(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8006800:	b580      	push	{r7, lr}
 8006802:	b082      	sub	sp, #8
 8006804:	af00      	add	r7, sp, #0
 8006806:	6078      	str	r0, [r7, #4]
 8006808:	6039      	str	r1, [r7, #0]
  UNUSED(req);

  (void)USBD_LL_StallEP(pdev, 0x80U);
 800680a:	2180      	movs	r1, #128	; 0x80
 800680c:	6878      	ldr	r0, [r7, #4]
 800680e:	f000 fd85 	bl	800731c <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 8006812:	2100      	movs	r1, #0
 8006814:	6878      	ldr	r0, [r7, #4]
 8006816:	f000 fd81 	bl	800731c <USBD_LL_StallEP>
}
 800681a:	bf00      	nop
 800681c:	3708      	adds	r7, #8
 800681e:	46bd      	mov	sp, r7
 8006820:	bd80      	pop	{r7, pc}

08006822 <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 8006822:	b580      	push	{r7, lr}
 8006824:	b086      	sub	sp, #24
 8006826:	af00      	add	r7, sp, #0
 8006828:	60f8      	str	r0, [r7, #12]
 800682a:	60b9      	str	r1, [r7, #8]
 800682c:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 800682e:	2300      	movs	r3, #0
 8006830:	75fb      	strb	r3, [r7, #23]
  uint8_t *pdesc;

  if (desc == NULL)
 8006832:	68fb      	ldr	r3, [r7, #12]
 8006834:	2b00      	cmp	r3, #0
 8006836:	d036      	beq.n	80068a6 <USBD_GetString+0x84>
  {
    return;
  }

  pdesc = desc;
 8006838:	68fb      	ldr	r3, [r7, #12]
 800683a:	613b      	str	r3, [r7, #16]
  *len = ((uint16_t)USBD_GetLen(pdesc) * 2U) + 2U;
 800683c:	6938      	ldr	r0, [r7, #16]
 800683e:	f000 f836 	bl	80068ae <USBD_GetLen>
 8006842:	4603      	mov	r3, r0
 8006844:	3301      	adds	r3, #1
 8006846:	b29b      	uxth	r3, r3
 8006848:	005b      	lsls	r3, r3, #1
 800684a:	b29a      	uxth	r2, r3
 800684c:	687b      	ldr	r3, [r7, #4]
 800684e:	801a      	strh	r2, [r3, #0]

  unicode[idx] = *(uint8_t *)len;
 8006850:	7dfb      	ldrb	r3, [r7, #23]
 8006852:	68ba      	ldr	r2, [r7, #8]
 8006854:	4413      	add	r3, r2
 8006856:	687a      	ldr	r2, [r7, #4]
 8006858:	7812      	ldrb	r2, [r2, #0]
 800685a:	701a      	strb	r2, [r3, #0]
  idx++;
 800685c:	7dfb      	ldrb	r3, [r7, #23]
 800685e:	3301      	adds	r3, #1
 8006860:	75fb      	strb	r3, [r7, #23]
  unicode[idx] = USB_DESC_TYPE_STRING;
 8006862:	7dfb      	ldrb	r3, [r7, #23]
 8006864:	68ba      	ldr	r2, [r7, #8]
 8006866:	4413      	add	r3, r2
 8006868:	2203      	movs	r2, #3
 800686a:	701a      	strb	r2, [r3, #0]
  idx++;
 800686c:	7dfb      	ldrb	r3, [r7, #23]
 800686e:	3301      	adds	r3, #1
 8006870:	75fb      	strb	r3, [r7, #23]

  while (*pdesc != (uint8_t)'\0')
 8006872:	e013      	b.n	800689c <USBD_GetString+0x7a>
  {
    unicode[idx] = *pdesc;
 8006874:	7dfb      	ldrb	r3, [r7, #23]
 8006876:	68ba      	ldr	r2, [r7, #8]
 8006878:	4413      	add	r3, r2
 800687a:	693a      	ldr	r2, [r7, #16]
 800687c:	7812      	ldrb	r2, [r2, #0]
 800687e:	701a      	strb	r2, [r3, #0]
    pdesc++;
 8006880:	693b      	ldr	r3, [r7, #16]
 8006882:	3301      	adds	r3, #1
 8006884:	613b      	str	r3, [r7, #16]
    idx++;
 8006886:	7dfb      	ldrb	r3, [r7, #23]
 8006888:	3301      	adds	r3, #1
 800688a:	75fb      	strb	r3, [r7, #23]

    unicode[idx] = 0U;
 800688c:	7dfb      	ldrb	r3, [r7, #23]
 800688e:	68ba      	ldr	r2, [r7, #8]
 8006890:	4413      	add	r3, r2
 8006892:	2200      	movs	r2, #0
 8006894:	701a      	strb	r2, [r3, #0]
    idx++;
 8006896:	7dfb      	ldrb	r3, [r7, #23]
 8006898:	3301      	adds	r3, #1
 800689a:	75fb      	strb	r3, [r7, #23]
  while (*pdesc != (uint8_t)'\0')
 800689c:	693b      	ldr	r3, [r7, #16]
 800689e:	781b      	ldrb	r3, [r3, #0]
 80068a0:	2b00      	cmp	r3, #0
 80068a2:	d1e7      	bne.n	8006874 <USBD_GetString+0x52>
 80068a4:	e000      	b.n	80068a8 <USBD_GetString+0x86>
    return;
 80068a6:	bf00      	nop
  }
}
 80068a8:	3718      	adds	r7, #24
 80068aa:	46bd      	mov	sp, r7
 80068ac:	bd80      	pop	{r7, pc}

080068ae <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 80068ae:	b480      	push	{r7}
 80068b0:	b085      	sub	sp, #20
 80068b2:	af00      	add	r7, sp, #0
 80068b4:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 80068b6:	2300      	movs	r3, #0
 80068b8:	73fb      	strb	r3, [r7, #15]
  uint8_t *pbuff = buf;
 80068ba:	687b      	ldr	r3, [r7, #4]
 80068bc:	60bb      	str	r3, [r7, #8]

  while (*pbuff != (uint8_t)'\0')
 80068be:	e005      	b.n	80068cc <USBD_GetLen+0x1e>
  {
    len++;
 80068c0:	7bfb      	ldrb	r3, [r7, #15]
 80068c2:	3301      	adds	r3, #1
 80068c4:	73fb      	strb	r3, [r7, #15]
    pbuff++;
 80068c6:	68bb      	ldr	r3, [r7, #8]
 80068c8:	3301      	adds	r3, #1
 80068ca:	60bb      	str	r3, [r7, #8]
  while (*pbuff != (uint8_t)'\0')
 80068cc:	68bb      	ldr	r3, [r7, #8]
 80068ce:	781b      	ldrb	r3, [r3, #0]
 80068d0:	2b00      	cmp	r3, #0
 80068d2:	d1f5      	bne.n	80068c0 <USBD_GetLen+0x12>
  }

  return len;
 80068d4:	7bfb      	ldrb	r3, [r7, #15]
}
 80068d6:	4618      	mov	r0, r3
 80068d8:	3714      	adds	r7, #20
 80068da:	46bd      	mov	sp, r7
 80068dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80068e0:	4770      	bx	lr

080068e2 <USBD_CtlSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint32_t len)
{
 80068e2:	b580      	push	{r7, lr}
 80068e4:	b084      	sub	sp, #16
 80068e6:	af00      	add	r7, sp, #0
 80068e8:	60f8      	str	r0, [r7, #12]
 80068ea:	60b9      	str	r1, [r7, #8]
 80068ec:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 80068ee:	68fb      	ldr	r3, [r7, #12]
 80068f0:	2202      	movs	r2, #2
 80068f2:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_in[0].total_length = len;
 80068f6:	68fb      	ldr	r3, [r7, #12]
 80068f8:	687a      	ldr	r2, [r7, #4]
 80068fa:	619a      	str	r2, [r3, #24]

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_in[0].rem_length = 0U;
#else
  pdev->ep_in[0].rem_length = len;
 80068fc:	68fb      	ldr	r3, [r7, #12]
 80068fe:	687a      	ldr	r2, [r7, #4]
 8006900:	61da      	str	r2, [r3, #28]
#endif

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 8006902:	687b      	ldr	r3, [r7, #4]
 8006904:	68ba      	ldr	r2, [r7, #8]
 8006906:	2100      	movs	r1, #0
 8006908:	68f8      	ldr	r0, [r7, #12]
 800690a:	f000 fdd5 	bl	80074b8 <USBD_LL_Transmit>

  return USBD_OK;
 800690e:	2300      	movs	r3, #0
}
 8006910:	4618      	mov	r0, r3
 8006912:	3710      	adds	r7, #16
 8006914:	46bd      	mov	sp, r7
 8006916:	bd80      	pop	{r7, pc}

08006918 <USBD_CtlContinueSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint32_t len)
{
 8006918:	b580      	push	{r7, lr}
 800691a:	b084      	sub	sp, #16
 800691c:	af00      	add	r7, sp, #0
 800691e:	60f8      	str	r0, [r7, #12]
 8006920:	60b9      	str	r1, [r7, #8]
 8006922:	607a      	str	r2, [r7, #4]
  /* Start the next transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 8006924:	687b      	ldr	r3, [r7, #4]
 8006926:	68ba      	ldr	r2, [r7, #8]
 8006928:	2100      	movs	r1, #0
 800692a:	68f8      	ldr	r0, [r7, #12]
 800692c:	f000 fdc4 	bl	80074b8 <USBD_LL_Transmit>

  return USBD_OK;
 8006930:	2300      	movs	r3, #0
}
 8006932:	4618      	mov	r0, r3
 8006934:	3710      	adds	r7, #16
 8006936:	46bd      	mov	sp, r7
 8006938:	bd80      	pop	{r7, pc}

0800693a <USBD_CtlPrepareRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint32_t len)
{
 800693a:	b580      	push	{r7, lr}
 800693c:	b084      	sub	sp, #16
 800693e:	af00      	add	r7, sp, #0
 8006940:	60f8      	str	r0, [r7, #12]
 8006942:	60b9      	str	r1, [r7, #8]
 8006944:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 8006946:	68fb      	ldr	r3, [r7, #12]
 8006948:	2203      	movs	r2, #3
 800694a:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_out[0].total_length = len;
 800694e:	68fb      	ldr	r3, [r7, #12]
 8006950:	687a      	ldr	r2, [r7, #4]
 8006952:	f8c3 2158 	str.w	r2, [r3, #344]	; 0x158

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_out[0].rem_length = 0U;
#else
  pdev->ep_out[0].rem_length = len;
 8006956:	68fb      	ldr	r3, [r7, #12]
 8006958:	687a      	ldr	r2, [r7, #4]
 800695a:	f8c3 215c 	str.w	r2, [r3, #348]	; 0x15c
#endif

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 800695e:	687b      	ldr	r3, [r7, #4]
 8006960:	68ba      	ldr	r2, [r7, #8]
 8006962:	2100      	movs	r1, #0
 8006964:	68f8      	ldr	r0, [r7, #12]
 8006966:	f000 fddf 	bl	8007528 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800696a:	2300      	movs	r3, #0
}
 800696c:	4618      	mov	r0, r3
 800696e:	3710      	adds	r7, #16
 8006970:	46bd      	mov	sp, r7
 8006972:	bd80      	pop	{r7, pc}

08006974 <USBD_CtlContinueRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint32_t len)
{
 8006974:	b580      	push	{r7, lr}
 8006976:	b084      	sub	sp, #16
 8006978:	af00      	add	r7, sp, #0
 800697a:	60f8      	str	r0, [r7, #12]
 800697c:	60b9      	str	r1, [r7, #8]
 800697e:	607a      	str	r2, [r7, #4]
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 8006980:	687b      	ldr	r3, [r7, #4]
 8006982:	68ba      	ldr	r2, [r7, #8]
 8006984:	2100      	movs	r1, #0
 8006986:	68f8      	ldr	r0, [r7, #12]
 8006988:	f000 fdce 	bl	8007528 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800698c:	2300      	movs	r3, #0
}
 800698e:	4618      	mov	r0, r3
 8006990:	3710      	adds	r7, #16
 8006992:	46bd      	mov	sp, r7
 8006994:	bd80      	pop	{r7, pc}

08006996 <USBD_CtlSendStatus>:
  *         send zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 8006996:	b580      	push	{r7, lr}
 8006998:	b082      	sub	sp, #8
 800699a:	af00      	add	r7, sp, #0
 800699c:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 800699e:	687b      	ldr	r3, [r7, #4]
 80069a0:	2204      	movs	r2, #4
 80069a2:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 80069a6:	2300      	movs	r3, #0
 80069a8:	2200      	movs	r2, #0
 80069aa:	2100      	movs	r1, #0
 80069ac:	6878      	ldr	r0, [r7, #4]
 80069ae:	f000 fd83 	bl	80074b8 <USBD_LL_Transmit>

  return USBD_OK;
 80069b2:	2300      	movs	r3, #0
}
 80069b4:	4618      	mov	r0, r3
 80069b6:	3708      	adds	r7, #8
 80069b8:	46bd      	mov	sp, r7
 80069ba:	bd80      	pop	{r7, pc}

080069bc <USBD_CtlReceiveStatus>:
  *         receive zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 80069bc:	b580      	push	{r7, lr}
 80069be:	b082      	sub	sp, #8
 80069c0:	af00      	add	r7, sp, #0
 80069c2:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 80069c4:	687b      	ldr	r3, [r7, #4]
 80069c6:	2205      	movs	r2, #5
 80069c8:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 80069cc:	2300      	movs	r3, #0
 80069ce:	2200      	movs	r2, #0
 80069d0:	2100      	movs	r1, #0
 80069d2:	6878      	ldr	r0, [r7, #4]
 80069d4:	f000 fda8 	bl	8007528 <USBD_LL_PrepareReceive>

  return USBD_OK;
 80069d8:	2300      	movs	r3, #0
}
 80069da:	4618      	mov	r0, r3
 80069dc:	3708      	adds	r7, #8
 80069de:	46bd      	mov	sp, r7
 80069e0:	bd80      	pop	{r7, pc}
	...

080069e4 <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 80069e4:	b580      	push	{r7, lr}
 80069e6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */

  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 80069e8:	2200      	movs	r2, #0
 80069ea:	4912      	ldr	r1, [pc, #72]	; (8006a34 <MX_USB_DEVICE_Init+0x50>)
 80069ec:	4812      	ldr	r0, [pc, #72]	; (8006a38 <MX_USB_DEVICE_Init+0x54>)
 80069ee:	f7fe fe65 	bl	80056bc <USBD_Init>
 80069f2:	4603      	mov	r3, r0
 80069f4:	2b00      	cmp	r3, #0
 80069f6:	d001      	beq.n	80069fc <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 80069f8:	f7f9 fca4 	bl	8000344 <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CDC) != USBD_OK)
 80069fc:	490f      	ldr	r1, [pc, #60]	; (8006a3c <MX_USB_DEVICE_Init+0x58>)
 80069fe:	480e      	ldr	r0, [pc, #56]	; (8006a38 <MX_USB_DEVICE_Init+0x54>)
 8006a00:	f7fe fe8c 	bl	800571c <USBD_RegisterClass>
 8006a04:	4603      	mov	r3, r0
 8006a06:	2b00      	cmp	r3, #0
 8006a08:	d001      	beq.n	8006a0e <MX_USB_DEVICE_Init+0x2a>
  {
    Error_Handler();
 8006a0a:	f7f9 fc9b 	bl	8000344 <Error_Handler>
  }
  if (USBD_CDC_RegisterInterface(&hUsbDeviceFS, &USBD_Interface_fops_FS) != USBD_OK)
 8006a0e:	490c      	ldr	r1, [pc, #48]	; (8006a40 <MX_USB_DEVICE_Init+0x5c>)
 8006a10:	4809      	ldr	r0, [pc, #36]	; (8006a38 <MX_USB_DEVICE_Init+0x54>)
 8006a12:	f7fe fdad 	bl	8005570 <USBD_CDC_RegisterInterface>
 8006a16:	4603      	mov	r3, r0
 8006a18:	2b00      	cmp	r3, #0
 8006a1a:	d001      	beq.n	8006a20 <MX_USB_DEVICE_Init+0x3c>
  {
    Error_Handler();
 8006a1c:	f7f9 fc92 	bl	8000344 <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 8006a20:	4805      	ldr	r0, [pc, #20]	; (8006a38 <MX_USB_DEVICE_Init+0x54>)
 8006a22:	f7fe fea2 	bl	800576a <USBD_Start>
 8006a26:	4603      	mov	r3, r0
 8006a28:	2b00      	cmp	r3, #0
 8006a2a:	d001      	beq.n	8006a30 <MX_USB_DEVICE_Init+0x4c>
  {
    Error_Handler();
 8006a2c:	f7f9 fc8a 	bl	8000344 <Error_Handler>
  }
  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */

  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 8006a30:	bf00      	nop
 8006a32:	bd80      	pop	{r7, pc}
 8006a34:	20000130 	.word	0x20000130
 8006a38:	20000420 	.word	0x20000420
 8006a3c:	20000018 	.word	0x20000018
 8006a40:	2000011c 	.word	0x2000011c

08006a44 <CDC_Init_FS>:
/**
  * @brief  Initializes the CDC media low layer over the FS USB IP
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Init_FS(void)
{
 8006a44:	b580      	push	{r7, lr}
 8006a46:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 3 */
  /* Set Application Buffers */
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, UserTxBufferFS, 0);
 8006a48:	2200      	movs	r2, #0
 8006a4a:	4905      	ldr	r1, [pc, #20]	; (8006a60 <CDC_Init_FS+0x1c>)
 8006a4c:	4805      	ldr	r0, [pc, #20]	; (8006a64 <CDC_Init_FS+0x20>)
 8006a4e:	f7fe fda4 	bl	800559a <USBD_CDC_SetTxBuffer>
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, UserRxBufferFS);
 8006a52:	4905      	ldr	r1, [pc, #20]	; (8006a68 <CDC_Init_FS+0x24>)
 8006a54:	4803      	ldr	r0, [pc, #12]	; (8006a64 <CDC_Init_FS+0x20>)
 8006a56:	f7fe fdbe 	bl	80055d6 <USBD_CDC_SetRxBuffer>
  return (USBD_OK);
 8006a5a:	2300      	movs	r3, #0
  /* USER CODE END 3 */
}
 8006a5c:	4618      	mov	r0, r3
 8006a5e:	bd80      	pop	{r7, pc}
 8006a60:	20000ef0 	.word	0x20000ef0
 8006a64:	20000420 	.word	0x20000420
 8006a68:	200006f0 	.word	0x200006f0

08006a6c <CDC_DeInit_FS>:
/**
  * @brief  DeInitializes the CDC media low layer
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_DeInit_FS(void)
{
 8006a6c:	b480      	push	{r7}
 8006a6e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 4 */
  return (USBD_OK);
 8006a70:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 8006a72:	4618      	mov	r0, r3
 8006a74:	46bd      	mov	sp, r7
 8006a76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a7a:	4770      	bx	lr

08006a7c <CDC_Control_FS>:
  * @param  pbuf: Buffer containing command data (request parameters)
  * @param  length: Number of data to be sent (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Control_FS(uint8_t cmd, uint8_t* pbuf, uint16_t length)
{
 8006a7c:	b480      	push	{r7}
 8006a7e:	b083      	sub	sp, #12
 8006a80:	af00      	add	r7, sp, #0
 8006a82:	4603      	mov	r3, r0
 8006a84:	6039      	str	r1, [r7, #0]
 8006a86:	71fb      	strb	r3, [r7, #7]
 8006a88:	4613      	mov	r3, r2
 8006a8a:	80bb      	strh	r3, [r7, #4]
  /* USER CODE BEGIN 5 */
  switch(cmd)
 8006a8c:	79fb      	ldrb	r3, [r7, #7]
 8006a8e:	2b23      	cmp	r3, #35	; 0x23
 8006a90:	d84a      	bhi.n	8006b28 <CDC_Control_FS+0xac>
 8006a92:	a201      	add	r2, pc, #4	; (adr r2, 8006a98 <CDC_Control_FS+0x1c>)
 8006a94:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006a98:	08006b29 	.word	0x08006b29
 8006a9c:	08006b29 	.word	0x08006b29
 8006aa0:	08006b29 	.word	0x08006b29
 8006aa4:	08006b29 	.word	0x08006b29
 8006aa8:	08006b29 	.word	0x08006b29
 8006aac:	08006b29 	.word	0x08006b29
 8006ab0:	08006b29 	.word	0x08006b29
 8006ab4:	08006b29 	.word	0x08006b29
 8006ab8:	08006b29 	.word	0x08006b29
 8006abc:	08006b29 	.word	0x08006b29
 8006ac0:	08006b29 	.word	0x08006b29
 8006ac4:	08006b29 	.word	0x08006b29
 8006ac8:	08006b29 	.word	0x08006b29
 8006acc:	08006b29 	.word	0x08006b29
 8006ad0:	08006b29 	.word	0x08006b29
 8006ad4:	08006b29 	.word	0x08006b29
 8006ad8:	08006b29 	.word	0x08006b29
 8006adc:	08006b29 	.word	0x08006b29
 8006ae0:	08006b29 	.word	0x08006b29
 8006ae4:	08006b29 	.word	0x08006b29
 8006ae8:	08006b29 	.word	0x08006b29
 8006aec:	08006b29 	.word	0x08006b29
 8006af0:	08006b29 	.word	0x08006b29
 8006af4:	08006b29 	.word	0x08006b29
 8006af8:	08006b29 	.word	0x08006b29
 8006afc:	08006b29 	.word	0x08006b29
 8006b00:	08006b29 	.word	0x08006b29
 8006b04:	08006b29 	.word	0x08006b29
 8006b08:	08006b29 	.word	0x08006b29
 8006b0c:	08006b29 	.word	0x08006b29
 8006b10:	08006b29 	.word	0x08006b29
 8006b14:	08006b29 	.word	0x08006b29
 8006b18:	08006b29 	.word	0x08006b29
 8006b1c:	08006b29 	.word	0x08006b29
 8006b20:	08006b29 	.word	0x08006b29
 8006b24:	08006b29 	.word	0x08006b29
    case CDC_SEND_BREAK:

    break;

  default:
    break;
 8006b28:	bf00      	nop
  }

  return (USBD_OK);
 8006b2a:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 8006b2c:	4618      	mov	r0, r3
 8006b2e:	370c      	adds	r7, #12
 8006b30:	46bd      	mov	sp, r7
 8006b32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b36:	4770      	bx	lr

08006b38 <CDC_Receive_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Receive_FS(uint8_t* Buf, uint32_t *Len)
{
 8006b38:	b580      	push	{r7, lr}
 8006b3a:	b082      	sub	sp, #8
 8006b3c:	af00      	add	r7, sp, #0
 8006b3e:	6078      	str	r0, [r7, #4]
 8006b40:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 6 */
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, &Buf[0]);
 8006b42:	6879      	ldr	r1, [r7, #4]
 8006b44:	4805      	ldr	r0, [pc, #20]	; (8006b5c <CDC_Receive_FS+0x24>)
 8006b46:	f7fe fd46 	bl	80055d6 <USBD_CDC_SetRxBuffer>
  USBD_CDC_ReceivePacket(&hUsbDeviceFS);
 8006b4a:	4804      	ldr	r0, [pc, #16]	; (8006b5c <CDC_Receive_FS+0x24>)
 8006b4c:	f7fe fd8c 	bl	8005668 <USBD_CDC_ReceivePacket>
  return (USBD_OK);
 8006b50:	2300      	movs	r3, #0
  /* USER CODE END 6 */
}
 8006b52:	4618      	mov	r0, r3
 8006b54:	3708      	adds	r7, #8
 8006b56:	46bd      	mov	sp, r7
 8006b58:	bd80      	pop	{r7, pc}
 8006b5a:	bf00      	nop
 8006b5c:	20000420 	.word	0x20000420

08006b60 <CDC_Transmit_FS>:
  * @param  Buf: Buffer of data to be sent
  * @param  Len: Number of data to be sent (in bytes)
  * @retval USBD_OK if all operations are OK else USBD_FAIL or USBD_BUSY
  */
uint8_t CDC_Transmit_FS(uint8_t* Buf, uint16_t Len)
{
 8006b60:	b580      	push	{r7, lr}
 8006b62:	b084      	sub	sp, #16
 8006b64:	af00      	add	r7, sp, #0
 8006b66:	6078      	str	r0, [r7, #4]
 8006b68:	460b      	mov	r3, r1
 8006b6a:	807b      	strh	r3, [r7, #2]
  uint8_t result = USBD_OK;
 8006b6c:	2300      	movs	r3, #0
 8006b6e:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN 7 */
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef*)hUsbDeviceFS.pClassData;
 8006b70:	4b0d      	ldr	r3, [pc, #52]	; (8006ba8 <CDC_Transmit_FS+0x48>)
 8006b72:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8006b76:	60bb      	str	r3, [r7, #8]
  if (hcdc->TxState != 0){
 8006b78:	68bb      	ldr	r3, [r7, #8]
 8006b7a:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 8006b7e:	2b00      	cmp	r3, #0
 8006b80:	d001      	beq.n	8006b86 <CDC_Transmit_FS+0x26>
    return USBD_BUSY;
 8006b82:	2301      	movs	r3, #1
 8006b84:	e00b      	b.n	8006b9e <CDC_Transmit_FS+0x3e>
  }
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, Buf, Len);
 8006b86:	887b      	ldrh	r3, [r7, #2]
 8006b88:	461a      	mov	r2, r3
 8006b8a:	6879      	ldr	r1, [r7, #4]
 8006b8c:	4806      	ldr	r0, [pc, #24]	; (8006ba8 <CDC_Transmit_FS+0x48>)
 8006b8e:	f7fe fd04 	bl	800559a <USBD_CDC_SetTxBuffer>
  result = USBD_CDC_TransmitPacket(&hUsbDeviceFS);
 8006b92:	4805      	ldr	r0, [pc, #20]	; (8006ba8 <CDC_Transmit_FS+0x48>)
 8006b94:	f7fe fd38 	bl	8005608 <USBD_CDC_TransmitPacket>
 8006b98:	4603      	mov	r3, r0
 8006b9a:	73fb      	strb	r3, [r7, #15]
  /* USER CODE END 7 */
  return result;
 8006b9c:	7bfb      	ldrb	r3, [r7, #15]
}
 8006b9e:	4618      	mov	r0, r3
 8006ba0:	3710      	adds	r7, #16
 8006ba2:	46bd      	mov	sp, r7
 8006ba4:	bd80      	pop	{r7, pc}
 8006ba6:	bf00      	nop
 8006ba8:	20000420 	.word	0x20000420

08006bac <CDC_TransmitCplt_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_TransmitCplt_FS(uint8_t *Buf, uint32_t *Len, uint8_t epnum)
{
 8006bac:	b480      	push	{r7}
 8006bae:	b087      	sub	sp, #28
 8006bb0:	af00      	add	r7, sp, #0
 8006bb2:	60f8      	str	r0, [r7, #12]
 8006bb4:	60b9      	str	r1, [r7, #8]
 8006bb6:	4613      	mov	r3, r2
 8006bb8:	71fb      	strb	r3, [r7, #7]
  uint8_t result = USBD_OK;
 8006bba:	2300      	movs	r3, #0
 8006bbc:	75fb      	strb	r3, [r7, #23]
  /* USER CODE BEGIN 13 */
  UNUSED(Buf);
  UNUSED(Len);
  UNUSED(epnum);
  /* USER CODE END 13 */
  return result;
 8006bbe:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8006bc2:	4618      	mov	r0, r3
 8006bc4:	371c      	adds	r7, #28
 8006bc6:	46bd      	mov	sp, r7
 8006bc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006bcc:	4770      	bx	lr
	...

08006bd0 <USBD_FS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8006bd0:	b480      	push	{r7}
 8006bd2:	b083      	sub	sp, #12
 8006bd4:	af00      	add	r7, sp, #0
 8006bd6:	4603      	mov	r3, r0
 8006bd8:	6039      	str	r1, [r7, #0]
 8006bda:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 8006bdc:	683b      	ldr	r3, [r7, #0]
 8006bde:	2212      	movs	r2, #18
 8006be0:	801a      	strh	r2, [r3, #0]
  return USBD_FS_DeviceDesc;
 8006be2:	4b03      	ldr	r3, [pc, #12]	; (8006bf0 <USBD_FS_DeviceDescriptor+0x20>)
}
 8006be4:	4618      	mov	r0, r3
 8006be6:	370c      	adds	r7, #12
 8006be8:	46bd      	mov	sp, r7
 8006bea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006bee:	4770      	bx	lr
 8006bf0:	20000150 	.word	0x20000150

08006bf4 <USBD_FS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8006bf4:	b480      	push	{r7}
 8006bf6:	b083      	sub	sp, #12
 8006bf8:	af00      	add	r7, sp, #0
 8006bfa:	4603      	mov	r3, r0
 8006bfc:	6039      	str	r1, [r7, #0]
 8006bfe:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 8006c00:	683b      	ldr	r3, [r7, #0]
 8006c02:	2204      	movs	r2, #4
 8006c04:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 8006c06:	4b03      	ldr	r3, [pc, #12]	; (8006c14 <USBD_FS_LangIDStrDescriptor+0x20>)
}
 8006c08:	4618      	mov	r0, r3
 8006c0a:	370c      	adds	r7, #12
 8006c0c:	46bd      	mov	sp, r7
 8006c0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c12:	4770      	bx	lr
 8006c14:	20000170 	.word	0x20000170

08006c18 <USBD_FS_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8006c18:	b580      	push	{r7, lr}
 8006c1a:	b082      	sub	sp, #8
 8006c1c:	af00      	add	r7, sp, #0
 8006c1e:	4603      	mov	r3, r0
 8006c20:	6039      	str	r1, [r7, #0]
 8006c22:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 8006c24:	79fb      	ldrb	r3, [r7, #7]
 8006c26:	2b00      	cmp	r3, #0
 8006c28:	d105      	bne.n	8006c36 <USBD_FS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 8006c2a:	683a      	ldr	r2, [r7, #0]
 8006c2c:	4907      	ldr	r1, [pc, #28]	; (8006c4c <USBD_FS_ProductStrDescriptor+0x34>)
 8006c2e:	4808      	ldr	r0, [pc, #32]	; (8006c50 <USBD_FS_ProductStrDescriptor+0x38>)
 8006c30:	f7ff fdf7 	bl	8006822 <USBD_GetString>
 8006c34:	e004      	b.n	8006c40 <USBD_FS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 8006c36:	683a      	ldr	r2, [r7, #0]
 8006c38:	4904      	ldr	r1, [pc, #16]	; (8006c4c <USBD_FS_ProductStrDescriptor+0x34>)
 8006c3a:	4805      	ldr	r0, [pc, #20]	; (8006c50 <USBD_FS_ProductStrDescriptor+0x38>)
 8006c3c:	f7ff fdf1 	bl	8006822 <USBD_GetString>
  }
  return USBD_StrDesc;
 8006c40:	4b02      	ldr	r3, [pc, #8]	; (8006c4c <USBD_FS_ProductStrDescriptor+0x34>)
}
 8006c42:	4618      	mov	r0, r3
 8006c44:	3708      	adds	r7, #8
 8006c46:	46bd      	mov	sp, r7
 8006c48:	bd80      	pop	{r7, pc}
 8006c4a:	bf00      	nop
 8006c4c:	200016f0 	.word	0x200016f0
 8006c50:	08007718 	.word	0x08007718

08006c54 <USBD_FS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8006c54:	b580      	push	{r7, lr}
 8006c56:	b082      	sub	sp, #8
 8006c58:	af00      	add	r7, sp, #0
 8006c5a:	4603      	mov	r3, r0
 8006c5c:	6039      	str	r1, [r7, #0]
 8006c5e:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 8006c60:	683a      	ldr	r2, [r7, #0]
 8006c62:	4904      	ldr	r1, [pc, #16]	; (8006c74 <USBD_FS_ManufacturerStrDescriptor+0x20>)
 8006c64:	4804      	ldr	r0, [pc, #16]	; (8006c78 <USBD_FS_ManufacturerStrDescriptor+0x24>)
 8006c66:	f7ff fddc 	bl	8006822 <USBD_GetString>
  return USBD_StrDesc;
 8006c6a:	4b02      	ldr	r3, [pc, #8]	; (8006c74 <USBD_FS_ManufacturerStrDescriptor+0x20>)
}
 8006c6c:	4618      	mov	r0, r3
 8006c6e:	3708      	adds	r7, #8
 8006c70:	46bd      	mov	sp, r7
 8006c72:	bd80      	pop	{r7, pc}
 8006c74:	200016f0 	.word	0x200016f0
 8006c78:	08007730 	.word	0x08007730

08006c7c <USBD_FS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8006c7c:	b580      	push	{r7, lr}
 8006c7e:	b082      	sub	sp, #8
 8006c80:	af00      	add	r7, sp, #0
 8006c82:	4603      	mov	r3, r0
 8006c84:	6039      	str	r1, [r7, #0]
 8006c86:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 8006c88:	683b      	ldr	r3, [r7, #0]
 8006c8a:	221a      	movs	r2, #26
 8006c8c:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 8006c8e:	f000 f855 	bl	8006d3c <Get_SerialNum>
  /* USER CODE BEGIN USBD_FS_SerialStrDescriptor */

  /* USER CODE END USBD_FS_SerialStrDescriptor */
  return (uint8_t *) USBD_StringSerial;
 8006c92:	4b02      	ldr	r3, [pc, #8]	; (8006c9c <USBD_FS_SerialStrDescriptor+0x20>)
}
 8006c94:	4618      	mov	r0, r3
 8006c96:	3708      	adds	r7, #8
 8006c98:	46bd      	mov	sp, r7
 8006c9a:	bd80      	pop	{r7, pc}
 8006c9c:	20000174 	.word	0x20000174

08006ca0 <USBD_FS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8006ca0:	b580      	push	{r7, lr}
 8006ca2:	b082      	sub	sp, #8
 8006ca4:	af00      	add	r7, sp, #0
 8006ca6:	4603      	mov	r3, r0
 8006ca8:	6039      	str	r1, [r7, #0]
 8006caa:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 8006cac:	79fb      	ldrb	r3, [r7, #7]
 8006cae:	2b00      	cmp	r3, #0
 8006cb0:	d105      	bne.n	8006cbe <USBD_FS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 8006cb2:	683a      	ldr	r2, [r7, #0]
 8006cb4:	4907      	ldr	r1, [pc, #28]	; (8006cd4 <USBD_FS_ConfigStrDescriptor+0x34>)
 8006cb6:	4808      	ldr	r0, [pc, #32]	; (8006cd8 <USBD_FS_ConfigStrDescriptor+0x38>)
 8006cb8:	f7ff fdb3 	bl	8006822 <USBD_GetString>
 8006cbc:	e004      	b.n	8006cc8 <USBD_FS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 8006cbe:	683a      	ldr	r2, [r7, #0]
 8006cc0:	4904      	ldr	r1, [pc, #16]	; (8006cd4 <USBD_FS_ConfigStrDescriptor+0x34>)
 8006cc2:	4805      	ldr	r0, [pc, #20]	; (8006cd8 <USBD_FS_ConfigStrDescriptor+0x38>)
 8006cc4:	f7ff fdad 	bl	8006822 <USBD_GetString>
  }
  return USBD_StrDesc;
 8006cc8:	4b02      	ldr	r3, [pc, #8]	; (8006cd4 <USBD_FS_ConfigStrDescriptor+0x34>)
}
 8006cca:	4618      	mov	r0, r3
 8006ccc:	3708      	adds	r7, #8
 8006cce:	46bd      	mov	sp, r7
 8006cd0:	bd80      	pop	{r7, pc}
 8006cd2:	bf00      	nop
 8006cd4:	200016f0 	.word	0x200016f0
 8006cd8:	08007744 	.word	0x08007744

08006cdc <USBD_FS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8006cdc:	b580      	push	{r7, lr}
 8006cde:	b082      	sub	sp, #8
 8006ce0:	af00      	add	r7, sp, #0
 8006ce2:	4603      	mov	r3, r0
 8006ce4:	6039      	str	r1, [r7, #0]
 8006ce6:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 8006ce8:	79fb      	ldrb	r3, [r7, #7]
 8006cea:	2b00      	cmp	r3, #0
 8006cec:	d105      	bne.n	8006cfa <USBD_FS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 8006cee:	683a      	ldr	r2, [r7, #0]
 8006cf0:	4907      	ldr	r1, [pc, #28]	; (8006d10 <USBD_FS_InterfaceStrDescriptor+0x34>)
 8006cf2:	4808      	ldr	r0, [pc, #32]	; (8006d14 <USBD_FS_InterfaceStrDescriptor+0x38>)
 8006cf4:	f7ff fd95 	bl	8006822 <USBD_GetString>
 8006cf8:	e004      	b.n	8006d04 <USBD_FS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 8006cfa:	683a      	ldr	r2, [r7, #0]
 8006cfc:	4904      	ldr	r1, [pc, #16]	; (8006d10 <USBD_FS_InterfaceStrDescriptor+0x34>)
 8006cfe:	4805      	ldr	r0, [pc, #20]	; (8006d14 <USBD_FS_InterfaceStrDescriptor+0x38>)
 8006d00:	f7ff fd8f 	bl	8006822 <USBD_GetString>
  }
  return USBD_StrDesc;
 8006d04:	4b02      	ldr	r3, [pc, #8]	; (8006d10 <USBD_FS_InterfaceStrDescriptor+0x34>)
}
 8006d06:	4618      	mov	r0, r3
 8006d08:	3708      	adds	r7, #8
 8006d0a:	46bd      	mov	sp, r7
 8006d0c:	bd80      	pop	{r7, pc}
 8006d0e:	bf00      	nop
 8006d10:	200016f0 	.word	0x200016f0
 8006d14:	08007750 	.word	0x08007750

08006d18 <USBD_FS_USR_BOSDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_USR_BOSDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8006d18:	b480      	push	{r7}
 8006d1a:	b083      	sub	sp, #12
 8006d1c:	af00      	add	r7, sp, #0
 8006d1e:	4603      	mov	r3, r0
 8006d20:	6039      	str	r1, [r7, #0]
 8006d22:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_BOSDesc);
 8006d24:	683b      	ldr	r3, [r7, #0]
 8006d26:	220c      	movs	r2, #12
 8006d28:	801a      	strh	r2, [r3, #0]
  return (uint8_t*)USBD_FS_BOSDesc;
 8006d2a:	4b03      	ldr	r3, [pc, #12]	; (8006d38 <USBD_FS_USR_BOSDescriptor+0x20>)
}
 8006d2c:	4618      	mov	r0, r3
 8006d2e:	370c      	adds	r7, #12
 8006d30:	46bd      	mov	sp, r7
 8006d32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d36:	4770      	bx	lr
 8006d38:	20000164 	.word	0x20000164

08006d3c <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 8006d3c:	b580      	push	{r7, lr}
 8006d3e:	b084      	sub	sp, #16
 8006d40:	af00      	add	r7, sp, #0
  uint32_t deviceserial0, deviceserial1, deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 8006d42:	4b0f      	ldr	r3, [pc, #60]	; (8006d80 <Get_SerialNum+0x44>)
 8006d44:	681b      	ldr	r3, [r3, #0]
 8006d46:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 8006d48:	4b0e      	ldr	r3, [pc, #56]	; (8006d84 <Get_SerialNum+0x48>)
 8006d4a:	681b      	ldr	r3, [r3, #0]
 8006d4c:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 8006d4e:	4b0e      	ldr	r3, [pc, #56]	; (8006d88 <Get_SerialNum+0x4c>)
 8006d50:	681b      	ldr	r3, [r3, #0]
 8006d52:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 8006d54:	68fa      	ldr	r2, [r7, #12]
 8006d56:	687b      	ldr	r3, [r7, #4]
 8006d58:	4413      	add	r3, r2
 8006d5a:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 8006d5c:	68fb      	ldr	r3, [r7, #12]
 8006d5e:	2b00      	cmp	r3, #0
 8006d60:	d009      	beq.n	8006d76 <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 8006d62:	2208      	movs	r2, #8
 8006d64:	4909      	ldr	r1, [pc, #36]	; (8006d8c <Get_SerialNum+0x50>)
 8006d66:	68f8      	ldr	r0, [r7, #12]
 8006d68:	f000 f814 	bl	8006d94 <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 8006d6c:	2204      	movs	r2, #4
 8006d6e:	4908      	ldr	r1, [pc, #32]	; (8006d90 <Get_SerialNum+0x54>)
 8006d70:	68b8      	ldr	r0, [r7, #8]
 8006d72:	f000 f80f 	bl	8006d94 <IntToUnicode>
  }
}
 8006d76:	bf00      	nop
 8006d78:	3710      	adds	r7, #16
 8006d7a:	46bd      	mov	sp, r7
 8006d7c:	bd80      	pop	{r7, pc}
 8006d7e:	bf00      	nop
 8006d80:	1fff7590 	.word	0x1fff7590
 8006d84:	1fff7594 	.word	0x1fff7594
 8006d88:	1fff7598 	.word	0x1fff7598
 8006d8c:	20000176 	.word	0x20000176
 8006d90:	20000186 	.word	0x20000186

08006d94 <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 8006d94:	b480      	push	{r7}
 8006d96:	b087      	sub	sp, #28
 8006d98:	af00      	add	r7, sp, #0
 8006d9a:	60f8      	str	r0, [r7, #12]
 8006d9c:	60b9      	str	r1, [r7, #8]
 8006d9e:	4613      	mov	r3, r2
 8006da0:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 8006da2:	2300      	movs	r3, #0
 8006da4:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 8006da6:	2300      	movs	r3, #0
 8006da8:	75fb      	strb	r3, [r7, #23]
 8006daa:	e027      	b.n	8006dfc <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 8006dac:	68fb      	ldr	r3, [r7, #12]
 8006dae:	0f1b      	lsrs	r3, r3, #28
 8006db0:	2b09      	cmp	r3, #9
 8006db2:	d80b      	bhi.n	8006dcc <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 8006db4:	68fb      	ldr	r3, [r7, #12]
 8006db6:	0f1b      	lsrs	r3, r3, #28
 8006db8:	b2da      	uxtb	r2, r3
 8006dba:	7dfb      	ldrb	r3, [r7, #23]
 8006dbc:	005b      	lsls	r3, r3, #1
 8006dbe:	4619      	mov	r1, r3
 8006dc0:	68bb      	ldr	r3, [r7, #8]
 8006dc2:	440b      	add	r3, r1
 8006dc4:	3230      	adds	r2, #48	; 0x30
 8006dc6:	b2d2      	uxtb	r2, r2
 8006dc8:	701a      	strb	r2, [r3, #0]
 8006dca:	e00a      	b.n	8006de2 <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 8006dcc:	68fb      	ldr	r3, [r7, #12]
 8006dce:	0f1b      	lsrs	r3, r3, #28
 8006dd0:	b2da      	uxtb	r2, r3
 8006dd2:	7dfb      	ldrb	r3, [r7, #23]
 8006dd4:	005b      	lsls	r3, r3, #1
 8006dd6:	4619      	mov	r1, r3
 8006dd8:	68bb      	ldr	r3, [r7, #8]
 8006dda:	440b      	add	r3, r1
 8006ddc:	3237      	adds	r2, #55	; 0x37
 8006dde:	b2d2      	uxtb	r2, r2
 8006de0:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 8006de2:	68fb      	ldr	r3, [r7, #12]
 8006de4:	011b      	lsls	r3, r3, #4
 8006de6:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 8006de8:	7dfb      	ldrb	r3, [r7, #23]
 8006dea:	005b      	lsls	r3, r3, #1
 8006dec:	3301      	adds	r3, #1
 8006dee:	68ba      	ldr	r2, [r7, #8]
 8006df0:	4413      	add	r3, r2
 8006df2:	2200      	movs	r2, #0
 8006df4:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 8006df6:	7dfb      	ldrb	r3, [r7, #23]
 8006df8:	3301      	adds	r3, #1
 8006dfa:	75fb      	strb	r3, [r7, #23]
 8006dfc:	7dfa      	ldrb	r2, [r7, #23]
 8006dfe:	79fb      	ldrb	r3, [r7, #7]
 8006e00:	429a      	cmp	r2, r3
 8006e02:	d3d3      	bcc.n	8006dac <IntToUnicode+0x18>
  }
}
 8006e04:	bf00      	nop
 8006e06:	bf00      	nop
 8006e08:	371c      	adds	r7, #28
 8006e0a:	46bd      	mov	sp, r7
 8006e0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e10:	4770      	bx	lr
	...

08006e14 <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 8006e14:	b580      	push	{r7, lr}
 8006e16:	b0b0      	sub	sp, #192	; 0xc0
 8006e18:	af00      	add	r7, sp, #0
 8006e1a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8006e1c:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 8006e20:	2200      	movs	r2, #0
 8006e22:	601a      	str	r2, [r3, #0]
 8006e24:	605a      	str	r2, [r3, #4]
 8006e26:	609a      	str	r2, [r3, #8]
 8006e28:	60da      	str	r2, [r3, #12]
 8006e2a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8006e2c:	f107 0318 	add.w	r3, r7, #24
 8006e30:	2294      	movs	r2, #148	; 0x94
 8006e32:	2100      	movs	r1, #0
 8006e34:	4618      	mov	r0, r3
 8006e36:	f000 fc53 	bl	80076e0 <memset>
  if(pcdHandle->Instance==USB_OTG_FS)
 8006e3a:	687b      	ldr	r3, [r7, #4]
 8006e3c:	681b      	ldr	r3, [r3, #0]
 8006e3e:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8006e42:	d173      	bne.n	8006f2c <HAL_PCD_MspInit+0x118>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */
  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USB;
 8006e44:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8006e48:	61bb      	str	r3, [r7, #24]
    PeriphClkInit.UsbClockSelection = RCC_USBCLKSOURCE_PLLSAI1;
 8006e4a:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 8006e4e:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
    PeriphClkInit.PLLSAI1.PLLSAI1Source = RCC_PLLSOURCE_HSE;
 8006e52:	2303      	movs	r3, #3
 8006e54:	61fb      	str	r3, [r7, #28]
    PeriphClkInit.PLLSAI1.PLLSAI1M = 1;
 8006e56:	2301      	movs	r3, #1
 8006e58:	623b      	str	r3, [r7, #32]
    PeriphClkInit.PLLSAI1.PLLSAI1N = 12;
 8006e5a:	230c      	movs	r3, #12
 8006e5c:	627b      	str	r3, [r7, #36]	; 0x24
    PeriphClkInit.PLLSAI1.PLLSAI1P = RCC_PLLP_DIV2;
 8006e5e:	2302      	movs	r3, #2
 8006e60:	62bb      	str	r3, [r7, #40]	; 0x28
    PeriphClkInit.PLLSAI1.PLLSAI1Q = RCC_PLLQ_DIV2;
 8006e62:	2302      	movs	r3, #2
 8006e64:	62fb      	str	r3, [r7, #44]	; 0x2c
    PeriphClkInit.PLLSAI1.PLLSAI1R = RCC_PLLR_DIV2;
 8006e66:	2302      	movs	r3, #2
 8006e68:	633b      	str	r3, [r7, #48]	; 0x30
    PeriphClkInit.PLLSAI1.PLLSAI1ClockOut = RCC_PLLSAI1_48M2CLK;
 8006e6a:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 8006e6e:	637b      	str	r3, [r7, #52]	; 0x34
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8006e70:	f107 0318 	add.w	r3, r7, #24
 8006e74:	4618      	mov	r0, r3
 8006e76:	f7fb fe8d 	bl	8002b94 <HAL_RCCEx_PeriphCLKConfig>
 8006e7a:	4603      	mov	r3, r0
 8006e7c:	2b00      	cmp	r3, #0
 8006e7e:	d001      	beq.n	8006e84 <HAL_PCD_MspInit+0x70>
    {
      Error_Handler();
 8006e80:	f7f9 fa60 	bl	8000344 <Error_Handler>
    }

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8006e84:	4b2b      	ldr	r3, [pc, #172]	; (8006f34 <HAL_PCD_MspInit+0x120>)
 8006e86:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006e88:	4a2a      	ldr	r2, [pc, #168]	; (8006f34 <HAL_PCD_MspInit+0x120>)
 8006e8a:	f043 0301 	orr.w	r3, r3, #1
 8006e8e:	64d3      	str	r3, [r2, #76]	; 0x4c
 8006e90:	4b28      	ldr	r3, [pc, #160]	; (8006f34 <HAL_PCD_MspInit+0x120>)
 8006e92:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006e94:	f003 0301 	and.w	r3, r3, #1
 8006e98:	617b      	str	r3, [r7, #20]
 8006e9a:	697b      	ldr	r3, [r7, #20]
    /**USB_OTG_FS GPIO Configuration
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 8006e9c:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 8006ea0:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8006ea4:	2302      	movs	r3, #2
 8006ea6:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8006eaa:	2300      	movs	r3, #0
 8006eac:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8006eb0:	2303      	movs	r3, #3
 8006eb2:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 8006eb6:	230a      	movs	r3, #10
 8006eb8:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8006ebc:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 8006ec0:	4619      	mov	r1, r3
 8006ec2:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8006ec6:	f7f9 fc77 	bl	80007b8 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 8006eca:	4b1a      	ldr	r3, [pc, #104]	; (8006f34 <HAL_PCD_MspInit+0x120>)
 8006ecc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006ece:	4a19      	ldr	r2, [pc, #100]	; (8006f34 <HAL_PCD_MspInit+0x120>)
 8006ed0:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8006ed4:	64d3      	str	r3, [r2, #76]	; 0x4c
 8006ed6:	4b17      	ldr	r3, [pc, #92]	; (8006f34 <HAL_PCD_MspInit+0x120>)
 8006ed8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006eda:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8006ede:	613b      	str	r3, [r7, #16]
 8006ee0:	693b      	ldr	r3, [r7, #16]

    /* Enable VDDUSB */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8006ee2:	4b14      	ldr	r3, [pc, #80]	; (8006f34 <HAL_PCD_MspInit+0x120>)
 8006ee4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006ee6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8006eea:	2b00      	cmp	r3, #0
 8006eec:	d114      	bne.n	8006f18 <HAL_PCD_MspInit+0x104>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8006eee:	4b11      	ldr	r3, [pc, #68]	; (8006f34 <HAL_PCD_MspInit+0x120>)
 8006ef0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006ef2:	4a10      	ldr	r2, [pc, #64]	; (8006f34 <HAL_PCD_MspInit+0x120>)
 8006ef4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8006ef8:	6593      	str	r3, [r2, #88]	; 0x58
 8006efa:	4b0e      	ldr	r3, [pc, #56]	; (8006f34 <HAL_PCD_MspInit+0x120>)
 8006efc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006efe:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8006f02:	60fb      	str	r3, [r7, #12]
 8006f04:	68fb      	ldr	r3, [r7, #12]
      HAL_PWREx_EnableVddUSB();
 8006f06:	f7fa ff41 	bl	8001d8c <HAL_PWREx_EnableVddUSB>
      __HAL_RCC_PWR_CLK_DISABLE();
 8006f0a:	4b0a      	ldr	r3, [pc, #40]	; (8006f34 <HAL_PCD_MspInit+0x120>)
 8006f0c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006f0e:	4a09      	ldr	r2, [pc, #36]	; (8006f34 <HAL_PCD_MspInit+0x120>)
 8006f10:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8006f14:	6593      	str	r3, [r2, #88]	; 0x58
 8006f16:	e001      	b.n	8006f1c <HAL_PCD_MspInit+0x108>
    }
    else
    {
      HAL_PWREx_EnableVddUSB();
 8006f18:	f7fa ff38 	bl	8001d8c <HAL_PWREx_EnableVddUSB>
    }

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 0, 0);
 8006f1c:	2200      	movs	r2, #0
 8006f1e:	2100      	movs	r1, #0
 8006f20:	2043      	movs	r0, #67	; 0x43
 8006f22:	f7f9 fc1f 	bl	8000764 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 8006f26:	2043      	movs	r0, #67	; 0x43
 8006f28:	f7f9 fc38 	bl	800079c <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 8006f2c:	bf00      	nop
 8006f2e:	37c0      	adds	r7, #192	; 0xc0
 8006f30:	46bd      	mov	sp, r7
 8006f32:	bd80      	pop	{r7, pc}
 8006f34:	40021000 	.word	0x40021000

08006f38 <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8006f38:	b580      	push	{r7, lr}
 8006f3a:	b082      	sub	sp, #8
 8006f3c:	af00      	add	r7, sp, #0
 8006f3e:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 8006f40:	687b      	ldr	r3, [r7, #4]
 8006f42:	f8d3 2404 	ldr.w	r2, [r3, #1028]	; 0x404
 8006f46:	687b      	ldr	r3, [r7, #4]
 8006f48:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 8006f4c:	4619      	mov	r1, r3
 8006f4e:	4610      	mov	r0, r2
 8006f50:	f7fe fc56 	bl	8005800 <USBD_LL_SetupStage>
}
 8006f54:	bf00      	nop
 8006f56:	3708      	adds	r7, #8
 8006f58:	46bd      	mov	sp, r7
 8006f5a:	bd80      	pop	{r7, pc}

08006f5c <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8006f5c:	b580      	push	{r7, lr}
 8006f5e:	b082      	sub	sp, #8
 8006f60:	af00      	add	r7, sp, #0
 8006f62:	6078      	str	r0, [r7, #4]
 8006f64:	460b      	mov	r3, r1
 8006f66:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 8006f68:	687b      	ldr	r3, [r7, #4]
 8006f6a:	f8d3 0404 	ldr.w	r0, [r3, #1028]	; 0x404
 8006f6e:	78fa      	ldrb	r2, [r7, #3]
 8006f70:	6879      	ldr	r1, [r7, #4]
 8006f72:	4613      	mov	r3, r2
 8006f74:	00db      	lsls	r3, r3, #3
 8006f76:	1a9b      	subs	r3, r3, r2
 8006f78:	009b      	lsls	r3, r3, #2
 8006f7a:	440b      	add	r3, r1
 8006f7c:	f503 7302 	add.w	r3, r3, #520	; 0x208
 8006f80:	681a      	ldr	r2, [r3, #0]
 8006f82:	78fb      	ldrb	r3, [r7, #3]
 8006f84:	4619      	mov	r1, r3
 8006f86:	f7fe fc90 	bl	80058aa <USBD_LL_DataOutStage>
}
 8006f8a:	bf00      	nop
 8006f8c:	3708      	adds	r7, #8
 8006f8e:	46bd      	mov	sp, r7
 8006f90:	bd80      	pop	{r7, pc}

08006f92 <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8006f92:	b580      	push	{r7, lr}
 8006f94:	b082      	sub	sp, #8
 8006f96:	af00      	add	r7, sp, #0
 8006f98:	6078      	str	r0, [r7, #4]
 8006f9a:	460b      	mov	r3, r1
 8006f9c:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 8006f9e:	687b      	ldr	r3, [r7, #4]
 8006fa0:	f8d3 0404 	ldr.w	r0, [r3, #1028]	; 0x404
 8006fa4:	78fa      	ldrb	r2, [r7, #3]
 8006fa6:	6879      	ldr	r1, [r7, #4]
 8006fa8:	4613      	mov	r3, r2
 8006faa:	00db      	lsls	r3, r3, #3
 8006fac:	1a9b      	subs	r3, r3, r2
 8006fae:	009b      	lsls	r3, r3, #2
 8006fb0:	440b      	add	r3, r1
 8006fb2:	3348      	adds	r3, #72	; 0x48
 8006fb4:	681a      	ldr	r2, [r3, #0]
 8006fb6:	78fb      	ldrb	r3, [r7, #3]
 8006fb8:	4619      	mov	r1, r3
 8006fba:	f7fe fcd9 	bl	8005970 <USBD_LL_DataInStage>
}
 8006fbe:	bf00      	nop
 8006fc0:	3708      	adds	r7, #8
 8006fc2:	46bd      	mov	sp, r7
 8006fc4:	bd80      	pop	{r7, pc}

08006fc6 <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8006fc6:	b580      	push	{r7, lr}
 8006fc8:	b082      	sub	sp, #8
 8006fca:	af00      	add	r7, sp, #0
 8006fcc:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 8006fce:	687b      	ldr	r3, [r7, #4]
 8006fd0:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8006fd4:	4618      	mov	r0, r3
 8006fd6:	f7fe fded 	bl	8005bb4 <USBD_LL_SOF>
}
 8006fda:	bf00      	nop
 8006fdc:	3708      	adds	r7, #8
 8006fde:	46bd      	mov	sp, r7
 8006fe0:	bd80      	pop	{r7, pc}

08006fe2 <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8006fe2:	b580      	push	{r7, lr}
 8006fe4:	b084      	sub	sp, #16
 8006fe6:	af00      	add	r7, sp, #0
 8006fe8:	6078      	str	r0, [r7, #4]
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 8006fea:	2301      	movs	r3, #1
 8006fec:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed != PCD_SPEED_FULL)
 8006fee:	687b      	ldr	r3, [r7, #4]
 8006ff0:	68db      	ldr	r3, [r3, #12]
 8006ff2:	2b02      	cmp	r3, #2
 8006ff4:	d001      	beq.n	8006ffa <HAL_PCD_ResetCallback+0x18>
  {
    Error_Handler();
 8006ff6:	f7f9 f9a5 	bl	8000344 <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 8006ffa:	687b      	ldr	r3, [r7, #4]
 8006ffc:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8007000:	7bfa      	ldrb	r2, [r7, #15]
 8007002:	4611      	mov	r1, r2
 8007004:	4618      	mov	r0, r3
 8007006:	f7fe fd97 	bl	8005b38 <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 800700a:	687b      	ldr	r3, [r7, #4]
 800700c:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8007010:	4618      	mov	r0, r3
 8007012:	f7fe fd43 	bl	8005a9c <USBD_LL_Reset>
}
 8007016:	bf00      	nop
 8007018:	3710      	adds	r7, #16
 800701a:	46bd      	mov	sp, r7
 800701c:	bd80      	pop	{r7, pc}
	...

08007020 <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8007020:	b580      	push	{r7, lr}
 8007022:	b082      	sub	sp, #8
 8007024:	af00      	add	r7, sp, #0
 8007026:	6078      	str	r0, [r7, #4]
  __HAL_PCD_GATE_PHYCLOCK(hpcd);
 8007028:	687b      	ldr	r3, [r7, #4]
 800702a:	681b      	ldr	r3, [r3, #0]
 800702c:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8007030:	681b      	ldr	r3, [r3, #0]
 8007032:	687a      	ldr	r2, [r7, #4]
 8007034:	6812      	ldr	r2, [r2, #0]
 8007036:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 800703a:	f043 0301 	orr.w	r3, r3, #1
 800703e:	6013      	str	r3, [r2, #0]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 8007040:	687b      	ldr	r3, [r7, #4]
 8007042:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8007046:	4618      	mov	r0, r3
 8007048:	f7fe fd86 	bl	8005b58 <USBD_LL_Suspend>
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 800704c:	687b      	ldr	r3, [r7, #4]
 800704e:	6a1b      	ldr	r3, [r3, #32]
 8007050:	2b00      	cmp	r3, #0
 8007052:	d005      	beq.n	8007060 <HAL_PCD_SuspendCallback+0x40>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 8007054:	4b04      	ldr	r3, [pc, #16]	; (8007068 <HAL_PCD_SuspendCallback+0x48>)
 8007056:	691b      	ldr	r3, [r3, #16]
 8007058:	4a03      	ldr	r2, [pc, #12]	; (8007068 <HAL_PCD_SuspendCallback+0x48>)
 800705a:	f043 0306 	orr.w	r3, r3, #6
 800705e:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 8007060:	bf00      	nop
 8007062:	3708      	adds	r7, #8
 8007064:	46bd      	mov	sp, r7
 8007066:	bd80      	pop	{r7, pc}
 8007068:	e000ed00 	.word	0xe000ed00

0800706c <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800706c:	b580      	push	{r7, lr}
 800706e:	b082      	sub	sp, #8
 8007070:	af00      	add	r7, sp, #0
 8007072:	6078      	str	r0, [r7, #4]
  __HAL_PCD_UNGATE_PHYCLOCK(hpcd);
 8007074:	687b      	ldr	r3, [r7, #4]
 8007076:	681b      	ldr	r3, [r3, #0]
 8007078:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 800707c:	681b      	ldr	r3, [r3, #0]
 800707e:	687a      	ldr	r2, [r7, #4]
 8007080:	6812      	ldr	r2, [r2, #0]
 8007082:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 8007086:	f023 0301 	bic.w	r3, r3, #1
 800708a:	6013      	str	r3, [r2, #0]

  /* USER CODE BEGIN 3 */
  if (hpcd->Init.low_power_enable)
 800708c:	687b      	ldr	r3, [r7, #4]
 800708e:	6a1b      	ldr	r3, [r3, #32]
 8007090:	2b00      	cmp	r3, #0
 8007092:	d007      	beq.n	80070a4 <HAL_PCD_ResumeCallback+0x38>
  {
    /* Reset SLEEPDEEP bit of Cortex System Control Register. */
    SCB->SCR &= (uint32_t)~((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 8007094:	4b08      	ldr	r3, [pc, #32]	; (80070b8 <HAL_PCD_ResumeCallback+0x4c>)
 8007096:	691b      	ldr	r3, [r3, #16]
 8007098:	4a07      	ldr	r2, [pc, #28]	; (80070b8 <HAL_PCD_ResumeCallback+0x4c>)
 800709a:	f023 0306 	bic.w	r3, r3, #6
 800709e:	6113      	str	r3, [r2, #16]
    SystemClockConfig_Resume();
 80070a0:	f000 faf4 	bl	800768c <SystemClockConfig_Resume>
  }
  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 80070a4:	687b      	ldr	r3, [r7, #4]
 80070a6:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 80070aa:	4618      	mov	r0, r3
 80070ac:	f7fe fd6a 	bl	8005b84 <USBD_LL_Resume>
}
 80070b0:	bf00      	nop
 80070b2:	3708      	adds	r7, #8
 80070b4:	46bd      	mov	sp, r7
 80070b6:	bd80      	pop	{r7, pc}
 80070b8:	e000ed00 	.word	0xe000ed00

080070bc <HAL_PCD_ISOOUTIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80070bc:	b580      	push	{r7, lr}
 80070be:	b082      	sub	sp, #8
 80070c0:	af00      	add	r7, sp, #0
 80070c2:	6078      	str	r0, [r7, #4]
 80070c4:	460b      	mov	r3, r1
 80070c6:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoOUTIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 80070c8:	687b      	ldr	r3, [r7, #4]
 80070ca:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 80070ce:	78fa      	ldrb	r2, [r7, #3]
 80070d0:	4611      	mov	r1, r2
 80070d2:	4618      	mov	r0, r3
 80070d4:	f7fe fdb6 	bl	8005c44 <USBD_LL_IsoOUTIncomplete>
}
 80070d8:	bf00      	nop
 80070da:	3708      	adds	r7, #8
 80070dc:	46bd      	mov	sp, r7
 80070de:	bd80      	pop	{r7, pc}

080070e0 <HAL_PCD_ISOINIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80070e0:	b580      	push	{r7, lr}
 80070e2:	b082      	sub	sp, #8
 80070e4:	af00      	add	r7, sp, #0
 80070e6:	6078      	str	r0, [r7, #4]
 80070e8:	460b      	mov	r3, r1
 80070ea:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoINIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 80070ec:	687b      	ldr	r3, [r7, #4]
 80070ee:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 80070f2:	78fa      	ldrb	r2, [r7, #3]
 80070f4:	4611      	mov	r1, r2
 80070f6:	4618      	mov	r0, r3
 80070f8:	f7fe fd7e 	bl	8005bf8 <USBD_LL_IsoINIncomplete>
}
 80070fc:	bf00      	nop
 80070fe:	3708      	adds	r7, #8
 8007100:	46bd      	mov	sp, r7
 8007102:	bd80      	pop	{r7, pc}

08007104 <HAL_PCD_ConnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8007104:	b580      	push	{r7, lr}
 8007106:	b082      	sub	sp, #8
 8007108:	af00      	add	r7, sp, #0
 800710a:	6078      	str	r0, [r7, #4]
  USBD_LL_DevConnected((USBD_HandleTypeDef*)hpcd->pData);
 800710c:	687b      	ldr	r3, [r7, #4]
 800710e:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8007112:	4618      	mov	r0, r3
 8007114:	f7fe fdbc 	bl	8005c90 <USBD_LL_DevConnected>
}
 8007118:	bf00      	nop
 800711a:	3708      	adds	r7, #8
 800711c:	46bd      	mov	sp, r7
 800711e:	bd80      	pop	{r7, pc}

08007120 <HAL_PCD_DisconnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8007120:	b580      	push	{r7, lr}
 8007122:	b082      	sub	sp, #8
 8007124:	af00      	add	r7, sp, #0
 8007126:	6078      	str	r0, [r7, #4]
  USBD_LL_DevDisconnected((USBD_HandleTypeDef*)hpcd->pData);
 8007128:	687b      	ldr	r3, [r7, #4]
 800712a:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 800712e:	4618      	mov	r0, r3
 8007130:	f7fe fdb9 	bl	8005ca6 <USBD_LL_DevDisconnected>
}
 8007134:	bf00      	nop
 8007136:	3708      	adds	r7, #8
 8007138:	46bd      	mov	sp, r7
 800713a:	bd80      	pop	{r7, pc}

0800713c <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 800713c:	b580      	push	{r7, lr}
 800713e:	b082      	sub	sp, #8
 8007140:	af00      	add	r7, sp, #0
 8007142:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  if (pdev->id == DEVICE_FS) {
 8007144:	687b      	ldr	r3, [r7, #4]
 8007146:	781b      	ldrb	r3, [r3, #0]
 8007148:	2b00      	cmp	r3, #0
 800714a:	d139      	bne.n	80071c0 <USBD_LL_Init+0x84>
  /* Enable USB power on Pwrctrl CR2 register. */
  /* Link the driver to the stack. */
  hpcd_USB_OTG_FS.pData = pdev;
 800714c:	4a1f      	ldr	r2, [pc, #124]	; (80071cc <USBD_LL_Init+0x90>)
 800714e:	687b      	ldr	r3, [r7, #4]
 8007150:	f8c2 3404 	str.w	r3, [r2, #1028]	; 0x404
  pdev->pData = &hpcd_USB_OTG_FS;
 8007154:	687b      	ldr	r3, [r7, #4]
 8007156:	4a1d      	ldr	r2, [pc, #116]	; (80071cc <USBD_LL_Init+0x90>)
 8007158:	f8c3 22c4 	str.w	r2, [r3, #708]	; 0x2c4

  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 800715c:	4b1b      	ldr	r3, [pc, #108]	; (80071cc <USBD_LL_Init+0x90>)
 800715e:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 8007162:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 6;
 8007164:	4b19      	ldr	r3, [pc, #100]	; (80071cc <USBD_LL_Init+0x90>)
 8007166:	2206      	movs	r2, #6
 8007168:	605a      	str	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 800716a:	4b18      	ldr	r3, [pc, #96]	; (80071cc <USBD_LL_Init+0x90>)
 800716c:	2202      	movs	r2, #2
 800716e:	619a      	str	r2, [r3, #24]
  hpcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 8007170:	4b16      	ldr	r3, [pc, #88]	; (80071cc <USBD_LL_Init+0x90>)
 8007172:	2200      	movs	r2, #0
 8007174:	61da      	str	r2, [r3, #28]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 8007176:	4b15      	ldr	r3, [pc, #84]	; (80071cc <USBD_LL_Init+0x90>)
 8007178:	2200      	movs	r2, #0
 800717a:	621a      	str	r2, [r3, #32]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 800717c:	4b13      	ldr	r3, [pc, #76]	; (80071cc <USBD_LL_Init+0x90>)
 800717e:	2200      	movs	r2, #0
 8007180:	625a      	str	r2, [r3, #36]	; 0x24
  hpcd_USB_OTG_FS.Init.battery_charging_enable = DISABLE;
 8007182:	4b12      	ldr	r3, [pc, #72]	; (80071cc <USBD_LL_Init+0x90>)
 8007184:	2200      	movs	r2, #0
 8007186:	629a      	str	r2, [r3, #40]	; 0x28
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 8007188:	4b10      	ldr	r3, [pc, #64]	; (80071cc <USBD_LL_Init+0x90>)
 800718a:	2200      	movs	r2, #0
 800718c:	631a      	str	r2, [r3, #48]	; 0x30
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = DISABLE;
 800718e:	4b0f      	ldr	r3, [pc, #60]	; (80071cc <USBD_LL_Init+0x90>)
 8007190:	2200      	movs	r2, #0
 8007192:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 8007194:	480d      	ldr	r0, [pc, #52]	; (80071cc <USBD_LL_Init+0x90>)
 8007196:	f7f9 fca1 	bl	8000adc <HAL_PCD_Init>
 800719a:	4603      	mov	r3, r0
 800719c:	2b00      	cmp	r3, #0
 800719e:	d001      	beq.n	80071a4 <USBD_LL_Init+0x68>
  {
    Error_Handler( );
 80071a0:	f7f9 f8d0 	bl	8000344 <Error_Handler>
  HAL_PCD_RegisterDataOutStageCallback(&hpcd_USB_OTG_FS, PCD_DataOutStageCallback);
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_OTG_FS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  HAL_PCDEx_SetRxFiFo(&hpcd_USB_OTG_FS, 0x80);
 80071a4:	2180      	movs	r1, #128	; 0x80
 80071a6:	4809      	ldr	r0, [pc, #36]	; (80071cc <USBD_LL_Init+0x90>)
 80071a8:	f7fa fcf7 	bl	8001b9a <HAL_PCDEx_SetRxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 0, 0x40);
 80071ac:	2240      	movs	r2, #64	; 0x40
 80071ae:	2100      	movs	r1, #0
 80071b0:	4806      	ldr	r0, [pc, #24]	; (80071cc <USBD_LL_Init+0x90>)
 80071b2:	f7fa fcab 	bl	8001b0c <HAL_PCDEx_SetTxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 1, 0x80);
 80071b6:	2280      	movs	r2, #128	; 0x80
 80071b8:	2101      	movs	r1, #1
 80071ba:	4804      	ldr	r0, [pc, #16]	; (80071cc <USBD_LL_Init+0x90>)
 80071bc:	f7fa fca6 	bl	8001b0c <HAL_PCDEx_SetTxFiFo>
  }
  return USBD_OK;
 80071c0:	2300      	movs	r3, #0
}
 80071c2:	4618      	mov	r0, r3
 80071c4:	3708      	adds	r7, #8
 80071c6:	46bd      	mov	sp, r7
 80071c8:	bd80      	pop	{r7, pc}
 80071ca:	bf00      	nop
 80071cc:	200018f0 	.word	0x200018f0

080071d0 <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 80071d0:	b580      	push	{r7, lr}
 80071d2:	b084      	sub	sp, #16
 80071d4:	af00      	add	r7, sp, #0
 80071d6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80071d8:	2300      	movs	r3, #0
 80071da:	73bb      	strb	r3, [r7, #14]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80071dc:	2300      	movs	r3, #0
 80071de:	73fb      	strb	r3, [r7, #15]

  hal_status = HAL_PCD_Start(pdev->pData);
 80071e0:	687b      	ldr	r3, [r7, #4]
 80071e2:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 80071e6:	4618      	mov	r0, r3
 80071e8:	f7f9 fd9c 	bl	8000d24 <HAL_PCD_Start>
 80071ec:	4603      	mov	r3, r0
 80071ee:	73bb      	strb	r3, [r7, #14]

  switch (hal_status) {
 80071f0:	7bbb      	ldrb	r3, [r7, #14]
 80071f2:	2b03      	cmp	r3, #3
 80071f4:	d816      	bhi.n	8007224 <USBD_LL_Start+0x54>
 80071f6:	a201      	add	r2, pc, #4	; (adr r2, 80071fc <USBD_LL_Start+0x2c>)
 80071f8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80071fc:	0800720d 	.word	0x0800720d
 8007200:	08007213 	.word	0x08007213
 8007204:	08007219 	.word	0x08007219
 8007208:	0800721f 	.word	0x0800721f
    case HAL_OK :
      usb_status = USBD_OK;
 800720c:	2300      	movs	r3, #0
 800720e:	73fb      	strb	r3, [r7, #15]
    break;
 8007210:	e00b      	b.n	800722a <USBD_LL_Start+0x5a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 8007212:	2303      	movs	r3, #3
 8007214:	73fb      	strb	r3, [r7, #15]
    break;
 8007216:	e008      	b.n	800722a <USBD_LL_Start+0x5a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 8007218:	2301      	movs	r3, #1
 800721a:	73fb      	strb	r3, [r7, #15]
    break;
 800721c:	e005      	b.n	800722a <USBD_LL_Start+0x5a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 800721e:	2303      	movs	r3, #3
 8007220:	73fb      	strb	r3, [r7, #15]
    break;
 8007222:	e002      	b.n	800722a <USBD_LL_Start+0x5a>
    default :
      usb_status = USBD_FAIL;
 8007224:	2303      	movs	r3, #3
 8007226:	73fb      	strb	r3, [r7, #15]
    break;
 8007228:	bf00      	nop
  }
  return usb_status;
 800722a:	7bfb      	ldrb	r3, [r7, #15]
}
 800722c:	4618      	mov	r0, r3
 800722e:	3710      	adds	r7, #16
 8007230:	46bd      	mov	sp, r7
 8007232:	bd80      	pop	{r7, pc}

08007234 <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 8007234:	b580      	push	{r7, lr}
 8007236:	b084      	sub	sp, #16
 8007238:	af00      	add	r7, sp, #0
 800723a:	6078      	str	r0, [r7, #4]
 800723c:	4608      	mov	r0, r1
 800723e:	4611      	mov	r1, r2
 8007240:	461a      	mov	r2, r3
 8007242:	4603      	mov	r3, r0
 8007244:	70fb      	strb	r3, [r7, #3]
 8007246:	460b      	mov	r3, r1
 8007248:	70bb      	strb	r3, [r7, #2]
 800724a:	4613      	mov	r3, r2
 800724c:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800724e:	2300      	movs	r3, #0
 8007250:	73bb      	strb	r3, [r7, #14]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8007252:	2300      	movs	r3, #0
 8007254:	73fb      	strb	r3, [r7, #15]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 8007256:	687b      	ldr	r3, [r7, #4]
 8007258:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 800725c:	78bb      	ldrb	r3, [r7, #2]
 800725e:	883a      	ldrh	r2, [r7, #0]
 8007260:	78f9      	ldrb	r1, [r7, #3]
 8007262:	f7fa f94c 	bl	80014fe <HAL_PCD_EP_Open>
 8007266:	4603      	mov	r3, r0
 8007268:	73bb      	strb	r3, [r7, #14]

  switch (hal_status) {
 800726a:	7bbb      	ldrb	r3, [r7, #14]
 800726c:	2b03      	cmp	r3, #3
 800726e:	d817      	bhi.n	80072a0 <USBD_LL_OpenEP+0x6c>
 8007270:	a201      	add	r2, pc, #4	; (adr r2, 8007278 <USBD_LL_OpenEP+0x44>)
 8007272:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007276:	bf00      	nop
 8007278:	08007289 	.word	0x08007289
 800727c:	0800728f 	.word	0x0800728f
 8007280:	08007295 	.word	0x08007295
 8007284:	0800729b 	.word	0x0800729b
    case HAL_OK :
      usb_status = USBD_OK;
 8007288:	2300      	movs	r3, #0
 800728a:	73fb      	strb	r3, [r7, #15]
    break;
 800728c:	e00b      	b.n	80072a6 <USBD_LL_OpenEP+0x72>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 800728e:	2303      	movs	r3, #3
 8007290:	73fb      	strb	r3, [r7, #15]
    break;
 8007292:	e008      	b.n	80072a6 <USBD_LL_OpenEP+0x72>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 8007294:	2301      	movs	r3, #1
 8007296:	73fb      	strb	r3, [r7, #15]
    break;
 8007298:	e005      	b.n	80072a6 <USBD_LL_OpenEP+0x72>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 800729a:	2303      	movs	r3, #3
 800729c:	73fb      	strb	r3, [r7, #15]
    break;
 800729e:	e002      	b.n	80072a6 <USBD_LL_OpenEP+0x72>
    default :
      usb_status = USBD_FAIL;
 80072a0:	2303      	movs	r3, #3
 80072a2:	73fb      	strb	r3, [r7, #15]
    break;
 80072a4:	bf00      	nop
  }
  return usb_status;
 80072a6:	7bfb      	ldrb	r3, [r7, #15]
}
 80072a8:	4618      	mov	r0, r3
 80072aa:	3710      	adds	r7, #16
 80072ac:	46bd      	mov	sp, r7
 80072ae:	bd80      	pop	{r7, pc}

080072b0 <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 80072b0:	b580      	push	{r7, lr}
 80072b2:	b084      	sub	sp, #16
 80072b4:	af00      	add	r7, sp, #0
 80072b6:	6078      	str	r0, [r7, #4]
 80072b8:	460b      	mov	r3, r1
 80072ba:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80072bc:	2300      	movs	r3, #0
 80072be:	73bb      	strb	r3, [r7, #14]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80072c0:	2300      	movs	r3, #0
 80072c2:	73fb      	strb	r3, [r7, #15]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 80072c4:	687b      	ldr	r3, [r7, #4]
 80072c6:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 80072ca:	78fa      	ldrb	r2, [r7, #3]
 80072cc:	4611      	mov	r1, r2
 80072ce:	4618      	mov	r0, r3
 80072d0:	f7fa f97d 	bl	80015ce <HAL_PCD_EP_Close>
 80072d4:	4603      	mov	r3, r0
 80072d6:	73bb      	strb	r3, [r7, #14]

  switch (hal_status) {
 80072d8:	7bbb      	ldrb	r3, [r7, #14]
 80072da:	2b03      	cmp	r3, #3
 80072dc:	d816      	bhi.n	800730c <USBD_LL_CloseEP+0x5c>
 80072de:	a201      	add	r2, pc, #4	; (adr r2, 80072e4 <USBD_LL_CloseEP+0x34>)
 80072e0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80072e4:	080072f5 	.word	0x080072f5
 80072e8:	080072fb 	.word	0x080072fb
 80072ec:	08007301 	.word	0x08007301
 80072f0:	08007307 	.word	0x08007307
    case HAL_OK :
      usb_status = USBD_OK;
 80072f4:	2300      	movs	r3, #0
 80072f6:	73fb      	strb	r3, [r7, #15]
    break;
 80072f8:	e00b      	b.n	8007312 <USBD_LL_CloseEP+0x62>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 80072fa:	2303      	movs	r3, #3
 80072fc:	73fb      	strb	r3, [r7, #15]
    break;
 80072fe:	e008      	b.n	8007312 <USBD_LL_CloseEP+0x62>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 8007300:	2301      	movs	r3, #1
 8007302:	73fb      	strb	r3, [r7, #15]
    break;
 8007304:	e005      	b.n	8007312 <USBD_LL_CloseEP+0x62>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 8007306:	2303      	movs	r3, #3
 8007308:	73fb      	strb	r3, [r7, #15]
    break;
 800730a:	e002      	b.n	8007312 <USBD_LL_CloseEP+0x62>
    default :
      usb_status = USBD_FAIL;
 800730c:	2303      	movs	r3, #3
 800730e:	73fb      	strb	r3, [r7, #15]
    break;
 8007310:	bf00      	nop
  }
  return usb_status;
 8007312:	7bfb      	ldrb	r3, [r7, #15]
}
 8007314:	4618      	mov	r0, r3
 8007316:	3710      	adds	r7, #16
 8007318:	46bd      	mov	sp, r7
 800731a:	bd80      	pop	{r7, pc}

0800731c <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800731c:	b580      	push	{r7, lr}
 800731e:	b084      	sub	sp, #16
 8007320:	af00      	add	r7, sp, #0
 8007322:	6078      	str	r0, [r7, #4]
 8007324:	460b      	mov	r3, r1
 8007326:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8007328:	2300      	movs	r3, #0
 800732a:	73bb      	strb	r3, [r7, #14]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800732c:	2300      	movs	r3, #0
 800732e:	73fb      	strb	r3, [r7, #15]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 8007330:	687b      	ldr	r3, [r7, #4]
 8007332:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 8007336:	78fa      	ldrb	r2, [r7, #3]
 8007338:	4611      	mov	r1, r2
 800733a:	4618      	mov	r0, r3
 800733c:	f7fa fa24 	bl	8001788 <HAL_PCD_EP_SetStall>
 8007340:	4603      	mov	r3, r0
 8007342:	73bb      	strb	r3, [r7, #14]

  switch (hal_status) {
 8007344:	7bbb      	ldrb	r3, [r7, #14]
 8007346:	2b03      	cmp	r3, #3
 8007348:	d816      	bhi.n	8007378 <USBD_LL_StallEP+0x5c>
 800734a:	a201      	add	r2, pc, #4	; (adr r2, 8007350 <USBD_LL_StallEP+0x34>)
 800734c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007350:	08007361 	.word	0x08007361
 8007354:	08007367 	.word	0x08007367
 8007358:	0800736d 	.word	0x0800736d
 800735c:	08007373 	.word	0x08007373
    case HAL_OK :
      usb_status = USBD_OK;
 8007360:	2300      	movs	r3, #0
 8007362:	73fb      	strb	r3, [r7, #15]
    break;
 8007364:	e00b      	b.n	800737e <USBD_LL_StallEP+0x62>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 8007366:	2303      	movs	r3, #3
 8007368:	73fb      	strb	r3, [r7, #15]
    break;
 800736a:	e008      	b.n	800737e <USBD_LL_StallEP+0x62>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 800736c:	2301      	movs	r3, #1
 800736e:	73fb      	strb	r3, [r7, #15]
    break;
 8007370:	e005      	b.n	800737e <USBD_LL_StallEP+0x62>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 8007372:	2303      	movs	r3, #3
 8007374:	73fb      	strb	r3, [r7, #15]
    break;
 8007376:	e002      	b.n	800737e <USBD_LL_StallEP+0x62>
    default :
      usb_status = USBD_FAIL;
 8007378:	2303      	movs	r3, #3
 800737a:	73fb      	strb	r3, [r7, #15]
    break;
 800737c:	bf00      	nop
  }
  return usb_status;
 800737e:	7bfb      	ldrb	r3, [r7, #15]
}
 8007380:	4618      	mov	r0, r3
 8007382:	3710      	adds	r7, #16
 8007384:	46bd      	mov	sp, r7
 8007386:	bd80      	pop	{r7, pc}

08007388 <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8007388:	b580      	push	{r7, lr}
 800738a:	b084      	sub	sp, #16
 800738c:	af00      	add	r7, sp, #0
 800738e:	6078      	str	r0, [r7, #4]
 8007390:	460b      	mov	r3, r1
 8007392:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8007394:	2300      	movs	r3, #0
 8007396:	73bb      	strb	r3, [r7, #14]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8007398:	2300      	movs	r3, #0
 800739a:	73fb      	strb	r3, [r7, #15]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 800739c:	687b      	ldr	r3, [r7, #4]
 800739e:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 80073a2:	78fa      	ldrb	r2, [r7, #3]
 80073a4:	4611      	mov	r1, r2
 80073a6:	4618      	mov	r0, r3
 80073a8:	f7fa fa50 	bl	800184c <HAL_PCD_EP_ClrStall>
 80073ac:	4603      	mov	r3, r0
 80073ae:	73bb      	strb	r3, [r7, #14]

  switch (hal_status) {
 80073b0:	7bbb      	ldrb	r3, [r7, #14]
 80073b2:	2b03      	cmp	r3, #3
 80073b4:	d816      	bhi.n	80073e4 <USBD_LL_ClearStallEP+0x5c>
 80073b6:	a201      	add	r2, pc, #4	; (adr r2, 80073bc <USBD_LL_ClearStallEP+0x34>)
 80073b8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80073bc:	080073cd 	.word	0x080073cd
 80073c0:	080073d3 	.word	0x080073d3
 80073c4:	080073d9 	.word	0x080073d9
 80073c8:	080073df 	.word	0x080073df
    case HAL_OK :
      usb_status = USBD_OK;
 80073cc:	2300      	movs	r3, #0
 80073ce:	73fb      	strb	r3, [r7, #15]
    break;
 80073d0:	e00b      	b.n	80073ea <USBD_LL_ClearStallEP+0x62>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 80073d2:	2303      	movs	r3, #3
 80073d4:	73fb      	strb	r3, [r7, #15]
    break;
 80073d6:	e008      	b.n	80073ea <USBD_LL_ClearStallEP+0x62>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 80073d8:	2301      	movs	r3, #1
 80073da:	73fb      	strb	r3, [r7, #15]
    break;
 80073dc:	e005      	b.n	80073ea <USBD_LL_ClearStallEP+0x62>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 80073de:	2303      	movs	r3, #3
 80073e0:	73fb      	strb	r3, [r7, #15]
    break;
 80073e2:	e002      	b.n	80073ea <USBD_LL_ClearStallEP+0x62>
    default :
      usb_status = USBD_FAIL;
 80073e4:	2303      	movs	r3, #3
 80073e6:	73fb      	strb	r3, [r7, #15]
    break;
 80073e8:	bf00      	nop
  }
  return usb_status;
 80073ea:	7bfb      	ldrb	r3, [r7, #15]
}
 80073ec:	4618      	mov	r0, r3
 80073ee:	3710      	adds	r7, #16
 80073f0:	46bd      	mov	sp, r7
 80073f2:	bd80      	pop	{r7, pc}

080073f4 <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 80073f4:	b480      	push	{r7}
 80073f6:	b085      	sub	sp, #20
 80073f8:	af00      	add	r7, sp, #0
 80073fa:	6078      	str	r0, [r7, #4]
 80073fc:	460b      	mov	r3, r1
 80073fe:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 8007400:	687b      	ldr	r3, [r7, #4]
 8007402:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 8007406:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 8007408:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800740c:	2b00      	cmp	r3, #0
 800740e:	da0b      	bge.n	8007428 <USBD_LL_IsStallEP+0x34>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 8007410:	78fb      	ldrb	r3, [r7, #3]
 8007412:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8007416:	68f9      	ldr	r1, [r7, #12]
 8007418:	4613      	mov	r3, r2
 800741a:	00db      	lsls	r3, r3, #3
 800741c:	1a9b      	subs	r3, r3, r2
 800741e:	009b      	lsls	r3, r3, #2
 8007420:	440b      	add	r3, r1
 8007422:	333e      	adds	r3, #62	; 0x3e
 8007424:	781b      	ldrb	r3, [r3, #0]
 8007426:	e00b      	b.n	8007440 <USBD_LL_IsStallEP+0x4c>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 8007428:	78fb      	ldrb	r3, [r7, #3]
 800742a:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800742e:	68f9      	ldr	r1, [r7, #12]
 8007430:	4613      	mov	r3, r2
 8007432:	00db      	lsls	r3, r3, #3
 8007434:	1a9b      	subs	r3, r3, r2
 8007436:	009b      	lsls	r3, r3, #2
 8007438:	440b      	add	r3, r1
 800743a:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 800743e:	781b      	ldrb	r3, [r3, #0]
  }
}
 8007440:	4618      	mov	r0, r3
 8007442:	3714      	adds	r7, #20
 8007444:	46bd      	mov	sp, r7
 8007446:	f85d 7b04 	ldr.w	r7, [sp], #4
 800744a:	4770      	bx	lr

0800744c <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 800744c:	b580      	push	{r7, lr}
 800744e:	b084      	sub	sp, #16
 8007450:	af00      	add	r7, sp, #0
 8007452:	6078      	str	r0, [r7, #4]
 8007454:	460b      	mov	r3, r1
 8007456:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8007458:	2300      	movs	r3, #0
 800745a:	73bb      	strb	r3, [r7, #14]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800745c:	2300      	movs	r3, #0
 800745e:	73fb      	strb	r3, [r7, #15]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 8007460:	687b      	ldr	r3, [r7, #4]
 8007462:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 8007466:	78fa      	ldrb	r2, [r7, #3]
 8007468:	4611      	mov	r1, r2
 800746a:	4618      	mov	r0, r3
 800746c:	f7fa f822 	bl	80014b4 <HAL_PCD_SetAddress>
 8007470:	4603      	mov	r3, r0
 8007472:	73bb      	strb	r3, [r7, #14]

  switch (hal_status) {
 8007474:	7bbb      	ldrb	r3, [r7, #14]
 8007476:	2b03      	cmp	r3, #3
 8007478:	d816      	bhi.n	80074a8 <USBD_LL_SetUSBAddress+0x5c>
 800747a:	a201      	add	r2, pc, #4	; (adr r2, 8007480 <USBD_LL_SetUSBAddress+0x34>)
 800747c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007480:	08007491 	.word	0x08007491
 8007484:	08007497 	.word	0x08007497
 8007488:	0800749d 	.word	0x0800749d
 800748c:	080074a3 	.word	0x080074a3
    case HAL_OK :
      usb_status = USBD_OK;
 8007490:	2300      	movs	r3, #0
 8007492:	73fb      	strb	r3, [r7, #15]
    break;
 8007494:	e00b      	b.n	80074ae <USBD_LL_SetUSBAddress+0x62>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 8007496:	2303      	movs	r3, #3
 8007498:	73fb      	strb	r3, [r7, #15]
    break;
 800749a:	e008      	b.n	80074ae <USBD_LL_SetUSBAddress+0x62>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 800749c:	2301      	movs	r3, #1
 800749e:	73fb      	strb	r3, [r7, #15]
    break;
 80074a0:	e005      	b.n	80074ae <USBD_LL_SetUSBAddress+0x62>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 80074a2:	2303      	movs	r3, #3
 80074a4:	73fb      	strb	r3, [r7, #15]
    break;
 80074a6:	e002      	b.n	80074ae <USBD_LL_SetUSBAddress+0x62>
    default :
      usb_status = USBD_FAIL;
 80074a8:	2303      	movs	r3, #3
 80074aa:	73fb      	strb	r3, [r7, #15]
    break;
 80074ac:	bf00      	nop
  }
  return usb_status;
 80074ae:	7bfb      	ldrb	r3, [r7, #15]
}
 80074b0:	4618      	mov	r0, r3
 80074b2:	3710      	adds	r7, #16
 80074b4:	46bd      	mov	sp, r7
 80074b6:	bd80      	pop	{r7, pc}

080074b8 <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 80074b8:	b580      	push	{r7, lr}
 80074ba:	b086      	sub	sp, #24
 80074bc:	af00      	add	r7, sp, #0
 80074be:	60f8      	str	r0, [r7, #12]
 80074c0:	607a      	str	r2, [r7, #4]
 80074c2:	603b      	str	r3, [r7, #0]
 80074c4:	460b      	mov	r3, r1
 80074c6:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80074c8:	2300      	movs	r3, #0
 80074ca:	75bb      	strb	r3, [r7, #22]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80074cc:	2300      	movs	r3, #0
 80074ce:	75fb      	strb	r3, [r7, #23]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 80074d0:	68fb      	ldr	r3, [r7, #12]
 80074d2:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 80074d6:	7af9      	ldrb	r1, [r7, #11]
 80074d8:	683b      	ldr	r3, [r7, #0]
 80074da:	687a      	ldr	r2, [r7, #4]
 80074dc:	f7fa f917 	bl	800170e <HAL_PCD_EP_Transmit>
 80074e0:	4603      	mov	r3, r0
 80074e2:	75bb      	strb	r3, [r7, #22]

  switch (hal_status) {
 80074e4:	7dbb      	ldrb	r3, [r7, #22]
 80074e6:	2b03      	cmp	r3, #3
 80074e8:	d816      	bhi.n	8007518 <USBD_LL_Transmit+0x60>
 80074ea:	a201      	add	r2, pc, #4	; (adr r2, 80074f0 <USBD_LL_Transmit+0x38>)
 80074ec:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80074f0:	08007501 	.word	0x08007501
 80074f4:	08007507 	.word	0x08007507
 80074f8:	0800750d 	.word	0x0800750d
 80074fc:	08007513 	.word	0x08007513
    case HAL_OK :
      usb_status = USBD_OK;
 8007500:	2300      	movs	r3, #0
 8007502:	75fb      	strb	r3, [r7, #23]
    break;
 8007504:	e00b      	b.n	800751e <USBD_LL_Transmit+0x66>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 8007506:	2303      	movs	r3, #3
 8007508:	75fb      	strb	r3, [r7, #23]
    break;
 800750a:	e008      	b.n	800751e <USBD_LL_Transmit+0x66>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 800750c:	2301      	movs	r3, #1
 800750e:	75fb      	strb	r3, [r7, #23]
    break;
 8007510:	e005      	b.n	800751e <USBD_LL_Transmit+0x66>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 8007512:	2303      	movs	r3, #3
 8007514:	75fb      	strb	r3, [r7, #23]
    break;
 8007516:	e002      	b.n	800751e <USBD_LL_Transmit+0x66>
    default :
      usb_status = USBD_FAIL;
 8007518:	2303      	movs	r3, #3
 800751a:	75fb      	strb	r3, [r7, #23]
    break;
 800751c:	bf00      	nop
  }
  return usb_status;
 800751e:	7dfb      	ldrb	r3, [r7, #23]
}
 8007520:	4618      	mov	r0, r3
 8007522:	3718      	adds	r7, #24
 8007524:	46bd      	mov	sp, r7
 8007526:	bd80      	pop	{r7, pc}

08007528 <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 8007528:	b580      	push	{r7, lr}
 800752a:	b086      	sub	sp, #24
 800752c:	af00      	add	r7, sp, #0
 800752e:	60f8      	str	r0, [r7, #12]
 8007530:	607a      	str	r2, [r7, #4]
 8007532:	603b      	str	r3, [r7, #0]
 8007534:	460b      	mov	r3, r1
 8007536:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8007538:	2300      	movs	r3, #0
 800753a:	75bb      	strb	r3, [r7, #22]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800753c:	2300      	movs	r3, #0
 800753e:	75fb      	strb	r3, [r7, #23]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 8007540:	68fb      	ldr	r3, [r7, #12]
 8007542:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 8007546:	7af9      	ldrb	r1, [r7, #11]
 8007548:	683b      	ldr	r3, [r7, #0]
 800754a:	687a      	ldr	r2, [r7, #4]
 800754c:	f7fa f889 	bl	8001662 <HAL_PCD_EP_Receive>
 8007550:	4603      	mov	r3, r0
 8007552:	75bb      	strb	r3, [r7, #22]

  switch (hal_status) {
 8007554:	7dbb      	ldrb	r3, [r7, #22]
 8007556:	2b03      	cmp	r3, #3
 8007558:	d816      	bhi.n	8007588 <USBD_LL_PrepareReceive+0x60>
 800755a:	a201      	add	r2, pc, #4	; (adr r2, 8007560 <USBD_LL_PrepareReceive+0x38>)
 800755c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007560:	08007571 	.word	0x08007571
 8007564:	08007577 	.word	0x08007577
 8007568:	0800757d 	.word	0x0800757d
 800756c:	08007583 	.word	0x08007583
    case HAL_OK :
      usb_status = USBD_OK;
 8007570:	2300      	movs	r3, #0
 8007572:	75fb      	strb	r3, [r7, #23]
    break;
 8007574:	e00b      	b.n	800758e <USBD_LL_PrepareReceive+0x66>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 8007576:	2303      	movs	r3, #3
 8007578:	75fb      	strb	r3, [r7, #23]
    break;
 800757a:	e008      	b.n	800758e <USBD_LL_PrepareReceive+0x66>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 800757c:	2301      	movs	r3, #1
 800757e:	75fb      	strb	r3, [r7, #23]
    break;
 8007580:	e005      	b.n	800758e <USBD_LL_PrepareReceive+0x66>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 8007582:	2303      	movs	r3, #3
 8007584:	75fb      	strb	r3, [r7, #23]
    break;
 8007586:	e002      	b.n	800758e <USBD_LL_PrepareReceive+0x66>
    default :
      usb_status = USBD_FAIL;
 8007588:	2303      	movs	r3, #3
 800758a:	75fb      	strb	r3, [r7, #23]
    break;
 800758c:	bf00      	nop
  }
  return usb_status;
 800758e:	7dfb      	ldrb	r3, [r7, #23]
}
 8007590:	4618      	mov	r0, r3
 8007592:	3718      	adds	r7, #24
 8007594:	46bd      	mov	sp, r7
 8007596:	bd80      	pop	{r7, pc}

08007598 <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Received Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8007598:	b580      	push	{r7, lr}
 800759a:	b082      	sub	sp, #8
 800759c:	af00      	add	r7, sp, #0
 800759e:	6078      	str	r0, [r7, #4]
 80075a0:	460b      	mov	r3, r1
 80075a2:	70fb      	strb	r3, [r7, #3]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 80075a4:	687b      	ldr	r3, [r7, #4]
 80075a6:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 80075aa:	78fa      	ldrb	r2, [r7, #3]
 80075ac:	4611      	mov	r1, r2
 80075ae:	4618      	mov	r0, r3
 80075b0:	f7fa f895 	bl	80016de <HAL_PCD_EP_GetRxCount>
 80075b4:	4603      	mov	r3, r0
}
 80075b6:	4618      	mov	r0, r3
 80075b8:	3708      	adds	r7, #8
 80075ba:	46bd      	mov	sp, r7
 80075bc:	bd80      	pop	{r7, pc}
	...

080075c0 <HAL_PCDEx_LPM_Callback>:
  * @param  hpcd: PCD handle
  * @param  msg: LPM message
  * @retval None
  */
void HAL_PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
{
 80075c0:	b580      	push	{r7, lr}
 80075c2:	b082      	sub	sp, #8
 80075c4:	af00      	add	r7, sp, #0
 80075c6:	6078      	str	r0, [r7, #4]
 80075c8:	460b      	mov	r3, r1
 80075ca:	70fb      	strb	r3, [r7, #3]
  switch (msg)
 80075cc:	78fb      	ldrb	r3, [r7, #3]
 80075ce:	2b00      	cmp	r3, #0
 80075d0:	d002      	beq.n	80075d8 <HAL_PCDEx_LPM_Callback+0x18>
 80075d2:	2b01      	cmp	r3, #1
 80075d4:	d01f      	beq.n	8007616 <HAL_PCDEx_LPM_Callback+0x56>
      /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
      SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
    }
    break;
  }
}
 80075d6:	e03b      	b.n	8007650 <HAL_PCDEx_LPM_Callback+0x90>
    if (hpcd->Init.low_power_enable)
 80075d8:	687b      	ldr	r3, [r7, #4]
 80075da:	6a1b      	ldr	r3, [r3, #32]
 80075dc:	2b00      	cmp	r3, #0
 80075de:	d007      	beq.n	80075f0 <HAL_PCDEx_LPM_Callback+0x30>
      SystemClockConfig_Resume();
 80075e0:	f000 f854 	bl	800768c <SystemClockConfig_Resume>
      SCB->SCR &= (uint32_t)~((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 80075e4:	4b1c      	ldr	r3, [pc, #112]	; (8007658 <HAL_PCDEx_LPM_Callback+0x98>)
 80075e6:	691b      	ldr	r3, [r3, #16]
 80075e8:	4a1b      	ldr	r2, [pc, #108]	; (8007658 <HAL_PCDEx_LPM_Callback+0x98>)
 80075ea:	f023 0306 	bic.w	r3, r3, #6
 80075ee:	6113      	str	r3, [r2, #16]
    __HAL_PCD_UNGATE_PHYCLOCK(hpcd);
 80075f0:	687b      	ldr	r3, [r7, #4]
 80075f2:	681b      	ldr	r3, [r3, #0]
 80075f4:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 80075f8:	681b      	ldr	r3, [r3, #0]
 80075fa:	687a      	ldr	r2, [r7, #4]
 80075fc:	6812      	ldr	r2, [r2, #0]
 80075fe:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 8007602:	f023 0301 	bic.w	r3, r3, #1
 8007606:	6013      	str	r3, [r2, #0]
    USBD_LL_Resume(hpcd->pData);
 8007608:	687b      	ldr	r3, [r7, #4]
 800760a:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 800760e:	4618      	mov	r0, r3
 8007610:	f7fe fab8 	bl	8005b84 <USBD_LL_Resume>
    break;
 8007614:	e01c      	b.n	8007650 <HAL_PCDEx_LPM_Callback+0x90>
    __HAL_PCD_GATE_PHYCLOCK(hpcd);
 8007616:	687b      	ldr	r3, [r7, #4]
 8007618:	681b      	ldr	r3, [r3, #0]
 800761a:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 800761e:	681b      	ldr	r3, [r3, #0]
 8007620:	687a      	ldr	r2, [r7, #4]
 8007622:	6812      	ldr	r2, [r2, #0]
 8007624:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 8007628:	f043 0301 	orr.w	r3, r3, #1
 800762c:	6013      	str	r3, [r2, #0]
    USBD_LL_Suspend(hpcd->pData);
 800762e:	687b      	ldr	r3, [r7, #4]
 8007630:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8007634:	4618      	mov	r0, r3
 8007636:	f7fe fa8f 	bl	8005b58 <USBD_LL_Suspend>
    if (hpcd->Init.low_power_enable)
 800763a:	687b      	ldr	r3, [r7, #4]
 800763c:	6a1b      	ldr	r3, [r3, #32]
 800763e:	2b00      	cmp	r3, #0
 8007640:	d005      	beq.n	800764e <HAL_PCDEx_LPM_Callback+0x8e>
      SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 8007642:	4b05      	ldr	r3, [pc, #20]	; (8007658 <HAL_PCDEx_LPM_Callback+0x98>)
 8007644:	691b      	ldr	r3, [r3, #16]
 8007646:	4a04      	ldr	r2, [pc, #16]	; (8007658 <HAL_PCDEx_LPM_Callback+0x98>)
 8007648:	f043 0306 	orr.w	r3, r3, #6
 800764c:	6113      	str	r3, [r2, #16]
    break;
 800764e:	bf00      	nop
}
 8007650:	bf00      	nop
 8007652:	3708      	adds	r7, #8
 8007654:	46bd      	mov	sp, r7
 8007656:	bd80      	pop	{r7, pc}
 8007658:	e000ed00 	.word	0xe000ed00

0800765c <USBD_static_malloc>:
  * @brief  Static single allocation.
  * @param  size: Size of allocated memory
  * @retval None
  */
void *USBD_static_malloc(uint32_t size)
{
 800765c:	b480      	push	{r7}
 800765e:	b083      	sub	sp, #12
 8007660:	af00      	add	r7, sp, #0
 8007662:	6078      	str	r0, [r7, #4]
  static uint32_t mem[(sizeof(USBD_CDC_HandleTypeDef)/4)+1];/* On 32-bit boundary */
  return mem;
 8007664:	4b03      	ldr	r3, [pc, #12]	; (8007674 <USBD_static_malloc+0x18>)
}
 8007666:	4618      	mov	r0, r3
 8007668:	370c      	adds	r7, #12
 800766a:	46bd      	mov	sp, r7
 800766c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007670:	4770      	bx	lr
 8007672:	bf00      	nop
 8007674:	200001b0 	.word	0x200001b0

08007678 <USBD_static_free>:
  * @brief  Dummy memory free
  * @param  p: Pointer to allocated  memory address
  * @retval None
  */
void USBD_static_free(void *p)
{
 8007678:	b480      	push	{r7}
 800767a:	b083      	sub	sp, #12
 800767c:	af00      	add	r7, sp, #0
 800767e:	6078      	str	r0, [r7, #4]

}
 8007680:	bf00      	nop
 8007682:	370c      	adds	r7, #12
 8007684:	46bd      	mov	sp, r7
 8007686:	f85d 7b04 	ldr.w	r7, [sp], #4
 800768a:	4770      	bx	lr

0800768c <SystemClockConfig_Resume>:
  * @brief  Configures system clock after wake-up from USB resume callBack:
  *         enable HSI, PLL and select PLL as system clock source.
  * @retval None
  */
static void SystemClockConfig_Resume(void)
{
 800768c:	b580      	push	{r7, lr}
 800768e:	af00      	add	r7, sp, #0
  SystemClock_Config();
 8007690:	f7f8 fdf8 	bl	8000284 <SystemClock_Config>
}
 8007694:	bf00      	nop
 8007696:	bd80      	pop	{r7, pc}

08007698 <__libc_init_array>:
 8007698:	b570      	push	{r4, r5, r6, lr}
 800769a:	4d0d      	ldr	r5, [pc, #52]	; (80076d0 <__libc_init_array+0x38>)
 800769c:	4c0d      	ldr	r4, [pc, #52]	; (80076d4 <__libc_init_array+0x3c>)
 800769e:	1b64      	subs	r4, r4, r5
 80076a0:	10a4      	asrs	r4, r4, #2
 80076a2:	2600      	movs	r6, #0
 80076a4:	42a6      	cmp	r6, r4
 80076a6:	d109      	bne.n	80076bc <__libc_init_array+0x24>
 80076a8:	4d0b      	ldr	r5, [pc, #44]	; (80076d8 <__libc_init_array+0x40>)
 80076aa:	4c0c      	ldr	r4, [pc, #48]	; (80076dc <__libc_init_array+0x44>)
 80076ac:	f000 f820 	bl	80076f0 <_init>
 80076b0:	1b64      	subs	r4, r4, r5
 80076b2:	10a4      	asrs	r4, r4, #2
 80076b4:	2600      	movs	r6, #0
 80076b6:	42a6      	cmp	r6, r4
 80076b8:	d105      	bne.n	80076c6 <__libc_init_array+0x2e>
 80076ba:	bd70      	pop	{r4, r5, r6, pc}
 80076bc:	f855 3b04 	ldr.w	r3, [r5], #4
 80076c0:	4798      	blx	r3
 80076c2:	3601      	adds	r6, #1
 80076c4:	e7ee      	b.n	80076a4 <__libc_init_array+0xc>
 80076c6:	f855 3b04 	ldr.w	r3, [r5], #4
 80076ca:	4798      	blx	r3
 80076cc:	3601      	adds	r6, #1
 80076ce:	e7f2      	b.n	80076b6 <__libc_init_array+0x1e>
 80076d0:	080077a8 	.word	0x080077a8
 80076d4:	080077a8 	.word	0x080077a8
 80076d8:	080077a8 	.word	0x080077a8
 80076dc:	080077ac 	.word	0x080077ac

080076e0 <memset>:
 80076e0:	4402      	add	r2, r0
 80076e2:	4603      	mov	r3, r0
 80076e4:	4293      	cmp	r3, r2
 80076e6:	d100      	bne.n	80076ea <memset+0xa>
 80076e8:	4770      	bx	lr
 80076ea:	f803 1b01 	strb.w	r1, [r3], #1
 80076ee:	e7f9      	b.n	80076e4 <memset+0x4>

080076f0 <_init>:
 80076f0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80076f2:	bf00      	nop
 80076f4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80076f6:	bc08      	pop	{r3}
 80076f8:	469e      	mov	lr, r3
 80076fa:	4770      	bx	lr

080076fc <_fini>:
 80076fc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80076fe:	bf00      	nop
 8007700:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007702:	bc08      	pop	{r3}
 8007704:	469e      	mov	lr, r3
 8007706:	4770      	bx	lr
